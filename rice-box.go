package main

import (
	"github.com/GeertJohan/go.rice/embedded"
	"time"
)

func init() {

	// define files
	file4 := &embedded.EmbeddedFile{
		Filename:    "addons/attach/attach.js",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.attach = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction attach(term, socket, bidirectional, buffered) {\r\n    var addonTerminal = term;\r\n    bidirectional = (typeof bidirectional === 'undefined') ? true : bidirectional;\r\n    addonTerminal.__socket = socket;\r\n    addonTerminal.__flushBuffer = function () {\r\n        addonTerminal.write(addonTerminal.__attachSocketBuffer);\r\n        addonTerminal.__attachSocketBuffer = null;\r\n    };\r\n    addonTerminal.__pushToBuffer = function (data) {\r\n        if (addonTerminal.__attachSocketBuffer) {\r\n            addonTerminal.__attachSocketBuffer += data;\r\n        }\r\n        else {\r\n            addonTerminal.__attachSocketBuffer = data;\r\n            setTimeout(addonTerminal.__flushBuffer, 10);\r\n        }\r\n    };\r\n    var myTextDecoder;\r\n    addonTerminal.__getMessage = function (ev) {\r\n        var str;\r\n        if (typeof ev.data == 'object') {\r\n            if (!myTextDecoder) {\r\n                myTextDecoder = new TextDecoder();\r\n            }\r\n            if (ev.data instanceof ArrayBuffer) {\r\n                str = myTextDecoder.decode(ev.data);\r\n                displayData(str);\r\n            }\r\n            else {\r\n                var fileReader = new FileReader();\r\n                fileReader.addEventListener('load', function () {\r\n                    str = myTextDecoder.decode(this.result);\r\n                    displayData(str);\r\n                });\r\n                fileReader.readAsArrayBuffer(ev.data);\r\n            }\r\n        }\r\n        else if (typeof ev.data == 'string') {\r\n            displayData(ev.data);\r\n        }\r\n        else {\r\n            throw Error(\"Cannot handle \\\"\" + typeof ev.data + \"\\\" websocket message.\");\r\n        }\r\n    };\r\n    function displayData(str, data) {\r\n        if (buffered) {\r\n            addonTerminal.__pushToBuffer(str || data);\r\n        }\r\n        else {\r\n            addonTerminal.write(str || data);\r\n        }\r\n    }\r\n    addonTerminal.__sendData = function (data) {\r\n        if (socket.readyState !== 1) {\r\n            return;\r\n        }\r\n        socket.send(data);\r\n    };\r\n    socket.addEventListener('message', addonTerminal.__getMessage);\r\n    if (bidirectional) {\r\n        addonTerminal.on('data', addonTerminal.__sendData);\r\n    }\r\n    socket.addEventListener('close', function () { return detach(addonTerminal, socket); });\r\n    socket.addEventListener('error', function () { return detach(addonTerminal, socket); });\r\n}\r\nexports.attach = attach;\r\nfunction detach(term, socket) {\r\n    var addonTerminal = term;\r\n    addonTerminal.off('data', addonTerminal.__sendData);\r\n    socket = (typeof socket === 'undefined') ? addonTerminal.__socket : socket;\r\n    if (socket) {\r\n        socket.removeEventListener('message', addonTerminal.__getMessage);\r\n    }\r\n    delete addonTerminal.__socket;\r\n}\r\nexports.detach = detach;\r\nfunction apply(terminalConstructor) {\r\n    terminalConstructor.prototype.attach = function (socket, bidirectional, buffered) {\r\n        attach(this, socket, bidirectional, buffered);\r\n    };\r\n    terminalConstructor.prototype.detach = function (socket) {\r\n        detach(this, socket);\r\n    };\r\n}\r\nexports.apply = apply;\r\n\r\n\r\n\r\n},{}]},{},[1])(1)\r\n});\r\n//# sourceMappingURL=attach.js.map\r\n"),
	}
	file5 := &embedded.EmbeddedFile{
		Filename:    "addons/attach/attach.js.map",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("{\"version\":3,\"file\":\"attach.js\",\"sources\":[\"../../../src/addons/attach/attach.ts\",\"../../../node_modules/browser-pack/_prelude.js\"],\"sourcesContent\":[\"/**\\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\\n * @license MIT\\n *\\n * Implements the attach method, that attaches the terminal to a WebSocket stream.\\n */\\n\\n/// <reference path=\\\"../../../typings/xterm.d.ts\\\"/>\\n\\nimport { Terminal } from 'xterm';\\nimport { IAttachAddonTerminal } from './Interfaces';\\n\\n/**\\n * Attaches the given terminal to the given socket.\\n *\\n * @param term The terminal to be attached to the given socket.\\n * @param socket The socket to attach the current terminal.\\n * @param bidirectional Whether the terminal should send data to the socket as well.\\n * @param buffered Whether the rendering of incoming data should happen instantly or at a maximum\\n * frequency of 1 rendering per 10ms.\\n */\\nexport function attach(term: Terminal, socket: WebSocket, bidirectional: boolean, buffered: boolean): void {\\n  const addonTerminal = <IAttachAddonTerminal>term;\\n  bidirectional = (typeof bidirectional === 'undefined') ? true : bidirectional;\\n  addonTerminal.__socket = socket;\\n\\n  addonTerminal.__flushBuffer = () => {\\n    addonTerminal.write(addonTerminal.__attachSocketBuffer);\\n    addonTerminal.__attachSocketBuffer = null;\\n  };\\n\\n  addonTerminal.__pushToBuffer = (data: string) => {\\n    if (addonTerminal.__attachSocketBuffer) {\\n      addonTerminal.__attachSocketBuffer += data;\\n    } else {\\n      addonTerminal.__attachSocketBuffer = data;\\n      setTimeout(addonTerminal.__flushBuffer, 10);\\n    }\\n  };\\n\\n  let myTextDecoder;\\n\\n  addonTerminal.__getMessage = function(ev: MessageEvent): void {\\n    let str;\\n\\n    if (typeof ev.data == 'object') {\\n      if (!myTextDecoder) {\\n        myTextDecoder = new TextDecoder();\\n      }\\n      if (ev.data instanceof ArrayBuffer) {\\n        str = myTextDecoder.decode(ev.data);\\n        displayData(str);\\n      } else {\\n        let fileReader = new FileReader();\\n\\n        fileReader.addEventListener('load', function() {\\n          str = myTextDecoder.decode(this.result);\\n          displayData(str);\\n        });\\n        fileReader.readAsArrayBuffer(ev.data);\\n      }\\n    } else if (typeof ev.data == 'string') {\\n      displayData(ev.data)\\n    } else {\\n      throw Error(`Cannot handle \\\"${typeof ev.data}\\\" websocket message.`);\\n    }\\n  };\\n\\n  /**\\n  * Push data to buffer or write it in the terminal.\\n  * This is used as a callback for FileReader.onload.\\n  *\\n  * @param str String decoded by FileReader.\\n  * @param data The data of the EventMessage.\\n  */\\n  function displayData(str?: string, data?: string) {\\n    if (buffered) {\\n      addonTerminal.__pushToBuffer(str || data);\\n    } else {\\n      addonTerminal.write(str || data);\\n    }\\n  }\\n\\n  addonTerminal.__sendData = (data: string) => {\\n    if (socket.readyState !== 1) {\\n      return;\\n    }\\n    socket.send(data);\\n  };\\n\\n  socket.addEventListener('message', addonTerminal.__getMessage);\\n\\n  if (bidirectional) {\\n    addonTerminal.on('data', addonTerminal.__sendData);\\n  }\\n\\n  socket.addEventListener('close', () => detach(addonTerminal, socket));\\n  socket.addEventListener('error', () => detach(addonTerminal, socket));\\n}\\n\\n/**\\n * Detaches the given terminal from the given socket\\n *\\n * @param term The terminal to be detached from the given socket.\\n * @param socket The socket from which to detach the current terminal.\\n */\\nexport function detach(term: Terminal, socket: WebSocket): void {\\n  const addonTerminal = <IAttachAddonTerminal>term;\\n  addonTerminal.off('data', addonTerminal.__sendData);\\n\\n  socket = (typeof socket === 'undefined') ? addonTerminal.__socket : socket;\\n\\n  if (socket) {\\n    socket.removeEventListener('message', addonTerminal.__getMessage);\\n  }\\n\\n  delete addonTerminal.__socket;\\n}\\n\\n\\nexport function apply(terminalConstructor: typeof Terminal): void {\\n  /**\\n   * Attaches the current terminal to the given socket\\n   *\\n   * @param socket The socket to attach the current terminal.\\n   * @param bidirectional Whether the terminal should send data to the socket as well.\\n   * @param buffered Whether the rendering of incoming data should happen instantly or at a maximum\\n   * frequency of 1 rendering per 10ms.\\n   */\\n  (<any>terminalConstructor.prototype).attach = function (socket: WebSocket, bidirectional: boolean, buffered: boolean): void {\\n    attach(this, socket, bidirectional, buffered);\\n  };\\n\\n  /**\\n   * Detaches the current terminal from the given socket.\\n   *\\n   * @param socket The socket from which to detach the current terminal.\\n   */\\n  (<any>terminalConstructor.prototype).detach = function (socket: WebSocket): void {\\n    detach(this, socket);\\n  };\\n}\\n\",null],\"names\":[],\"mappings\":\"ACAA;;;ADqBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AA7EA;AAqFA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAXA;AAcA;AASA;AACA;AACA;AAOA;AACA;AACA;AACA;AArBA;;;\"}"),
	}
	file7 := &embedded.EmbeddedFile{
		Filename:    "addons/fit/fit.js",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.fit = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction proposeGeometry(term) {\r\n    if (!term.element.parentElement) {\r\n        return null;\r\n    }\r\n    var parentElementStyle = window.getComputedStyle(term.element.parentElement);\r\n    var parentElementHeight = parseInt(parentElementStyle.getPropertyValue('height'));\r\n    var parentElementWidth = Math.max(0, parseInt(parentElementStyle.getPropertyValue('width')));\r\n    var elementStyle = window.getComputedStyle(term.element);\r\n    var elementPadding = {\r\n        top: parseInt(elementStyle.getPropertyValue('padding-top')),\r\n        bottom: parseInt(elementStyle.getPropertyValue('padding-bottom')),\r\n        right: parseInt(elementStyle.getPropertyValue('padding-right')),\r\n        left: parseInt(elementStyle.getPropertyValue('padding-left'))\r\n    };\r\n    var elementPaddingVer = elementPadding.top + elementPadding.bottom;\r\n    var elementPaddingHor = elementPadding.right + elementPadding.left;\r\n    var availableHeight = parentElementHeight - elementPaddingVer;\r\n    var availableWidth = parentElementWidth - elementPaddingHor - term.viewport.scrollBarWidth;\r\n    var geometry = {\r\n        cols: Math.floor(availableWidth / term.renderer.dimensions.actualCellWidth),\r\n        rows: Math.floor(availableHeight / term.renderer.dimensions.actualCellHeight)\r\n    };\r\n    return geometry;\r\n}\r\nexports.proposeGeometry = proposeGeometry;\r\nfunction fit(term) {\r\n    var geometry = proposeGeometry(term);\r\n    if (geometry) {\r\n        if (term.rows !== geometry.rows || term.cols !== geometry.cols) {\r\n            term.renderer.clear();\r\n            term.resize(geometry.cols, geometry.rows);\r\n        }\r\n    }\r\n}\r\nexports.fit = fit;\r\nfunction apply(terminalConstructor) {\r\n    terminalConstructor.prototype.proposeGeometry = function () {\r\n        return proposeGeometry(this);\r\n    };\r\n    terminalConstructor.prototype.fit = function () {\r\n        fit(this);\r\n    };\r\n}\r\nexports.apply = apply;\r\n\r\n\r\n\r\n},{}]},{},[1])(1)\r\n});\r\n//# sourceMappingURL=fit.js.map\r\n"),
	}
	file8 := &embedded.EmbeddedFile{
		Filename:    "addons/fit/fit.js.map",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("{\"version\":3,\"file\":\"fit.js\",\"sources\":[\"../../../src/addons/fit/fit.ts\",\"../../../node_modules/browser-pack/_prelude.js\"],\"sourcesContent\":[\"/**\\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\\n * @license MIT\\n *\\n * Fit terminal columns and rows to the dimensions of its DOM element.\\n *\\n * ## Approach\\n *\\n *    Rows: Truncate the division of the terminal parent element height by the\\n *          terminal row height.\\n * Columns: Truncate the division of the terminal parent element width by the\\n *          terminal character width (apply display: inline at the terminal\\n *          row and truncate its width with the current number of columns).\\n */\\n\\n/// <reference path=\\\"../../../typings/xterm.d.ts\\\"/>\\n\\nimport { Terminal } from 'xterm';\\n\\nexport interface IGeometry {\\n  rows: number;\\n  cols: number;\\n}\\n\\nexport function proposeGeometry(term: Terminal): IGeometry {\\n  if (!term.element.parentElement) {\\n    return null;\\n  }\\n  const parentElementStyle = window.getComputedStyle(term.element.parentElement);\\n  const parentElementHeight = parseInt(parentElementStyle.getPropertyValue('height'));\\n  const parentElementWidth = Math.max(0, parseInt(parentElementStyle.getPropertyValue('width')));\\n  const elementStyle = window.getComputedStyle(term.element);\\n  const elementPadding = {\\n    top: parseInt(elementStyle.getPropertyValue('padding-top')),\\n    bottom: parseInt(elementStyle.getPropertyValue('padding-bottom')),\\n    right: parseInt(elementStyle.getPropertyValue('padding-right')),\\n    left: parseInt(elementStyle.getPropertyValue('padding-left'))\\n  };\\n  const elementPaddingVer = elementPadding.top + elementPadding.bottom;\\n  const elementPaddingHor = elementPadding.right + elementPadding.left;\\n  const availableHeight = parentElementHeight - elementPaddingVer;\\n  const availableWidth = parentElementWidth - elementPaddingHor - (<any>term).viewport.scrollBarWidth;\\n  const geometry = {\\n    cols: Math.floor(availableWidth / (<any>term).renderer.dimensions.actualCellWidth),\\n    rows: Math.floor(availableHeight / (<any>term).renderer.dimensions.actualCellHeight)\\n  };\\n  return geometry;\\n}\\n\\nexport function fit(term: Terminal): void {\\n  const geometry = proposeGeometry(term);\\n  if (geometry) {\\n    // Force a full render\\n    if (term.rows !== geometry.rows || term.cols !== geometry.cols) {\\n      (<any>term).renderer.clear();\\n      term.resize(geometry.cols, geometry.rows);\\n    }\\n  }\\n}\\n\\nexport function apply(terminalConstructor: typeof Terminal): void {\\n  (<any>terminalConstructor.prototype).proposeGeometry = function (): IGeometry {\\n    return proposeGeometry(this);\\n  };\\n\\n  (<any>terminalConstructor.prototype).fit = function (): void {\\n    fit(this);\\n  };\\n}\\n\",null],\"names\":[],\"mappings\":\"ACAA;;;ADwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AARA;;;\"}"),
	}
	filea := &embedded.EmbeddedFile{
		Filename:    "addons/fullscreen/fullscreen.css",
		FileModTime: time.Unix(1531907887, 0),
		Content:     string(".xterm.fullscreen {\r\n    position: fixed;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    width: auto;\r\n    height: auto;\r\n    z-index: 255;\r\n}\r\n"),
	}
	fileb := &embedded.EmbeddedFile{
		Filename:    "addons/fullscreen/fullscreen.js",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.fullscreen = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction toggleFullScreen(term, fullscreen) {\r\n    var fn;\r\n    if (typeof fullscreen === 'undefined') {\r\n        fn = (term.element.classList.contains('fullscreen')) ? 'remove' : 'add';\r\n    }\r\n    else if (!fullscreen) {\r\n        fn = 'remove';\r\n    }\r\n    else {\r\n        fn = 'add';\r\n    }\r\n    term.element.classList[fn]('fullscreen');\r\n}\r\nexports.toggleFullScreen = toggleFullScreen;\r\nfunction apply(terminalConstructor) {\r\n    terminalConstructor.prototype.toggleFullScreen = function (fullscreen) {\r\n        toggleFullScreen(this, fullscreen);\r\n    };\r\n}\r\nexports.apply = apply;\r\n\r\n\r\n\r\n},{}]},{},[1])(1)\r\n});\r\n//# sourceMappingURL=fullscreen.js.map\r\n"),
	}
	filec := &embedded.EmbeddedFile{
		Filename:    "addons/fullscreen/fullscreen.js.map",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("{\"version\":3,\"file\":\"fullscreen.js\",\"sources\":[\"../../../src/addons/fullscreen/fullscreen.ts\",\"../../../node_modules/browser-pack/_prelude.js\"],\"sourcesContent\":[\"/**\\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\n/// <reference path=\\\"../../../typings/xterm.d.ts\\\"/>\\n\\nimport { Terminal } from 'xterm';\\n\\n/**\\n * Toggle the given terminal's fullscreen mode.\\n * @param term The terminal to toggle full screen mode\\n * @param fullscreen Toggle fullscreen on (true) or off (false)\\n */\\nexport function toggleFullScreen(term: Terminal, fullscreen: boolean): void {\\n  let fn: string;\\n\\n  if (typeof fullscreen === 'undefined') {\\n    fn = (term.element.classList.contains('fullscreen')) ? 'remove' : 'add';\\n  } else if (!fullscreen) {\\n    fn = 'remove';\\n  } else {\\n    fn = 'add';\\n  }\\n\\n  term.element.classList[fn]('fullscreen');\\n}\\n\\nexport function apply(terminalConstructor: typeof Terminal): void {\\n  (<any>terminalConstructor.prototype).toggleFullScreen = function (fullscreen: boolean): void {\\n    toggleFullScreen(this, fullscreen);\\n  };\\n}\\n\",null],\"names\":[],\"mappings\":\"ACAA;;;ADcA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AAJA;;;\"}"),
	}
	filee := &embedded.EmbeddedFile{
		Filename:    "addons/search/search.js",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.search = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar SearchHelper = (function () {\r\n    function SearchHelper(_terminal) {\r\n        this._terminal = _terminal;\r\n    }\r\n    SearchHelper.prototype.findNext = function (term) {\r\n        if (!term || term.length === 0) {\r\n            return false;\r\n        }\r\n        var result;\r\n        var startRow = this._terminal.buffer.ydisp;\r\n        if (this._terminal.selectionManager.selectionEnd) {\r\n            startRow = this._terminal.selectionManager.selectionEnd[1];\r\n        }\r\n        for (var y = startRow + 1; y < this._terminal.buffer.ybase + this._terminal.rows; y++) {\r\n            result = this._findInLine(term, y);\r\n            if (result) {\r\n                break;\r\n            }\r\n        }\r\n        if (!result) {\r\n            for (var y = 0; y < startRow; y++) {\r\n                result = this._findInLine(term, y);\r\n                if (result) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return this._selectResult(result);\r\n    };\r\n    SearchHelper.prototype.findPrevious = function (term) {\r\n        if (!term || term.length === 0) {\r\n            return false;\r\n        }\r\n        var result;\r\n        var startRow = this._terminal.buffer.ydisp;\r\n        if (this._terminal.selectionManager.selectionStart) {\r\n            startRow = this._terminal.selectionManager.selectionStart[1];\r\n        }\r\n        for (var y = startRow - 1; y >= 0; y--) {\r\n            result = this._findInLine(term, y);\r\n            if (result) {\r\n                break;\r\n            }\r\n        }\r\n        if (!result) {\r\n            for (var y = this._terminal.buffer.ybase + this._terminal.rows - 1; y > startRow; y--) {\r\n                result = this._findInLine(term, y);\r\n                if (result) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return this._selectResult(result);\r\n    };\r\n    SearchHelper.prototype._findInLine = function (term, y) {\r\n        var lowerStringLine = this._terminal.buffer.translateBufferLineToString(y, true).toLowerCase();\r\n        var lowerTerm = term.toLowerCase();\r\n        var searchIndex = lowerStringLine.indexOf(lowerTerm);\r\n        if (searchIndex >= 0) {\r\n            var line = this._terminal.buffer.lines.get(y);\r\n            for (var i = 0; i < searchIndex; i++) {\r\n                var charData = line[i];\r\n                var char = charData[1];\r\n                if (char.length > 1) {\r\n                    searchIndex -= char.length - 1;\r\n                }\r\n                var charWidth = charData[2];\r\n                if (charWidth === 0) {\r\n                    searchIndex++;\r\n                }\r\n            }\r\n            return {\r\n                term: term,\r\n                col: searchIndex,\r\n                row: y\r\n            };\r\n        }\r\n    };\r\n    SearchHelper.prototype._selectResult = function (result) {\r\n        if (!result) {\r\n            return false;\r\n        }\r\n        this._terminal.selectionManager.setSelection(result.col, result.row, result.term.length);\r\n        this._terminal.scrollLines(result.row - this._terminal.buffer.ydisp);\r\n        return true;\r\n    };\r\n    return SearchHelper;\r\n}());\r\nexports.SearchHelper = SearchHelper;\r\n\r\n\r\n\r\n},{}],2:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar SearchHelper_1 = require(\"./SearchHelper\");\r\nfunction findNext(terminal, term) {\r\n    var addonTerminal = terminal;\r\n    if (!addonTerminal.__searchHelper) {\r\n        addonTerminal.__searchHelper = new SearchHelper_1.SearchHelper(addonTerminal);\r\n    }\r\n    return addonTerminal.__searchHelper.findNext(term);\r\n}\r\nexports.findNext = findNext;\r\nfunction findPrevious(terminal, term) {\r\n    var addonTerminal = terminal;\r\n    if (!addonTerminal.__searchHelper) {\r\n        addonTerminal.__searchHelper = new SearchHelper_1.SearchHelper(addonTerminal);\r\n    }\r\n    return addonTerminal.__searchHelper.findPrevious(term);\r\n}\r\nexports.findPrevious = findPrevious;\r\nfunction apply(terminalConstructor) {\r\n    terminalConstructor.prototype.findNext = function (term) {\r\n        return findNext(this, term);\r\n    };\r\n    terminalConstructor.prototype.findPrevious = function (term) {\r\n        return findPrevious(this, term);\r\n    };\r\n}\r\nexports.apply = apply;\r\n\r\n\r\n\r\n},{\"./SearchHelper\":1}]},{},[2])(2)\r\n});\r\n//# sourceMappingURL=search.js.map\r\n"),
	}
	filef := &embedded.EmbeddedFile{
		Filename:    "addons/search/search.js.map",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("{\"version\":3,\"file\":\"search.js\",\"sources\":[\"../../../src/addons/search/search.ts\",\"../../../src/addons/search/SearchHelper.ts\",\"../../../node_modules/browser-pack/_prelude.js\"],\"sourcesContent\":[\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\n/// <reference path=\\\"../../../typings/xterm.d.ts\\\"/>\\n\\nimport { SearchHelper } from './SearchHelper';\\nimport { Terminal } from 'xterm';\\nimport { ISearchAddonTerminal } from './Interfaces';\\n\\n/**\\n * Find the next instance of the term, then scroll to and select it. If it\\n * doesn't exist, do nothing.\\n * @param term Tne search term.\\n * @return Whether a result was found.\\n */\\nexport function findNext(terminal: Terminal, term: string): boolean {\\n  const addonTerminal = <ISearchAddonTerminal>terminal;\\n  if (!addonTerminal.__searchHelper) {\\n    addonTerminal.__searchHelper = new SearchHelper(addonTerminal);\\n  }\\n  return addonTerminal.__searchHelper.findNext(term);\\n}\\n\\n/**\\n * Find the previous instance of the term, then scroll to and select it. If it\\n * doesn't exist, do nothing.\\n * @param term Tne search term.\\n * @return Whether a result was found.\\n */\\nexport function findPrevious(terminal: Terminal, term: string): boolean {\\n  const addonTerminal = <ISearchAddonTerminal>terminal;\\n  if (!addonTerminal.__searchHelper) {\\n    addonTerminal.__searchHelper = new SearchHelper(addonTerminal);\\n  }\\n  return addonTerminal.__searchHelper.findPrevious(term);\\n}\\n\\nexport function apply(terminalConstructor: typeof Terminal): void {\\n  (<any>terminalConstructor.prototype).findNext = function(term: string): boolean {\\n    return findNext(this, term);\\n  };\\n\\n  (<any>terminalConstructor.prototype).findPrevious = function(term: string): boolean {\\n    return findPrevious(this, term);\\n  };\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { ISearchHelper, ISearchAddonTerminal } from './Interfaces';\\n\\ninterface ISearchResult {\\n  term: string;\\n  col: number;\\n  row: number;\\n}\\n\\n/**\\n * A class that knows how to search the terminal and how to display the results.\\n */\\nexport class SearchHelper implements ISearchHelper {\\n  constructor(private _terminal: ISearchAddonTerminal) {\\n    // TODO: Search for multiple instances on 1 line\\n    // TODO: Don't use the actual selection, instead use a \\\"find selection\\\" so multiple instances can be highlighted\\n    // TODO: Highlight other instances in the viewport\\n    // TODO: Support regex, case sensitivity, etc.\\n  }\\n\\n  /**\\n   * Find the next instance of the term, then scroll to and select it. If it\\n   * doesn't exist, do nothing.\\n   * @param term Tne search term.\\n   * @return Whether a result was found.\\n   */\\n  public findNext(term: string): boolean {\\n    if (!term || term.length === 0) {\\n      return false;\\n    }\\n\\n    let result: ISearchResult;\\n\\n    let startRow = this._terminal.buffer.ydisp;\\n    if (this._terminal.selectionManager.selectionEnd) {\\n      // Start from the selection end if there is a selection\\n      startRow = this._terminal.selectionManager.selectionEnd[1];\\n    }\\n\\n    // Search from ydisp + 1 to end\\n    for (let y = startRow + 1; y < this._terminal.buffer.ybase + this._terminal.rows; y++) {\\n      result = this._findInLine(term, y);\\n      if (result) {\\n        break;\\n      }\\n    }\\n\\n    // Search from the top to the current ydisp\\n    if (!result) {\\n      for (let y = 0; y < startRow; y++) {\\n        result = this._findInLine(term, y);\\n        if (result) {\\n          break;\\n        }\\n      }\\n    }\\n\\n    // Set selection and scroll if a result was found\\n    return this._selectResult(result);\\n  }\\n\\n  /**\\n   * Find the previous instance of the term, then scroll to and select it. If it\\n   * doesn't exist, do nothing.\\n   * @param term Tne search term.\\n   * @return Whether a result was found.\\n   */\\n  public findPrevious(term: string): boolean {\\n    if (!term || term.length === 0) {\\n      return false;\\n    }\\n\\n    let result: ISearchResult;\\n\\n    let startRow = this._terminal.buffer.ydisp;\\n    if (this._terminal.selectionManager.selectionStart) {\\n      // Start from the selection end if there is a selection\\n      startRow = this._terminal.selectionManager.selectionStart[1];\\n    }\\n\\n    // Search from ydisp + 1 to end\\n    for (let y = startRow - 1; y >= 0; y--) {\\n      result = this._findInLine(term, y);\\n      if (result) {\\n        break;\\n      }\\n    }\\n\\n    // Search from the top to the current ydisp\\n    if (!result) {\\n      for (let y = this._terminal.buffer.ybase + this._terminal.rows - 1; y > startRow; y--) {\\n        result = this._findInLine(term, y);\\n        if (result) {\\n          break;\\n        }\\n      }\\n    }\\n\\n    // Set selection and scroll if a result was found\\n    return this._selectResult(result);\\n  }\\n\\n  /**\\n   * Searches a line for a search term.\\n   * @param term Tne search term.\\n   * @param y The line to search.\\n   * @return The search result if it was found.\\n   */\\n  private _findInLine(term: string, y: number): ISearchResult {\\n    const lowerStringLine = this._terminal.buffer.translateBufferLineToString(y, true).toLowerCase();\\n    const lowerTerm = term.toLowerCase();\\n    let searchIndex = lowerStringLine.indexOf(lowerTerm);\\n    if (searchIndex >= 0) {\\n      const line = this._terminal.buffer.lines.get(y);\\n      for (let i = 0; i < searchIndex; i++) {\\n        const charData = line[i];\\n        // Adjust the searchIndex to normalize emoji into single chars\\n        const char = charData[1/*CHAR_DATA_CHAR_INDEX*/];\\n        if (char.length > 1) {\\n          searchIndex -= char.length - 1;\\n        }\\n        // Adjust the searchIndex for empty characters following wide unicode\\n        // chars (eg. CJK)\\n        const charWidth = charData[2/*CHAR_DATA_WIDTH_INDEX*/];\\n        if (charWidth === 0) {\\n          searchIndex++;\\n        }\\n      }\\n      return {\\n        term,\\n        col: searchIndex,\\n        row: y\\n      };\\n    }\\n  }\\n\\n  /**\\n   * Selects and scrolls to a result.\\n   * @param result The result to select.\\n   * @return Whethera result was selected.\\n   */\\n  private _selectResult(result: ISearchResult): boolean {\\n    if (!result) {\\n      return false;\\n    }\\n    this._terminal.selectionManager.setSelection(result.col, result.row, result.term.length);\\n    this._terminal.scrollLines(result.row - this._terminal.buffer.ydisp);\\n    return true;\\n  }\\n}\\n\",null],\"names\":[],\"mappings\":\"AEAA;;;ADgBA;AACA;AAAA;AAKA;AAQA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAQA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAzIa;;;;;;;ADTb;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AARA;;;\"}"),
	}
	fileh := &embedded.EmbeddedFile{
		Filename:    "addons/terminado/terminado.js",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.terminado = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction terminadoAttach(term, socket, bidirectional, buffered) {\r\n    var addonTerminal = term;\r\n    bidirectional = (typeof bidirectional === 'undefined') ? true : bidirectional;\r\n    addonTerminal.__socket = socket;\r\n    addonTerminal.__flushBuffer = function () {\r\n        addonTerminal.write(addonTerminal.__attachSocketBuffer);\r\n        addonTerminal.__attachSocketBuffer = null;\r\n    };\r\n    addonTerminal.__pushToBuffer = function (data) {\r\n        if (addonTerminal.__attachSocketBuffer) {\r\n            addonTerminal.__attachSocketBuffer += data;\r\n        }\r\n        else {\r\n            addonTerminal.__attachSocketBuffer = data;\r\n            setTimeout(addonTerminal.__flushBuffer, 10);\r\n        }\r\n    };\r\n    addonTerminal.__getMessage = function (ev) {\r\n        var data = JSON.parse(ev.data);\r\n        if (data[0] === 'stdout') {\r\n            if (buffered) {\r\n                addonTerminal.__pushToBuffer(data[1]);\r\n            }\r\n            else {\r\n                addonTerminal.write(data[1]);\r\n            }\r\n        }\r\n    };\r\n    addonTerminal.__sendData = function (data) {\r\n        socket.send(JSON.stringify(['stdin', data]));\r\n    };\r\n    addonTerminal.__setSize = function (size) {\r\n        socket.send(JSON.stringify(['set_size', size.rows, size.cols]));\r\n    };\r\n    socket.addEventListener('message', addonTerminal.__getMessage);\r\n    if (bidirectional) {\r\n        addonTerminal.on('data', addonTerminal.__sendData);\r\n    }\r\n    addonTerminal.on('resize', addonTerminal.__setSize);\r\n    socket.addEventListener('close', function () { return terminadoDetach(addonTerminal, socket); });\r\n    socket.addEventListener('error', function () { return terminadoDetach(addonTerminal, socket); });\r\n}\r\nexports.terminadoAttach = terminadoAttach;\r\nfunction terminadoDetach(term, socket) {\r\n    var addonTerminal = term;\r\n    addonTerminal.off('data', addonTerminal.__sendData);\r\n    socket = (typeof socket === 'undefined') ? addonTerminal.__socket : socket;\r\n    if (socket) {\r\n        socket.removeEventListener('message', addonTerminal.__getMessage);\r\n    }\r\n    delete addonTerminal.__socket;\r\n}\r\nexports.terminadoDetach = terminadoDetach;\r\nfunction apply(terminalConstructor) {\r\n    terminalConstructor.prototype.terminadoAttach = function (socket, bidirectional, buffered) {\r\n        return terminadoAttach(this, socket, bidirectional, buffered);\r\n    };\r\n    terminalConstructor.prototype.terminadoDetach = function (socket) {\r\n        return terminadoDetach(this, socket);\r\n    };\r\n}\r\nexports.apply = apply;\r\n\r\n\r\n\r\n},{}]},{},[1])(1)\r\n});\r\n//# sourceMappingURL=terminado.js.map\r\n"),
	}
	filei := &embedded.EmbeddedFile{
		Filename:    "addons/terminado/terminado.js.map",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("{\"version\":3,\"file\":\"terminado.js\",\"sources\":[\"../../../src/addons/terminado/terminado.ts\",\"../../../node_modules/browser-pack/_prelude.js\"],\"sourcesContent\":[\"/**\\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\\n * @license MIT\\n *\\n * This module provides methods for attaching a terminal to a terminado\\n * WebSocket stream.\\n */\\n\\n/// <reference path=\\\"../../../typings/xterm.d.ts\\\"/>\\n\\nimport { Terminal } from 'xterm';\\nimport { ITerminadoAddonTerminal } from './Interfaces';\\n\\n/**\\n * Attaches the given terminal to the given socket.\\n *\\n * @param term The terminal to be attached to the given socket.\\n * @param socket The socket to attach the current terminal.\\n * @param bidirectional Whether the terminal should send data to the socket as well.\\n * @param buffered Whether the rendering of incoming data should happen instantly or at a maximum\\n * frequency of 1 rendering per 10ms.\\n */\\nexport function terminadoAttach(term: Terminal, socket: WebSocket, bidirectional: boolean, buffered: boolean): void {\\n  const addonTerminal = <ITerminadoAddonTerminal>term;\\n  bidirectional = (typeof bidirectional === 'undefined') ? true : bidirectional;\\n  addonTerminal.__socket = socket;\\n\\n  addonTerminal.__flushBuffer = () => {\\n    addonTerminal.write(addonTerminal.__attachSocketBuffer);\\n    addonTerminal.__attachSocketBuffer = null;\\n  };\\n\\n  addonTerminal.__pushToBuffer = (data: string) => {\\n    if (addonTerminal.__attachSocketBuffer) {\\n      addonTerminal.__attachSocketBuffer += data;\\n    } else {\\n      addonTerminal.__attachSocketBuffer = data;\\n      setTimeout(addonTerminal.__flushBuffer, 10);\\n    }\\n  };\\n\\n  addonTerminal.__getMessage = (ev: MessageEvent) => {\\n    const data = JSON.parse(ev.data);\\n    if (data[0] === 'stdout') {\\n      if (buffered) {\\n        addonTerminal.__pushToBuffer(data[1]);\\n      } else {\\n        addonTerminal.write(data[1]);\\n      }\\n    }\\n  };\\n\\n  addonTerminal.__sendData = (data: string) => {\\n    socket.send(JSON.stringify(['stdin', data]));\\n  };\\n\\n  addonTerminal.__setSize = (size: {rows: number, cols: number}) => {\\n    socket.send(JSON.stringify(['set_size', size.rows, size.cols]));\\n  };\\n\\n  socket.addEventListener('message', addonTerminal.__getMessage);\\n\\n  if (bidirectional) {\\n    addonTerminal.on('data', addonTerminal.__sendData);\\n  }\\n  addonTerminal.on('resize', addonTerminal.__setSize);\\n\\n  socket.addEventListener('close', () => terminadoDetach(addonTerminal, socket));\\n  socket.addEventListener('error', () => terminadoDetach(addonTerminal, socket));\\n}\\n\\n/**\\n * Detaches the given terminal from the given socket\\n *\\n * @param term The terminal to be detached from the given socket.\\n * @param socket The socket from which to detach the current terminal.\\n */\\nexport function terminadoDetach(term: Terminal, socket: WebSocket): void {\\n  const addonTerminal = <ITerminadoAddonTerminal>term;\\n  addonTerminal.off('data', addonTerminal.__sendData);\\n\\n  socket = (typeof socket === 'undefined') ? addonTerminal.__socket : socket;\\n\\n  if (socket) {\\n    socket.removeEventListener('message', addonTerminal.__getMessage);\\n  }\\n\\n  delete addonTerminal.__socket;\\n}\\n\\nexport function apply(terminalConstructor: typeof Terminal): void {\\n  /**\\n   * Attaches the current terminal to the given socket\\n   *\\n   * @param socket - The socket to attach the current terminal.\\n   * @param bidirectional - Whether the terminal should send data to the socket as well.\\n   * @param buffered - Whether the rendering of incoming data should happen instantly or at a\\n   * maximum frequency of 1 rendering per 10ms.\\n   */\\n  (<any>terminalConstructor.prototype).terminadoAttach = function (socket: WebSocket, bidirectional: boolean, buffered: boolean): void {\\n    return terminadoAttach(this, socket, bidirectional, buffered);\\n  };\\n\\n  /**\\n   * Detaches the current terminal from the given socket.\\n   *\\n   * @param socket The socket from which to detach the current terminal.\\n   */\\n  (<any>terminalConstructor.prototype).terminadoDetach = function (socket: WebSocket): void {\\n    return terminadoDetach(this, socket);\\n  };\\n}\\n\",null],\"names\":[],\"mappings\":\"ACAA;;;ADsBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AA/CA;AAuDA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAXA;AAaA;AASA;AACA;AACA;AAOA;AACA;AACA;AACA;AArBA;;;\"}"),
	}
	filek := &embedded.EmbeddedFile{
		Filename:    "addons/webLinks/webLinks.js",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.webLinks = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar protocolClause = '(https?:\\\\/\\\\/)';\r\nvar domainCharacterSet = '[\\\\da-z\\\\.-]+';\r\nvar negatedDomainCharacterSet = '[^\\\\da-z\\\\.-]+';\r\nvar domainBodyClause = '(' + domainCharacterSet + ')';\r\nvar tldClause = '([a-z\\\\.]{2,6})';\r\nvar ipClause = '((\\\\d{1,3}\\\\.){3}\\\\d{1,3})';\r\nvar localHostClause = '(localhost)';\r\nvar portClause = '(:\\\\d{1,5})';\r\nvar hostClause = '((' + domainBodyClause + '\\\\.' + tldClause + ')|' + ipClause + '|' + localHostClause + ')' + portClause + '?';\r\nvar pathClause = '(\\\\/[\\\\/\\\\w\\\\.\\\\-%~]*)*';\r\nvar queryStringHashFragmentCharacterSet = '[0-9\\\\w\\\\[\\\\]\\\\(\\\\)\\\\/\\\\?\\\\!#@$%&\\'*+,:;~\\\\=\\\\.\\\\-]*';\r\nvar queryStringClause = '(\\\\?' + queryStringHashFragmentCharacterSet + ')?';\r\nvar hashFragmentClause = '(#' + queryStringHashFragmentCharacterSet + ')?';\r\nvar negatedPathCharacterSet = '[^\\\\/\\\\w\\\\.\\\\-%]+';\r\nvar bodyClause = hostClause + pathClause + queryStringClause + hashFragmentClause;\r\nvar start = '(?:^|' + negatedDomainCharacterSet + ')(';\r\nvar end = ')($|' + negatedPathCharacterSet + ')';\r\nvar strictUrlRegex = new RegExp(start + protocolClause + bodyClause + end);\r\nfunction handleLink(event, uri) {\r\n    window.open(uri, '_blank');\r\n}\r\nfunction webLinksInit(term, handler, options) {\r\n    if (handler === void 0) { handler = handleLink; }\r\n    if (options === void 0) { options = {}; }\r\n    options.matchIndex = 1;\r\n    term.registerLinkMatcher(strictUrlRegex, handler, options);\r\n}\r\nexports.webLinksInit = webLinksInit;\r\nfunction apply(terminalConstructor) {\r\n    terminalConstructor.prototype.webLinksInit = function (handler, options) {\r\n        webLinksInit(this, handler, options);\r\n    };\r\n}\r\nexports.apply = apply;\r\n\r\n\r\n\r\n},{}]},{},[1])(1)\r\n});\r\n//# sourceMappingURL=webLinks.js.map\r\n"),
	}
	filel := &embedded.EmbeddedFile{
		Filename:    "addons/webLinks/webLinks.js.map",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("{\"version\":3,\"file\":\"webLinks.js\",\"sources\":[\"../../../src/addons/webLinks/webLinks.ts\",\"../../../node_modules/browser-pack/_prelude.js\"],\"sourcesContent\":[\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\n/// <reference path=\\\"../../../typings/xterm.d.ts\\\"/>\\n\\nimport { Terminal, ILinkMatcherOptions } from 'xterm';\\n\\nconst protocolClause = '(https?:\\\\\\\\/\\\\\\\\/)';\\nconst domainCharacterSet = '[\\\\\\\\da-z\\\\\\\\.-]+';\\nconst negatedDomainCharacterSet = '[^\\\\\\\\da-z\\\\\\\\.-]+';\\nconst domainBodyClause = '(' + domainCharacterSet + ')';\\nconst tldClause = '([a-z\\\\\\\\.]{2,6})';\\nconst ipClause = '((\\\\\\\\d{1,3}\\\\\\\\.){3}\\\\\\\\d{1,3})';\\nconst localHostClause = '(localhost)';\\nconst portClause = '(:\\\\\\\\d{1,5})';\\nconst hostClause = '((' + domainBodyClause + '\\\\\\\\.' + tldClause + ')|' + ipClause + '|' + localHostClause + ')' + portClause + '?';\\nconst pathClause = '(\\\\\\\\/[\\\\\\\\/\\\\\\\\w\\\\\\\\.\\\\\\\\-%~]*)*';\\nconst queryStringHashFragmentCharacterSet = '[0-9\\\\\\\\w\\\\\\\\[\\\\\\\\]\\\\\\\\(\\\\\\\\)\\\\\\\\/\\\\\\\\?\\\\\\\\!#@$%&\\\\'*+,:;~\\\\\\\\=\\\\\\\\.\\\\\\\\-]*';\\nconst queryStringClause = '(\\\\\\\\?' + queryStringHashFragmentCharacterSet + ')?';\\nconst hashFragmentClause = '(#' + queryStringHashFragmentCharacterSet + ')?';\\nconst negatedPathCharacterSet = '[^\\\\\\\\/\\\\\\\\w\\\\\\\\.\\\\\\\\-%]+';\\nconst bodyClause = hostClause + pathClause + queryStringClause + hashFragmentClause;\\nconst start = '(?:^|' + negatedDomainCharacterSet + ')(';\\nconst end = ')($|' + negatedPathCharacterSet + ')';\\nconst strictUrlRegex = new RegExp(start + protocolClause + bodyClause + end);\\n\\nfunction handleLink(event: MouseEvent, uri: string): void {\\n  window.open(uri, '_blank');\\n}\\n\\n/**\\n * Initialize the web links addon, registering the link matcher.\\n * @param term The terminal to use web links within.\\n * @param handler A custom handler to use.\\n * @param options Custom options to use, matchIndex will always be ignored.\\n */\\nexport function webLinksInit(term: Terminal, handler: (event: MouseEvent, uri: string) => void = handleLink, options: ILinkMatcherOptions = {}): void {\\n  options.matchIndex = 1;\\n  term.registerLinkMatcher(strictUrlRegex, handler, options);\\n}\\n\\nexport function apply(terminalConstructor: typeof Terminal): void {\\n  (<any>terminalConstructor.prototype).webLinksInit = function (handler?: (event: MouseEvent, uri: string) => void, options?: ILinkMatcherOptions): void {\\n    webLinksInit(this, handler, options);\\n  };\\n}\\n\",null],\"names\":[],\"mappings\":\"ACAA;;;ADSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;;;\"}"),
	}
	filen := &embedded.EmbeddedFile{
		Filename:    "addons/winptyCompat/winptyCompat.js",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.winptyCompat = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction winptyCompatInit(terminal) {\r\n    var addonTerminal = terminal;\r\n    var isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].indexOf(navigator.platform) >= 0;\r\n    if (!isWindows) {\r\n        return;\r\n    }\r\n    addonTerminal.on('linefeed', function () {\r\n        var line = addonTerminal.buffer.lines.get(addonTerminal.buffer.ybase + addonTerminal.buffer.y - 1);\r\n        var lastChar = line[addonTerminal.cols - 1];\r\n        if (lastChar[3] !== 32) {\r\n            var nextLine = addonTerminal.buffer.lines.get(addonTerminal.buffer.ybase + addonTerminal.buffer.y);\r\n            nextLine.isWrapped = true;\r\n        }\r\n    });\r\n}\r\nexports.winptyCompatInit = winptyCompatInit;\r\nfunction apply(terminalConstructor) {\r\n    terminalConstructor.prototype.winptyCompatInit = function () {\r\n        winptyCompatInit(this);\r\n    };\r\n}\r\nexports.apply = apply;\r\n\r\n\r\n\r\n},{}]},{},[1])(1)\r\n});\r\n//# sourceMappingURL=winptyCompat.js.map\r\n"),
	}
	fileo := &embedded.EmbeddedFile{
		Filename:    "addons/winptyCompat/winptyCompat.js.map",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("{\"version\":3,\"file\":\"winptyCompat.js\",\"sources\":[\"../../../src/addons/winptyCompat/winptyCompat.ts\",\"../../../node_modules/browser-pack/_prelude.js\"],\"sourcesContent\":[\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\n/// <reference path=\\\"../../../typings/xterm.d.ts\\\"/>\\n\\nimport { Terminal } from 'xterm';\\nimport { IWinptyCompatAddonTerminal } from './Interfaces';\\n\\nexport function winptyCompatInit(terminal: Terminal): void {\\n  const addonTerminal = <IWinptyCompatAddonTerminal>terminal;\\n\\n  // Don't do anything when the platform is not Windows\\n  const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].indexOf(navigator.platform) >= 0;\\n  if (!isWindows) {\\n    return;\\n  }\\n\\n  // Winpty does not support wraparound mode which means that lines will never\\n  // be marked as wrapped. This causes issues for things like copying a line\\n  // retaining the wrapped new line characters or if consumers are listening\\n  // in on the data stream.\\n  //\\n  // The workaround for this is to listen to every incoming line feed and mark\\n  // the line as wrapped if the last character in the previous line is not a\\n  // space. This is certainly not without its problems, but generally on\\n  // Windows when text reaches the end of the terminal it's likely going to be\\n  // wrapped.\\n  addonTerminal.on('linefeed', () => {\\n    const line = addonTerminal.buffer.lines.get(addonTerminal.buffer.ybase + addonTerminal.buffer.y - 1);\\n    const lastChar = line[addonTerminal.cols - 1];\\n\\n    if (lastChar[3] !== 32 /* ' ' */) {\\n      const nextLine = addonTerminal.buffer.lines.get(addonTerminal.buffer.ybase + addonTerminal.buffer.y);\\n      (<any>nextLine).isWrapped = true;\\n    }\\n  });\\n}\\n\\nexport function apply(terminalConstructor: typeof Terminal): void {\\n  (<any>terminalConstructor.prototype).winptyCompatInit = function (): void {\\n    winptyCompatInit(this);\\n  };\\n}\\n\",null],\"names\":[],\"mappings\":\"ACAA;;;ADUA;AACA;AAGA;AACA;AACA;AACA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA5BA;AA8BA;AACA;AACA;AACA;AACA;AAJA;;;\"}"),
	}
	fileq := &embedded.EmbeddedFile{
		Filename:    "addons/zmodem/zmodem.js",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.zmodem = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar zmodem;\r\nfunction zmodemAttach(term, ws, opts) {\r\n    if (opts === void 0) { opts = {}; }\r\n    var senderFunc = function (octets) { return ws.send(new Uint8Array(octets)); };\r\n    var zsentry;\r\n    function _shouldWrite() {\r\n        return !!zsentry.get_confirmed_session() || !opts.noTerminalWriteOutsideSession;\r\n    }\r\n    zsentry = new zmodem.Sentry({\r\n        to_terminal: function (octets) {\r\n            if (_shouldWrite()) {\r\n                term.write(String.fromCharCode.apply(String, octets));\r\n            }\r\n        },\r\n        sender: senderFunc,\r\n        on_retract: function () { return term.emit('zmodemRetract'); },\r\n        on_detect: function (detection) { return term.emit('zmodemDetect', detection); }\r\n    });\r\n    function handleWSMessage(evt) {\r\n        if (typeof evt.data === 'string') {\r\n            if (_shouldWrite()) {\r\n                term.write(evt.data);\r\n            }\r\n        }\r\n        else {\r\n            zsentry.consume(evt.data);\r\n        }\r\n    }\r\n    ws.binaryType = 'arraybuffer';\r\n    ws.addEventListener('message', handleWSMessage);\r\n}\r\nexports.zmodemAttach = zmodemAttach;\r\nfunction apply(terminalConstructor) {\r\n    zmodem = (typeof window === 'object') ? window.ZModem : { Browser: null };\r\n    terminalConstructor.prototype.zmodemAttach = zmodemAttach.bind(this, this);\r\n    terminalConstructor.prototype.zmodemBrowser = zmodem.Browser;\r\n}\r\nexports.apply = apply;\r\n\r\n\r\n\r\n},{}]},{},[1])(1)\r\n});\r\n//# sourceMappingURL=zmodem.js.map\r\n"),
	}
	filer := &embedded.EmbeddedFile{
		Filename:    "addons/zmodem/zmodem.js.map",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("{\"version\":3,\"file\":\"zmodem.js\",\"sources\":[\"../../../src/addons/zmodem/zmodem.ts\",\"../../../node_modules/browser-pack/_prelude.js\"],\"sourcesContent\":[\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\n/// <reference path=\\\"../../../typings/xterm.d.ts\\\"/>\\n\\nimport { Terminal } from 'xterm';\\n\\n/**\\n *\\n * Allow xterm.js to handle ZMODEM uploads and downloads.\\n *\\n * This addon is a wrapper around zmodem.js. It adds the following to the\\n *  Terminal class:\\n *\\n * - function `zmodemAttach(<WebSocket>, <Object>)` - creates a Zmodem.Sentry\\n *      on the passed WebSocket object. The Object passed is optional and\\n *      can contain:\\n *          - noTerminalWriteOutsideSession: Suppress writes from the Sentry\\n *            object to the Terminal while there is no active Session. This\\n *            is necessary for compatibility with, for example, the\\n *            `attach.js` addon.\\n *\\n * - event `zmodemDetect` - fired on Zmodem.Sentry’s `on_detect` callback.\\n *      Passes the zmodem.js Detection object.\\n *\\n * - event `zmodemRetract` - fired on Zmodem.Sentry’s `on_retract` callback.\\n *\\n * You’ll need to provide logic to handle uploads and downloads.\\n * See zmodem.js’s documentation for more details.\\n *\\n * **IMPORTANT:** After you confirm() a zmodem.js Detection, if you have\\n *  used the `attach` or `terminado` addons, you’ll need to suspend their\\n *  operation for the duration of the ZMODEM session. (The demo does this\\n *  via `detach()` and a re-`attach()`.)\\n */\\n\\nlet zmodem;\\n\\nexport interface IZModemOptions {\\n  noTerminalWriteOutsideSession?: boolean;\\n}\\n\\nexport function zmodemAttach(term: Terminal, ws: WebSocket, opts: IZModemOptions = {}): void {\\n  const senderFunc = (octets: ArrayLike<number>) => ws.send(new Uint8Array(octets));\\n\\n  let zsentry;\\n\\n  function _shouldWrite(): boolean {\\n    return !!zsentry.get_confirmed_session() || !opts.noTerminalWriteOutsideSession;\\n  }\\n\\n  zsentry = new zmodem.Sentry({\\n    to_terminal: (octets: ArrayLike<number>) => {\\n      if (_shouldWrite()) {\\n        term.write(\\n          String.fromCharCode.apply(String, octets)\\n        );\\n      }\\n    },\\n    sender: senderFunc,\\n    on_retract: () => (<any>term).emit('zmodemRetract'),\\n    on_detect: (detection: any) => (<any>term).emit('zmodemDetect', detection)\\n  });\\n\\n  function handleWSMessage(evt: MessageEvent): void {\\n\\n    // In testing with xterm.js’s demo the first message was\\n    // always text even if the rest were binary. While that\\n    // may be specific to xterm.js’s demo, ultimately we\\n    // should reject anything that isn’t binary.\\n    if (typeof evt.data === 'string') {\\n      if (_shouldWrite()) {\\n        term.write(evt.data);\\n      }\\n    }\\n    else {\\n      zsentry.consume(evt.data);\\n    }\\n  }\\n\\n  ws.binaryType = 'arraybuffer';\\n  ws.addEventListener('message', handleWSMessage);\\n}\\n\\nexport function apply(terminalConstructor: typeof Terminal): void {\\n  zmodem = (typeof window === 'object') ? (<any>window).ZModem : {Browser: null};  // Nullify browser for tests\\n\\n  (<any>terminalConstructor.prototype).zmodemAttach = zmodemAttach.bind(this, this);\\n  (<any>terminalConstructor.prototype).zmodemBrowser = zmodem.Browser;\\n}\\n\",null],\"names\":[],\"mappings\":\"ACAA;;;ADsCA;AAMA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAxCA;AA0CA;AACA;AAEA;AACA;AACA;AALA;;;\"}"),
	}
	files := &embedded.EmbeddedFile{
		Filename:    "base64.js",
		FileModTime: time.Unix(1531907887, 0),
		Content:     string("var keyStr = \"ABCDEFGHIJKLMNOP\" +\r\n               \"QRSTUVWXYZabcdef\" +\r\n               \"ghijklmnopqrstuv\" +\r\n               \"wxyz0123456789+/\" +\r\n               \"=\";\r\n\r\n  function encode64(input) {\r\n     input = escape(input);\r\n     var output = \"\";\r\n     var chr1, chr2, chr3 = \"\";\r\n     var enc1, enc2, enc3, enc4 = \"\";\r\n     var i = 0;\r\n\r\n     do {\r\n        chr1 = input.charCodeAt(i++);\r\n        chr2 = input.charCodeAt(i++);\r\n        chr3 = input.charCodeAt(i++);\r\n\r\n        enc1 = chr1 >> 2;\r\n        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n        enc4 = chr3 & 63;\r\n\r\n        if (isNaN(chr2)) {\r\n           enc3 = enc4 = 64;\r\n        } else if (isNaN(chr3)) {\r\n           enc4 = 64;\r\n        }\r\n\r\n        output = output +\r\n           keyStr.charAt(enc1) +\r\n           keyStr.charAt(enc2) +\r\n           keyStr.charAt(enc3) +\r\n           keyStr.charAt(enc4);\r\n        chr1 = chr2 = chr3 = \"\";\r\n        enc1 = enc2 = enc3 = enc4 = \"\";\r\n     } while (i < input.length);\r\n\r\n     return output;\r\n  }\r\n\r\n  function decode64(input) {\r\n     var output = \"\";\r\n     var chr1, chr2, chr3 = \"\";\r\n     var enc1, enc2, enc3, enc4 = \"\";\r\n     var i = 0;\r\n\r\n     // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\r\n     var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\r\n     if (base64test.exec(input)) {\r\n        console.log(\"There were invalid base64 characters in the input text.\\n\" +\r\n              \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\\n\" +\r\n              \"Expect errors in decoding.\");\r\n     }\r\n     input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\r\n\r\n     do {\r\n        enc1 = keyStr.indexOf(input.charAt(i++));\r\n        enc2 = keyStr.indexOf(input.charAt(i++));\r\n        enc3 = keyStr.indexOf(input.charAt(i++));\r\n        enc4 = keyStr.indexOf(input.charAt(i++));\r\n\r\n        chr1 = (enc1 << 2) | (enc2 >> 4);\r\n        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n        chr3 = ((enc3 & 3) << 6) | enc4;\r\n\r\n        output = output + String.fromCharCode(chr1);\r\n\r\n        if (enc3 != 64) {\r\n           output = output + String.fromCharCode(chr2);\r\n        }\r\n        if (enc4 != 64) {\r\n           output = output + String.fromCharCode(chr3);\r\n        }\r\n\r\n        chr1 = chr2 = chr3 = \"\";\r\n        enc1 = enc2 = enc3 = enc4 = \"\";\r\n\r\n     } while (i < input.length);\r\n\r\n     return unescape(output);\r\n  }\r\n"),
	}
	filet := &embedded.EmbeddedFile{
		Filename:    "favicon.ico",
		FileModTime: time.Unix(1531907887, 0),
		Content:     string("\x00\x00\x01\x00\x01\x00\x10\x10\x00\x00\x01\x00 \x00h\x04\x00\x00\x16\x00\x00\x00(\x00\x00\x00\x10\x00\x00\x00 \x00\x00\x00\x01\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9c\xa5\xa2\x14\x98\xa0\x9d\x9a\x92\x9a\x97\xf6\x8d\x95\x92\xfc\x87\x8f\x8c\xfc\x82\x8a\x87\xfc~\x85\x82\xfcy\x80}\xfct|x\xfcpxt\xfckso\xfcfnj\xfc`hd\xfc[b_\xf5W^Z\x97QXT\x11\x9e\xa6\xa3\x9a\xb4\xb9\xb7\xfb\xcc\xce\xcd\xff\xbe\xc1\xc0\xff\xae\xb1\xb0\xff\x9d\xa1\xa0\xff\x95\x99\x98\xff\x90\x95\x93\xff\x8c\x91\x8f\xff\x87\x8c\x8b\xff\x82\x87\x86\xff~\x83\x81\xffy\u007f}\xffszw\xff`fc\xf9RYU\x90\x9d\xa6\xa3\xf6\xd6\xd8\xd7\xff#$#\xff\x02\x03\x02\xff\x01\x02\x01\xff\x01\x02\x01\xff\x01\x02\x01\xff\x01\x02\x01\xff\x01\x02\x01\xff\x01\x02\x01\xff\x01\x02\x01\xff\x01\x02\x01\xff\x01\x02\x01\xff\x12\x14\x13\xffryv\xffRYU\U000dc962\xfc\xd7\xd8\xd7\xff\x06\x06\x06\xff\x11\x1f\x18\xff\x11\x1f\x18\xff\x11\x1f\x18\xff\x11\x1f\x18\xff\x11\x1f\x18\xff\x11\x1f\x18\xff\x11\x1f\x18\xff\x11 \x18\xff\x11 \x19\xff\x11 \x19\xff\x00\x00\x00\xffz\x80~\xffQXT\xff\x9c\xa5\xa2\xfc\xd7\xd8\xd7\xff\x06\a\x06\xff\x1a1&\xff\x1a2'\xff\x1b2'\xff\x1b2'\xff\x1b3(\xff\x1b3(\xff\x1b4(\xff\x1c4)\xff\x1c4)\xff\x1c5)\xff\x00\x00\x00\xff}\x83\x81\xffQXT\xff\x9c\xa5\xa2\xfc\xd7\xd8\xd7\xff\x06\a\a\xff\x1d3)\xff\x1a1'\xff\x190'\xff\x191'\xff\xf1\xf3\xf2\xff\xf1\xf3\xf2\xff\xf1\xf3\xf2\xff\xea\xed\xec\xff\x1a2(\xff\x1a2(\xff\x00\x00\x00\xff\x81\x86\x84\xffQXT\xff\x9c\xa5\xa2\xfc\xd7\xd8\xd7\xff\x06\a\a\xff:ZL\xff\xc8\xd1\xce\xffd}s\xff'J;\xff&J;\xff&J;\xff&J;\xff'K<\xff'K<\xff'L<\xff\x00\x00\x00\xff\x83\x89\x87\xffQXT\xff\x9c\xa5\xa2\xfc\xd7\xd8\xd7\xff\x06\b\a\xff=VL\xffUja\xff\xcb\xd3\xcf\xff\xcd\xd6\xd3\xff%E7\xff#C6\xff#D6\xff#D6\xff#E6\xff#E7\xff\x00\x00\x00\xff\x87\x8c\x8a\xffQXT\xff\x9c\xa5\xa2\xfc\xd7\xd8\xd7\xff\b\t\t\xff_\x82s\xff\x8a\xa3\x99\xff\xdb\xe3\xe0\xff\xc6\xd2\xcd\xffPxi\xff7eS\xff2aN\xff2bO\xff2bO\xff2cO\xff\x00\x00\x00\xff\x8a\x8f\x8d\xffQXT\xff\x9c\xa5\xa2\xfc\xd7\xd8\xd7\xff\t\v\n\xffYuj\xff\xd4\xde\xd9\xffl\x84z\xffRqe\xffQqd\xffMna\xff6^N\xff+VF\xff+VF\xff,WF\xff\x00\x00\x00\xff\x8d\x92\x91\xffQXT\xff\x9c\xa5\xa2\xfc\xd7\xd8\xd7\xff\n\f\v\xff\x81\xa6\x97\xff\u007f\xa4\x95\xff}\xa2\x94\xffy\xa2\x92\xffv\xa0\x90\xfft\x9f\x8e\xffr\x9d\x8c\xffi\x98\x85\xffT\x89u\xffA|e\xff\x00\x00\x00\xff\x90\x95\x93\xffQXT\xff\x9c\xa5\xa2\xfc\xd7\xd8\xd7\xff\f\x0e\r\xfft\x90\x84\xffq\x90\x84\xffp\x8e\x82\xffm\x8d\x80\xffk\x8c\u007f\xffi\x8b~\xffg\x89|\xffe\x88{\xffd\x87y\xff`\x85v\xff\x00\x00\x00\xff\x93\x98\x96\xffQXT\xff\x9c\xa5\xa2\xfc\xd7\xd8\xd7\xff\r\x10\x0f\xff\x9b\xbf\xb1\xff\x98\xbe\xaf\xff\x97\xbd\xae\xff\x94\xbc\xac\xff\x92\xba\xaa\xff\x90\xb9\xa9\xff\x8e\xb8\xa8\xff\x8d\xb6\xa5\xff\x8a\xb5\xa4\xff\x87\xb3\xa2\xff\x00\x00\x00\xff\x97\x9b\x9a\xffQXT\xff\x9d\xa6\xa3\xf4\xd5\xd7\xd6\xff364\xff\a\b\b\xff\a\b\b\xff\a\b\b\xff\a\b\b\xff\a\b\b\xff\a\b\b\xff\a\b\b\xff\a\b\b\xff\x06\a\a\xff\x06\a\a\xff-1/\xff\x96\x99\x98\xffRYU𝦣\x92\xb1\xb6\xb4\xfa\xd5\xd7\xd7\xff\xdd\xde\xdd\xff\xdc\xde\xdd\xff\xdc\xdd\xdd\xff\xdc\xdd\xdd\xff\xdc\xdd\xdd\xff\xdc\xdd\xdd\xff\xdc\xdd\xdd\xff\xdc\xdd\xdd\xff\xd9\xdb\xdb\xff\xcb\xcd\xcc\xff\xb1\xb4\xb2\xffrwt\xf9RYU\x88\x9c\xa5\xa2\x0e\x98\xa0\x9d\x87\x94\x9c\x99\ue355\x92\xfb\x88\x90\x8d\xfb\x83\x8b\x88\xfb~\x86\x83\xfbz\x81~\xfbu}y\xfbpxt\xfbkso\xfbfnj\xfbaie\xfb^eb\xecW^Z\x83QXT\f\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00"),
	}
	fileu := &embedded.EmbeddedFile{
		Filename:    "main.js",
		FileModTime: time.Unix(1532486863, 0),
		Content:     string("var term,\r\n    socket\r\n\r\nvar terminalContainer = document.getElementById('terminal-container'),\r\n    actionElements = {\r\n      findText: document.getElementById('find-text'),\r\n      findNext: document.getElementById('find-next'),\r\n      findPrevious: document.getElementById('find-previous'),\r\n      toggleOptions: document.getElementById('toggle-options'),\r\n    },\r\n    loginElements = {\r\n      user: document.getElementById('userName'),\r\n      password: document.getElementById('password'),\r\n      login: document.getElementById('ssh-login'),\r\n    },\r\n    optionElements = {\r\n      cursorBlink: document.getElementById('option-cursor-blink'),\r\n      cursorStyle: document.getElementById('option-cursor-style'),\r\n      scrollback: document.getElementById('option-scrollback'),\r\n      tabstopwidth: document.getElementById('option-tabstopwidth'),\r\n      bellStyle: document.getElementById('option-bell-style')\r\n    },\r\n    colsElement = document.getElementById('cols'),\r\n    rowsElement = document.getElementById('rows');\r\n\r\n\r\nvar urlPrefix = getQueryStringByName(\"url_prefix\")\r\nvar protocol = getQueryStringByName(\"protocol\")\r\nvar hostname = getQueryStringByName(\"hostname\")\r\nvar file = getQueryStringByName(\"file\")\r\nvar port = getQueryStringByName(\"port\")\r\nvar cmd = getQueryStringByName(\"cmd\")\r\nvar is_debug = getQueryStringByName(\"debug\")\r\nvar user = getQueryStringByName(\"user\")\r\nvar password = getQueryStringByName(\"password\")\r\n\r\n//根据QueryString参数名称获取值\r\nfunction getQueryStringByName(name) {\r\n  var result = location.search.match(new RegExp(\"[\\?\\&]\" + name + \"=([^\\&]+)\", \"i\"));\r\n  if (result == null || result.length < 1) {\r\n      return \"\";\r\n  }\r\n  return result[1];\r\n}\r\n\r\nfunction startsWith(s, prefix) {\r\n  return s.indexOf(prefix) == 0;\r\n}\r\n\r\nfunction changeClassList(ele, add, del) {\r\n    var klsList = ele.classList;\r\n    klsList.add(add);\r\n    klsList.remove(del);\r\n}\r\n\r\nfunction toggleLogin() {\r\n    var loginEl = document.getElementById(\"login\");\r\n    var optionsEl = document.getElementById(\"options\");\r\n\r\n    changeClassList(optionsEl, \"hide\", \"active\")\r\n    \r\n    var klsList = loginEl.classList;\r\n    if (klsList.contains(\"hide\")) {\r\n      changeClassList(loginEl, \"active\", \"hide\")\r\n    } else {\r\n      changeClassList(loginEl, \"hide\", \"active\")\r\n    }\r\n}\r\n\r\nfunction toggleLogin() {\r\n    var loginEl = document.getElementById(\"login\");\r\n    var optionsEl = document.getElementById(\"options\");\r\n\r\n    changeClassList(optionsEl, \"hide\", \"active\")\r\n    \r\n    var klsList = loginEl.classList;\r\n    if (klsList.contains(\"hide\")) {\r\n      changeClassList(loginEl, \"active\", \"hide\")\r\n    } else {\r\n      changeClassList(loginEl, \"hide\", \"active\")\r\n    }\r\n}\r\n\r\n\r\nfunction toggleOptions() {\r\n    var loginEl = document.getElementById(\"login\");\r\n    var optionsEl = document.getElementById(\"options\");\r\n\r\n    changeClassList(loginEl, \"hide\", \"active\")\r\n\r\n    var klsList = optionsEl.classList;\r\n    if (klsList.contains(\"hide\")) {\r\n      changeClassList(optionsEl, \"active\", \"hide\")\r\n    } else {\r\n      changeClassList(optionsEl, \"hide\", \"active\")\r\n    }\r\n}\r\n\r\nactionElements.findNext.addEventListener('click', function() {\r\n    term.findNext(actionElements.findText.value);\r\n});\r\nactionElements.findPrevious.addEventListener('click', function() {\r\n    term.findPrevious(actionElements.findText.value);\r\n});\r\nactionElements.toggleOptions.addEventListener('click',  function() {\r\n  toggleOptions();\r\n});\r\nloginElements.login.addEventListener('click', function() {\r\n    user = loginElements.user.value;\r\n    password = loginElements.password.value;\r\n\r\n    toggleLogin();\r\n    connect();\r\n});\r\n\r\nfunction setTerminalSize() {\r\n  var cols = parseInt(colsElement.value, 10);\r\n  var rows = parseInt(rowsElement.value, 10);\r\n  var viewportElement = document.querySelector('.xterm-viewport');\r\n  var scrollBarWidth = viewportElement.offsetWidth - viewportElement.clientWidth;\r\n  var width = (cols * term.charMeasure.width + 20 /*room for scrollbar*/).toString() + 'px';\r\n  var height = (rows * term.charMeasure.height).toString() + 'px';\r\n\r\n  terminalContainer.style.width = width;\r\n  terminalContainer.style.height = height;\r\n  term.resize(cols, rows);\r\n}\r\n\r\ncolsElement.addEventListener('change', setTerminalSize);\r\nrowsElement.addEventListener('change', setTerminalSize);\r\n\r\n\r\noptionElements.cursorBlink.addEventListener('change', function () {\r\n  term.setOption('cursorBlink', optionElements.cursorBlink.checked);\r\n});\r\noptionElements.cursorStyle.addEventListener('change', function () {\r\n  term.setOption('cursorStyle', optionElements.cursorStyle.value);\r\n});\r\noptionElements.bellStyle.addEventListener('change', function () {\r\n  term.setOption('bellStyle', optionElements.bellStyle.value);\r\n});\r\noptionElements.scrollback.addEventListener('change', function () {\r\n  term.setOption('scrollback', parseInt(optionElements.scrollback.value, 10));\r\n});\r\noptionElements.tabstopwidth.addEventListener('change', function () {\r\n  term.setOption('tabStopWidth', parseInt(optionElements.tabstopwidth.value, 10));\r\n});\r\n\r\nfunction connect() {\r\n    if(protocol == \"ssh\") {\r\n      if (undefined == password || null == password || \"\" == password) {\r\n        toggleLogin()\r\n        return\r\n      }\r\n    }\r\n\r\n    var target_url = \"ws://\" + document.location.host + urlPrefix + \"/\" + protocol + \"?hostname=\" + hostname + \"&port=\" + port + \"&user=\" + user + \"&password=\" + password + \"&debug=\" + is_debug\r\n    if (\"replay\" == protocol) {\r\n        target_url = \"ws://\" + document.location.host + urlPrefix + \"/\" + protocol + \"?file=\" + file + \"&user=\" + user + \"&password=\" + password\r\n    } else if (\"ssh_exec\" == protocol) {\r\n        target_url = \"ws://\" + document.location.host + urlPrefix + \"/\" + protocol + \"?dump_file=\" + file + \"&hostname=\" + hostname + \"&port=\" + port + \"&user=\" + user + \"&password=\" + password + \"&cmd=\" + cmd + \"&debug=\" + is_debug\r\n    }\r\n\r\n    createTerminal(target_url);\r\n}\r\n\r\nfunction createTerminal(targetUrl) {\r\n  // Clean terminal\r\n  while (terminalContainer.children.length) {\r\n    terminalContainer.removeChild(terminalContainer.children[0]);\r\n  }\r\n  term = new Terminal({\r\n    cursorBlink: optionElements.cursorBlink.checked,\r\n    scrollback: parseInt(optionElements.scrollback.value, 10),\r\n    tabStopWidth: parseInt(optionElements.tabstopwidth.value, 10)\r\n  });\r\n  term.on('resize', function (size) {\r\n    //if (!pid) {\r\n    //  return;\r\n    //}\r\n    //var cols = size.cols,\r\n    //    rows = size.rows,\r\n    //    url = '/terminals/' + pid + '/size?cols=' + cols + '&rows=' + rows;\r\n\r\n    //fetch(url, {method: 'POST'});\r\n  });\r\n\r\n  term.open(terminalContainer);\r\n  term.fit();\r\n\r\n  // fit is called within a setTimeout, cols and rows need this.\r\n  setTimeout(function () {\r\n    colsElement.value = term.cols;\r\n    rowsElement.value = term.rows;\r\n\r\n    // Set terminal size again to set the specific dimensions on the demo\r\n    setTerminalSize();\r\n\r\n    socket = new WebSocket(targetUrl + '&columns=' + term.cols + '&rows=' + term.rows);\r\n    socket.onopen = function() {\r\n      term.attach(socket);\r\n      term._initialized = true;\r\n    };\r\n    socket.onclose = function() {\r\n      //term.destroy();\r\n    };\r\n    socket.onerror = function() {\r\n      alert(\"连接出错！\");\r\n    };\r\n  }, 0);\r\n}\r\n\r\nwindow.addEventListener('load', function () {\r\n    if (undefined == protocol || null == protocol || \"\" == protocol) {\r\n        protocol = \"ssh\"\r\n        if (undefined == port || null == port || \"\" == port) {\r\n            port = \"22\"\r\n        }\r\n    } else if (\"telnet\" == protocol) {\r\n        if (undefined == port || null == port || \"\" == port) {\r\n            port = \"23\"\r\n        }\r\n    } else if (\"ssh\" == protocol) {\r\n        if (undefined == port || null == port || \"\" == port) {\r\n            port = \"22\"\r\n        }\r\n    }\r\n\r\n    if (\"replay\" == protocol) {\r\n        if (undefined == file || null == file || \"\" == file) {\r\n            alert(\"file is empty.\")\r\n            return\r\n        }\r\n    } else {\r\n        if (undefined == hostname || null == hostname || \"\" == hostname) {\r\n            alert(\"hostname is empty.\")\r\n            return\r\n        }\r\n    }\r\n\r\n    if(undefined != urlPrefix && null != urlPrefix && \"\" != urlPrefix) {\r\n      if (urlPrefix[urlPrefix.length-1] == \"/\") {\r\n        urlPrefix = urlPrefix.substr(0, urlPrefix.length-1)\r\n      }\r\n    }\r\n\r\n    if(undefined != urlPrefix && null != urlPrefix && \"\" != urlPrefix) {\r\n      if (urlPrefix.indexOf(\"/\") != 0) {\r\n        urlPrefix = \"/\" + urlPrefix\r\n      }\r\n    }\r\n\r\n    connect()\r\n}, false);"),
	}
	filev := &embedded.EmbeddedFile{
		Filename:    "terminal.html",
		FileModTime: time.Unix(1532487064, 0),
		Content:     string("<!doctype html>\r\n<html>\r\n<head>\r\n    <meta name=\"author\" content=\"runner.mei@gmail.com\"/>\r\n    <title>Simple TTY</title>\r\n    <link rel=\"shortcut icon\" href=\"/static/favicon.ico\">\r\n    <style>\r\n        body {\r\n            margin-top: 0;\r\n            font-family: helvetica, sans-serif, arial;\r\n            font-size: 14px;\r\n            color: #111;\r\n        }\r\n\r\n        h1 {\r\n            text-align: center;\r\n        }\r\n\r\n        #terminal-container {\r\n            width: 800px;\r\n            height: 450px;\r\n            margin: 0 auto;\r\n            padding: 2px;\r\n        }\r\n\r\n        #options, #login {\r\n            width: 300px;\r\n            /*-webkit-transition: height .5s;*/\r\n            /*-moz-transition: height .5s;*/\r\n            /*-o-transition: height .5s;*/\r\n        }\r\n\r\n        #options.active {\r\n            margin: 0;\r\n            height: 350px;\r\n        }\r\n\r\n        #login.active {\r\n            margin: 0;\r\n            height: 200px;\r\n        }\r\n\r\n        .hide {\r\n            display: none;\r\n        }\r\n\r\n    </style>\r\n\r\n    <link rel=\"stylesheet\" href=\"./xterm.css\"/>\r\n    <link rel=\"stylesheet\" href=\"./addons/fullscreen/fullscreen.css\"/>\r\n    <script src=\"./xterm.js\"></script>\r\n    <script src=\"./addons/attach/attach.js\"></script>\r\n    <!-- <script src=\"./zmodem.js\"></script>\r\n    <script src=\"./addons/zmodem/zmodem.js\" ></script> -->\r\n    <script src=\"./addons/fit/fit.js\"></script>\r\n    <script src=\"./addons/fullscreen/fullscreen.js\"></script>\r\n    <script src=\"./addons/search/search.js\"></script>\r\n</head>\r\n<body>\r\n<div style=\"overflow:hidden\">\r\n    <div style=\"float:right;\">\r\n        <p style=\"margin: 3px;height: 25px;line-height: 20px\">\r\n            <label><input id=\"find-text\"/></label>\r\n            <button id=\"find-next\">查找</button>\r\n            <button id=\"find-previous\">向前</button>\r\n            <button id=\"toggle-options\">选项</button>\r\n            <button onclick=\"toggleLogin()\">登录</button>\r\n        </p>\r\n        <div id=\"login\" class=\"hide\">\r\n            <h2 style=\"margin-top:0\">请输入用户名和密码</h2>\r\n            <p>\r\n                <label>用户名 <input type=\"text\" id=\"userName\"> </label>\r\n            </p>\r\n            <p>\r\n                <label>密码 <input type=\"password\" id=\"password\"></label>\r\n            </p>\r\n            <button id=\"ssh-login\">确认</button>\r\n        </div>\r\n        <div id=\"options\" class=\"hide\">\r\n            <h2 style=\"margin-top:0\">选项</h2>\r\n            <p>\r\n                <label><input type=\"checkbox\" id=\"option-cursor-blink\"> 光标闪烁</label>\r\n            </p>\r\n            <p>\r\n                <label>\r\n                    光标样式\r\n                    <select id=\"option-cursor-style\">\r\n                        <option value=\"block\">block</option>\r\n                        <option value=\"underline\">underline</option>\r\n                        <option value=\"bar\">bar</option>\r\n                    </select>\r\n                </label>\r\n            </p>\r\n            <p>\r\n                <label>\r\n                    铃声(试验性功能)\r\n                    <select id=\"option-bell-style\">\r\n                        <option value=\"\">none</option>\r\n                        <option value=\"sound\">sound</option>\r\n                        <option value=\"visual\">visual</option>\r\n                        <option value=\"both\">both</option>\r\n                    </select>\r\n                </label>\r\n            </p>\r\n            <p>\r\n                <label>屏幕缓冲区 <input type=\"number\" id=\"option-scrollback\" value=\"1000\"/></label>\r\n            </p>\r\n            <p>\r\n                <label>Tab 字符宽度 <input type=\"number\" id=\"option-tabstopwidth\" value=\"8\"/></label>\r\n            </p>\r\n            <div>\r\n                <h3>大小</h3>\r\n                <p>\r\n                    <label for=\"cols\">列</label>\r\n                    <input type=\"number\" id=\"cols\" value=\"80\"/>\r\n                </p>\r\n                <p>\r\n                    <label for=\"rows\">行</label>\r\n                    <input type=\"number\" id=\"rows\" value=\"32\"/>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div id=\"terminal-container\"></div>\r\n<div id=\"zmodem_controls\">\r\n    <form id=\"zm_start\" style=\"display: none\" action=\"javascript:void(0)\">\r\n        ZMODEM detected: Start ZMODEM session?\r\n        <label><input id=\"zmstart_yes\" name=\"zmstart\" type=radio checked value=\"1\"> Yes</label>\r\n        &nbsp;\r\n        <label><input name=\"zmstart\" type=radio value=\"\"> No</label>\r\n        <button type=\"submit\">Submit</button>\r\n    </form>\r\n\r\n    <form id=\"zm_offer\" style=\"display: none\" action=\"javascript:void(0)\">\r\n        <p>ZMODEM File offered!</p>\r\n\r\n        <label><input id=\"zmaccept_yes\" name=\"zmaccept\" type=radio checked value=\"1\"> Accept</label>\r\n        &nbsp;\r\n        <label><input name=\"zmaccept\" type=radio value=\"\"> Skip</label>\r\n        <button type=\"submit\">Submit</button>\r\n    </form>\r\n\r\n    <div id=\"zm_file\" style=\"display: none\">\r\n        <div>Name: <span id=\"name\"></span></div>\r\n        <div>Size: <span id=\"size\"></span></div>\r\n        <div>Last modified: <span id=\"mtime\"></span></div>\r\n        <div>Mode: <span id=\"mode\"></span></div>\r\n        <br>\r\n        <div>Conversion: <span id=\"zfile_conversion\"></span></div>\r\n        <div>Management: <span id=\"zfile_management\"></span></div>\r\n        <div>Transport: <span id=\"zfile_transport\"></span></div>\r\n        <div>Sparse? <span id=\"zfile_sparse\"></span></div>\r\n        <br>\r\n        <div>Files remaining in batch: <span id=\"files_remaining\"></span></div>\r\n        <div>Bytes remaining in batch: <span id=\"bytes_remaining\"></span></div>\r\n    </div>\r\n\r\n    <form id=\"zm_progress\" style=\"display: none\" action=\"javascript:void(0)\">\r\n        <div><span id=\"percent_received\"></span>% (<span id=\"bytes_received\"></span> bytes) received</div>\r\n        <button id=\"zm_progress_skipper\" type=\"button\" onclick=\"skip_current_file();\">Skip File</button>\r\n    </form>\r\n\r\n    <form id=\"zm_choose\" style=\"display: none\" action=\"javascript:void(0)\">\r\n        <label>Choose file(s): <input id=\"zm_files\" type=\"file\" multiple></label>\r\n    </form>\r\n</div>\r\n<script src=\"./main.js\"></script>\r\n</body>\r\n</html>\r\n"),
	}
	filew := &embedded.EmbeddedFile{
		Filename:    "xterm.css",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("/**\r\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\r\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\r\n * https://github.com/chjj/term.js\r\n * @license MIT\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n * Originally forked from (with the author's permission):\r\n *   Fabrice Bellard's javascript vt100 for jslinux:\r\n *   http://bellard.org/jslinux/\r\n *   Copyright (c) 2011 Fabrice Bellard\r\n *   The original design remains. The terminal itself\r\n *   has been extended to include xterm CSI codes, among\r\n *   other features.\r\n */\r\n\r\n/**\r\n *  Default styles for xterm.js\r\n */\r\n\r\n.xterm {\r\n    font-family: courier-new, courier, monospace;\r\n    font-feature-settings: \"liga\" 0;\r\n    position: relative;\r\n    user-select: none;\r\n    -ms-user-select: none;\r\n    -webkit-user-select: none;\r\n}\r\n\r\n.xterm.focus,\r\n.xterm:focus {\r\n    outline: none;\r\n}\r\n\r\n.xterm .xterm-helpers {\r\n    position: absolute;\r\n    top: 0;\r\n    /**\r\n     * The z-index of the helpers must be higher than the canvases in order for\r\n     * IMEs to appear on top.\r\n     */\r\n    z-index: 10;\r\n}\r\n\r\n.xterm .xterm-helper-textarea {\r\n    /*\r\n     * HACK: to fix IE's blinking cursor\r\n     * Move textarea out of the screen to the far left, so that the cursor is not visible.\r\n     */\r\n    position: absolute;\r\n    opacity: 0;\r\n    left: -9999em;\r\n    top: 0;\r\n    width: 0;\r\n    height: 0;\r\n    z-index: -10;\r\n    /** Prevent wrapping so the IME appears against the textarea at the correct position */\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    resize: none;\r\n}\r\n\r\n.xterm .composition-view {\r\n    /* TODO: Composition position got messed up somewhere */\r\n    background: #000;\r\n    color: #FFF;\r\n    display: none;\r\n    position: absolute;\r\n    white-space: nowrap;\r\n    z-index: 1;\r\n}\r\n\r\n.xterm .composition-view.active {\r\n    display: block;\r\n}\r\n\r\n.xterm .xterm-viewport {\r\n    /* On OS X this is required in order for the scroll bar to appear fully opaque */\r\n    background-color: #000;\r\n    overflow-y: scroll;\r\n    cursor: default;\r\n    position: absolute;\r\n    right: 0;\r\n    left: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n}\r\n\r\n.xterm .xterm-screen {\r\n    position: relative;\r\n}\r\n\r\n.xterm .xterm-screen canvas {\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n}\r\n\r\n.xterm .xterm-scroll-area {\r\n    visibility: hidden;\r\n}\r\n\r\n.xterm-char-measure-element {\r\n    display: inline-block;\r\n    visibility: hidden;\r\n    position: absolute;\r\n    top: 0;\r\n    left: -9999em;\r\n    line-height: normal;\r\n}\r\n\r\n.xterm.enable-mouse-events {\r\n    /* When mouse events are enabled (eg. tmux), revert to the standard pointer cursor */\r\n    cursor: default;\r\n}\r\n\r\n.xterm:not(.enable-mouse-events) {\r\n    cursor: text;\r\n}\r\n\r\n.xterm .xterm-accessibility,\r\n.xterm .xterm-message {\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    z-index: 100;\r\n    color: transparent;\r\n}\r\n\r\n.xterm .live-region {\r\n    position: absolute;\r\n    left: -9999px;\r\n    width: 1px;\r\n    height: 1px;\r\n    overflow: hidden;\r\n}\r\n\r\n.xterm-cursor-pointer {\r\n    cursor: pointer;\r\n}\r\n"),
	}
	filex := &embedded.EmbeddedFile{
		Filename:    "xterm.js",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Terminal = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Strings = require(\"./Strings\");\r\nvar Browser_1 = require(\"./shared/utils/Browser\");\r\nvar RenderDebouncer_1 = require(\"./utils/RenderDebouncer\");\r\nvar Dom_1 = require(\"./utils/Dom\");\r\nvar MAX_ROWS_TO_READ = 20;\r\nvar BoundaryPosition;\r\n(function (BoundaryPosition) {\r\n    BoundaryPosition[BoundaryPosition[\"Top\"] = 0] = \"Top\";\r\n    BoundaryPosition[BoundaryPosition[\"Bottom\"] = 1] = \"Bottom\";\r\n})(BoundaryPosition || (BoundaryPosition = {}));\r\nvar AccessibilityManager = (function () {\r\n    function AccessibilityManager(_terminal) {\r\n        var _this = this;\r\n        this._terminal = _terminal;\r\n        this._liveRegionLineCount = 0;\r\n        this._disposables = [];\r\n        this._charsToConsume = [];\r\n        this._accessibilityTreeRoot = document.createElement('div');\r\n        this._accessibilityTreeRoot.classList.add('xterm-accessibility');\r\n        this._rowContainer = document.createElement('div');\r\n        this._rowContainer.classList.add('xterm-accessibility-tree');\r\n        this._rowElements = [];\r\n        for (var i = 0; i < this._terminal.rows; i++) {\r\n            this._rowElements[i] = this._createAccessibilityTreeNode();\r\n            this._rowContainer.appendChild(this._rowElements[i]);\r\n        }\r\n        this._topBoundaryFocusListener = function (e) { return _this._onBoundaryFocus(e, BoundaryPosition.Top); };\r\n        this._bottomBoundaryFocusListener = function (e) { return _this._onBoundaryFocus(e, BoundaryPosition.Bottom); };\r\n        this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\r\n        this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\r\n        this._refreshRowsDimensions();\r\n        this._accessibilityTreeRoot.appendChild(this._rowContainer);\r\n        this._renderRowsDebouncer = new RenderDebouncer_1.RenderDebouncer(this._terminal, this._renderRows.bind(this));\r\n        this._refreshRows();\r\n        this._liveRegion = document.createElement('div');\r\n        this._liveRegion.classList.add('live-region');\r\n        this._liveRegion.setAttribute('aria-live', 'assertive');\r\n        this._accessibilityTreeRoot.appendChild(this._liveRegion);\r\n        this._terminal.element.insertAdjacentElement('afterbegin', this._accessibilityTreeRoot);\r\n        this._disposables.push(this._renderRowsDebouncer);\r\n        this._disposables.push(this._terminal.addDisposableListener('resize', function (data) { return _this._onResize(data.cols, data.rows); }));\r\n        this._disposables.push(this._terminal.addDisposableListener('refresh', function (data) { return _this._refreshRows(data.start, data.end); }));\r\n        this._disposables.push(this._terminal.addDisposableListener('scroll', function (data) { return _this._refreshRows(); }));\r\n        this._disposables.push(this._terminal.addDisposableListener('a11y.char', function (char) { return _this._onChar(char); }));\r\n        this._disposables.push(this._terminal.addDisposableListener('linefeed', function () { return _this._onChar('\\n'); }));\r\n        this._disposables.push(this._terminal.addDisposableListener('a11y.tab', function (spaceCount) { return _this._onTab(spaceCount); }));\r\n        this._disposables.push(this._terminal.addDisposableListener('key', function (keyChar) { return _this._onKey(keyChar); }));\r\n        this._disposables.push(this._terminal.addDisposableListener('blur', function () { return _this._clearLiveRegion(); }));\r\n        this._disposables.push(this._terminal.addDisposableListener('dprchange', function () { return _this._refreshRowsDimensions(); }));\r\n        this._disposables.push(this._terminal.renderer.addDisposableListener('resize', function () { return _this._refreshRowsDimensions(); }));\r\n        this._disposables.push(Dom_1.addDisposableListener(window, 'resize', function () { return _this._refreshRowsDimensions(); }));\r\n    }\r\n    AccessibilityManager.prototype.dispose = function () {\r\n        this._disposables.forEach(function (d) { return d.dispose(); });\r\n        this._disposables.length = 0;\r\n        this._terminal.element.removeChild(this._accessibilityTreeRoot);\r\n        this._rowElements.length = 0;\r\n    };\r\n    AccessibilityManager.prototype._onBoundaryFocus = function (e, position) {\r\n        var boundaryElement = e.target;\r\n        var beforeBoundaryElement = this._rowElements[position === BoundaryPosition.Top ? 1 : this._rowElements.length - 2];\r\n        var posInSet = boundaryElement.getAttribute('aria-posinset');\r\n        var lastRowPos = position === BoundaryPosition.Top ? '1' : \"\" + this._terminal.buffer.lines.length;\r\n        if (posInSet === lastRowPos) {\r\n            return;\r\n        }\r\n        if (e.relatedTarget !== beforeBoundaryElement) {\r\n            return;\r\n        }\r\n        var topBoundaryElement;\r\n        var bottomBoundaryElement;\r\n        if (position === BoundaryPosition.Top) {\r\n            topBoundaryElement = boundaryElement;\r\n            bottomBoundaryElement = this._rowElements.pop();\r\n            this._rowContainer.removeChild(bottomBoundaryElement);\r\n        }\r\n        else {\r\n            topBoundaryElement = this._rowElements.shift();\r\n            bottomBoundaryElement = boundaryElement;\r\n            this._rowContainer.removeChild(topBoundaryElement);\r\n        }\r\n        topBoundaryElement.removeEventListener('focus', this._topBoundaryFocusListener);\r\n        bottomBoundaryElement.removeEventListener('focus', this._bottomBoundaryFocusListener);\r\n        if (position === BoundaryPosition.Top) {\r\n            var newElement = this._createAccessibilityTreeNode();\r\n            this._rowElements.unshift(newElement);\r\n            this._rowContainer.insertAdjacentElement('afterbegin', newElement);\r\n        }\r\n        else {\r\n            var newElement = this._createAccessibilityTreeNode();\r\n            this._rowElements.push(newElement);\r\n            this._rowContainer.appendChild(newElement);\r\n        }\r\n        this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\r\n        this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\r\n        this._terminal.scrollLines(position === BoundaryPosition.Top ? -1 : 1);\r\n        this._rowElements[position === BoundaryPosition.Top ? 1 : this._rowElements.length - 2].focus();\r\n        e.preventDefault();\r\n        e.stopImmediatePropagation();\r\n    };\r\n    AccessibilityManager.prototype._onResize = function (cols, rows) {\r\n        this._rowElements[this._rowElements.length - 1].removeEventListener('focus', this._bottomBoundaryFocusListener);\r\n        for (var i = this._rowContainer.children.length; i < this._terminal.rows; i++) {\r\n            this._rowElements[i] = this._createAccessibilityTreeNode();\r\n            this._rowContainer.appendChild(this._rowElements[i]);\r\n        }\r\n        while (this._rowElements.length > rows) {\r\n            this._rowContainer.removeChild(this._rowElements.pop());\r\n        }\r\n        this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\r\n        this._refreshRowsDimensions();\r\n    };\r\n    AccessibilityManager.prototype._createAccessibilityTreeNode = function () {\r\n        var element = document.createElement('div');\r\n        element.setAttribute('role', 'listitem');\r\n        element.tabIndex = -1;\r\n        this._refreshRowDimensions(element);\r\n        return element;\r\n    };\r\n    AccessibilityManager.prototype._onTab = function (spaceCount) {\r\n        for (var i = 0; i < spaceCount; i++) {\r\n            this._onChar(' ');\r\n        }\r\n    };\r\n    AccessibilityManager.prototype._onChar = function (char) {\r\n        var _this = this;\r\n        if (this._liveRegionLineCount < MAX_ROWS_TO_READ + 1) {\r\n            if (this._charsToConsume.length > 0) {\r\n                var shiftedChar = this._charsToConsume.shift();\r\n                if (shiftedChar !== char) {\r\n                    this._announceCharacter(char);\r\n                }\r\n            }\r\n            else {\r\n                this._announceCharacter(char);\r\n            }\r\n            if (char === '\\n') {\r\n                this._liveRegionLineCount++;\r\n                if (this._liveRegionLineCount === MAX_ROWS_TO_READ + 1) {\r\n                    this._liveRegion.textContent += Strings.tooMuchOutput;\r\n                }\r\n            }\r\n            if (Browser_1.isMac) {\r\n                if (this._liveRegion.textContent && this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode) {\r\n                    setTimeout(function () {\r\n                        _this._accessibilityTreeRoot.appendChild(_this._liveRegion);\r\n                    }, 0);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AccessibilityManager.prototype._clearLiveRegion = function () {\r\n        this._liveRegion.textContent = '';\r\n        this._liveRegionLineCount = 0;\r\n        if (Browser_1.isMac) {\r\n            if (this._liveRegion.parentNode) {\r\n                this._accessibilityTreeRoot.removeChild(this._liveRegion);\r\n            }\r\n        }\r\n    };\r\n    AccessibilityManager.prototype._onKey = function (keyChar) {\r\n        this._clearLiveRegion();\r\n        this._charsToConsume.push(keyChar);\r\n    };\r\n    AccessibilityManager.prototype._refreshRows = function (start, end) {\r\n        this._renderRowsDebouncer.refresh(start, end);\r\n    };\r\n    AccessibilityManager.prototype._renderRows = function (start, end) {\r\n        var buffer = this._terminal.buffer;\r\n        var setSize = buffer.lines.length.toString();\r\n        for (var i = start; i <= end; i++) {\r\n            var lineData = buffer.translateBufferLineToString(buffer.ydisp + i, true);\r\n            var posInSet = (buffer.ydisp + i + 1).toString();\r\n            var element = this._rowElements[i];\r\n            element.textContent = lineData.length === 0 ? Strings.blankLine : lineData;\r\n            element.setAttribute('aria-posinset', posInSet);\r\n            element.setAttribute('aria-setsize', setSize);\r\n        }\r\n    };\r\n    AccessibilityManager.prototype._refreshRowsDimensions = function () {\r\n        if (!this._terminal.renderer.dimensions.actualCellHeight) {\r\n            return;\r\n        }\r\n        for (var i = 0; i < this._terminal.rows; i++) {\r\n            this._refreshRowDimensions(this._rowElements[i]);\r\n        }\r\n    };\r\n    AccessibilityManager.prototype._refreshRowDimensions = function (element) {\r\n        element.style.height = this._terminal.renderer.dimensions.actualCellHeight + \"px\";\r\n    };\r\n    AccessibilityManager.prototype._announceCharacter = function (char) {\r\n        if (char === ' ') {\r\n            this._liveRegion.innerHTML += '&nbsp;';\r\n        }\r\n        else {\r\n            this._liveRegion.textContent += char;\r\n        }\r\n    };\r\n    return AccessibilityManager;\r\n}());\r\nexports.AccessibilityManager = AccessibilityManager;\r\n\r\n\r\n\r\n},{\"./Strings\":15,\"./shared/utils/Browser\":36,\"./utils/Dom\":40,\"./utils/RenderDebouncer\":42}],2:[function(require,module,exports){\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CircularList_1 = require(\"./utils/CircularList\");\r\nvar EventEmitter_1 = require(\"./EventEmitter\");\r\nexports.CHAR_DATA_ATTR_INDEX = 0;\r\nexports.CHAR_DATA_CHAR_INDEX = 1;\r\nexports.CHAR_DATA_WIDTH_INDEX = 2;\r\nexports.CHAR_DATA_CODE_INDEX = 3;\r\nexports.MAX_BUFFER_SIZE = 4294967295;\r\nvar Buffer = (function () {\r\n    function Buffer(_terminal, _hasScrollback) {\r\n        this._terminal = _terminal;\r\n        this._hasScrollback = _hasScrollback;\r\n        this.markers = [];\r\n        this.clear();\r\n    }\r\n    Object.defineProperty(Buffer.prototype, \"lines\", {\r\n        get: function () {\r\n            return this._lines;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Buffer.prototype, \"hasScrollback\", {\r\n        get: function () {\r\n            return this._hasScrollback && this.lines.maxLength > this._terminal.rows;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Buffer.prototype, \"isCursorInViewport\", {\r\n        get: function () {\r\n            var absoluteY = this.ybase + this.y;\r\n            var relativeY = absoluteY - this.ydisp;\r\n            return (relativeY >= 0 && relativeY < this._terminal.rows);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Buffer.prototype._getCorrectBufferLength = function (rows) {\r\n        if (!this._hasScrollback) {\r\n            return rows;\r\n        }\r\n        var correctBufferLength = rows + this._terminal.options.scrollback;\r\n        return correctBufferLength > exports.MAX_BUFFER_SIZE ? exports.MAX_BUFFER_SIZE : correctBufferLength;\r\n    };\r\n    Buffer.prototype.fillViewportRows = function () {\r\n        if (this._lines.length === 0) {\r\n            var i = this._terminal.rows;\r\n            while (i--) {\r\n                this.lines.push(this._terminal.blankLine());\r\n            }\r\n        }\r\n    };\r\n    Buffer.prototype.clear = function () {\r\n        this.ydisp = 0;\r\n        this.ybase = 0;\r\n        this.y = 0;\r\n        this.x = 0;\r\n        this._lines = new CircularList_1.CircularList(this._getCorrectBufferLength(this._terminal.rows));\r\n        this.scrollTop = 0;\r\n        this.scrollBottom = this._terminal.rows - 1;\r\n        this.setupTabStops();\r\n    };\r\n    Buffer.prototype.resize = function (newCols, newRows) {\r\n        var newMaxLength = this._getCorrectBufferLength(newRows);\r\n        if (newMaxLength > this._lines.maxLength) {\r\n            this._lines.maxLength = newMaxLength;\r\n        }\r\n        if (this._lines.length > 0) {\r\n            if (this._terminal.cols < newCols) {\r\n                var ch = [this._terminal.defAttr, ' ', 1, 32];\r\n                for (var i = 0; i < this._lines.length; i++) {\r\n                    while (this._lines.get(i).length < newCols) {\r\n                        this._lines.get(i).push(ch);\r\n                    }\r\n                }\r\n            }\r\n            var addToY = 0;\r\n            if (this._terminal.rows < newRows) {\r\n                for (var y = this._terminal.rows; y < newRows; y++) {\r\n                    if (this._lines.length < newRows + this.ybase) {\r\n                        if (this.ybase > 0 && this._lines.length <= this.ybase + this.y + addToY + 1) {\r\n                            this.ybase--;\r\n                            addToY++;\r\n                            if (this.ydisp > 0) {\r\n                                this.ydisp--;\r\n                            }\r\n                        }\r\n                        else {\r\n                            this._lines.push(this._terminal.blankLine(undefined, undefined, newCols));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (var y = this._terminal.rows; y > newRows; y--) {\r\n                    if (this._lines.length > newRows + this.ybase) {\r\n                        if (this._lines.length > this.ybase + this.y + 1) {\r\n                            this._lines.pop();\r\n                        }\r\n                        else {\r\n                            this.ybase++;\r\n                            this.ydisp++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (newMaxLength < this._lines.maxLength) {\r\n                var amountToTrim = this._lines.length - newMaxLength;\r\n                if (amountToTrim > 0) {\r\n                    this._lines.trimStart(amountToTrim);\r\n                    this.ybase = Math.max(this.ybase - amountToTrim, 0);\r\n                    this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\r\n                }\r\n                this._lines.maxLength = newMaxLength;\r\n            }\r\n            this.x = Math.min(this.x, newCols - 1);\r\n            this.y = Math.min(this.y, newRows - 1);\r\n            if (addToY) {\r\n                this.y += addToY;\r\n            }\r\n            this.savedY = Math.min(this.savedY, newRows - 1);\r\n            this.savedX = Math.min(this.savedX, newCols - 1);\r\n            this.scrollTop = 0;\r\n        }\r\n        this.scrollBottom = newRows - 1;\r\n    };\r\n    Buffer.prototype.translateBufferLineToString = function (lineIndex, trimRight, startCol, endCol) {\r\n        if (startCol === void 0) { startCol = 0; }\r\n        if (endCol === void 0) { endCol = null; }\r\n        var lineString = '';\r\n        var line = this.lines.get(lineIndex);\r\n        if (!line) {\r\n            return '';\r\n        }\r\n        var startIndex = startCol;\r\n        if (endCol === null) {\r\n            endCol = line.length;\r\n        }\r\n        var endIndex = endCol;\r\n        for (var i = 0; i < line.length; i++) {\r\n            var char = line[i];\r\n            lineString += char[exports.CHAR_DATA_CHAR_INDEX];\r\n            if (char[exports.CHAR_DATA_WIDTH_INDEX] === 0) {\r\n                if (startCol >= i) {\r\n                    startIndex--;\r\n                }\r\n                if (endCol >= i) {\r\n                    endIndex--;\r\n                }\r\n            }\r\n            else {\r\n                if (char[exports.CHAR_DATA_CHAR_INDEX].length > 1) {\r\n                    if (startCol > i) {\r\n                        startIndex += char[exports.CHAR_DATA_CHAR_INDEX].length - 1;\r\n                    }\r\n                    if (endCol > i) {\r\n                        endIndex += char[exports.CHAR_DATA_CHAR_INDEX].length - 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (trimRight) {\r\n            var rightWhitespaceIndex = lineString.search(/\\s+$/);\r\n            if (rightWhitespaceIndex !== -1) {\r\n                endIndex = Math.min(endIndex, rightWhitespaceIndex);\r\n            }\r\n            if (endIndex <= startIndex) {\r\n                return '';\r\n            }\r\n        }\r\n        return lineString.substring(startIndex, endIndex);\r\n    };\r\n    Buffer.prototype.setupTabStops = function (i) {\r\n        if (i != null) {\r\n            if (!this.tabs[i]) {\r\n                i = this.prevStop(i);\r\n            }\r\n        }\r\n        else {\r\n            this.tabs = {};\r\n            i = 0;\r\n        }\r\n        for (; i < this._terminal.cols; i += this._terminal.options.tabStopWidth) {\r\n            this.tabs[i] = true;\r\n        }\r\n    };\r\n    Buffer.prototype.prevStop = function (x) {\r\n        if (x == null) {\r\n            x = this.x;\r\n        }\r\n        while (!this.tabs[--x] && x > 0)\r\n            ;\r\n        return x >= this._terminal.cols ? this._terminal.cols - 1 : x < 0 ? 0 : x;\r\n    };\r\n    Buffer.prototype.nextStop = function (x) {\r\n        if (x == null) {\r\n            x = this.x;\r\n        }\r\n        while (!this.tabs[++x] && x < this._terminal.cols)\r\n            ;\r\n        return x >= this._terminal.cols ? this._terminal.cols - 1 : x < 0 ? 0 : x;\r\n    };\r\n    Buffer.prototype.addMarker = function (y) {\r\n        var _this = this;\r\n        var marker = new Marker(y);\r\n        this.markers.push(marker);\r\n        marker.disposables.push(this._lines.addDisposableListener('trim', function (amount) {\r\n            marker.line -= amount;\r\n            if (marker.line < 0) {\r\n                marker.dispose();\r\n            }\r\n        }));\r\n        marker.on('dispose', function () { return _this._removeMarker(marker); });\r\n        return marker;\r\n    };\r\n    Buffer.prototype._removeMarker = function (marker) {\r\n        this.markers.splice(this.markers.indexOf(marker), 1);\r\n    };\r\n    return Buffer;\r\n}());\r\nexports.Buffer = Buffer;\r\nvar Marker = (function (_super) {\r\n    __extends(Marker, _super);\r\n    function Marker(line) {\r\n        var _this = _super.call(this) || this;\r\n        _this.line = line;\r\n        _this._id = Marker.NEXT_ID++;\r\n        _this.isDisposed = false;\r\n        _this.disposables = [];\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Marker.prototype, \"id\", {\r\n        get: function () { return this._id; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Marker.prototype.dispose = function () {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.isDisposed = true;\r\n        this.disposables.forEach(function (d) { return d.dispose(); });\r\n        this.disposables.length = 0;\r\n        this.emit('dispose');\r\n    };\r\n    Marker.NEXT_ID = 1;\r\n    return Marker;\r\n}(EventEmitter_1.EventEmitter));\r\nexports.Marker = Marker;\r\n\r\n\r\n\r\n},{\"./EventEmitter\":8,\"./utils/CircularList\":38}],3:[function(require,module,exports){\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Buffer_1 = require(\"./Buffer\");\r\nvar EventEmitter_1 = require(\"./EventEmitter\");\r\nvar BufferSet = (function (_super) {\r\n    __extends(BufferSet, _super);\r\n    function BufferSet(_terminal) {\r\n        var _this = _super.call(this) || this;\r\n        _this._terminal = _terminal;\r\n        _this._normal = new Buffer_1.Buffer(_this._terminal, true);\r\n        _this._normal.fillViewportRows();\r\n        _this._alt = new Buffer_1.Buffer(_this._terminal, false);\r\n        _this._activeBuffer = _this._normal;\r\n        _this.setupTabStops();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(BufferSet.prototype, \"alt\", {\r\n        get: function () {\r\n            return this._alt;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BufferSet.prototype, \"active\", {\r\n        get: function () {\r\n            return this._activeBuffer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BufferSet.prototype, \"normal\", {\r\n        get: function () {\r\n            return this._normal;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    BufferSet.prototype.activateNormalBuffer = function () {\r\n        if (this._activeBuffer === this._normal) {\r\n            return;\r\n        }\r\n        this._alt.clear();\r\n        this._activeBuffer = this._normal;\r\n        this.emit('activate', {\r\n            activeBuffer: this._normal,\r\n            inactiveBuffer: this._alt\r\n        });\r\n    };\r\n    BufferSet.prototype.activateAltBuffer = function () {\r\n        if (this._activeBuffer === this._alt) {\r\n            return;\r\n        }\r\n        this._alt.fillViewportRows();\r\n        this._activeBuffer = this._alt;\r\n        this.emit('activate', {\r\n            activeBuffer: this._alt,\r\n            inactiveBuffer: this._normal\r\n        });\r\n    };\r\n    BufferSet.prototype.resize = function (newCols, newRows) {\r\n        this._normal.resize(newCols, newRows);\r\n        this._alt.resize(newCols, newRows);\r\n    };\r\n    BufferSet.prototype.setupTabStops = function (i) {\r\n        this._normal.setupTabStops(i);\r\n        this._alt.setupTabStops(i);\r\n    };\r\n    return BufferSet;\r\n}(EventEmitter_1.EventEmitter));\r\nexports.BufferSet = BufferSet;\r\n\r\n\r\n\r\n},{\"./Buffer\":2,\"./EventEmitter\":8}],4:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.wcwidth = (function (opts) {\r\n    var COMBINING_BMP = [\r\n        [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\r\n        [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\r\n        [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\r\n        [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\r\n        [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\r\n        [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\r\n        [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\r\n        [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\r\n        [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\r\n        [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\r\n        [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\r\n        [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\r\n        [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\r\n        [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\r\n        [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\r\n        [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\r\n        [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\r\n        [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\r\n        [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\r\n        [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\r\n        [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\r\n        [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\r\n        [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\r\n        [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\r\n        [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\r\n        [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\r\n        [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\r\n        [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\r\n        [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\r\n        [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\r\n        [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\r\n        [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\r\n        [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\r\n        [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\r\n        [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\r\n        [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\r\n        [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\r\n        [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\r\n        [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\r\n        [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\r\n        [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\r\n        [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\r\n        [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB]\r\n    ];\r\n    var COMBINING_HIGH = [\r\n        [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\r\n        [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\r\n        [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\r\n        [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\r\n        [0xE0100, 0xE01EF]\r\n    ];\r\n    function bisearch(ucs, data) {\r\n        var min = 0;\r\n        var max = data.length - 1;\r\n        var mid;\r\n        if (ucs < data[0][0] || ucs > data[max][1]) {\r\n            return false;\r\n        }\r\n        while (max >= min) {\r\n            mid = (min + max) >> 1;\r\n            if (ucs > data[mid][1]) {\r\n                min = mid + 1;\r\n            }\r\n            else if (ucs < data[mid][0]) {\r\n                max = mid - 1;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function wcwidthBMP(ucs) {\r\n        if (ucs === 0) {\r\n            return opts.nul;\r\n        }\r\n        if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0)) {\r\n            return opts.control;\r\n        }\r\n        if (bisearch(ucs, COMBINING_BMP)) {\r\n            return 0;\r\n        }\r\n        if (isWideBMP(ucs)) {\r\n            return 2;\r\n        }\r\n        return 1;\r\n    }\r\n    function isWideBMP(ucs) {\r\n        return (ucs >= 0x1100 && (ucs <= 0x115f ||\r\n            ucs === 0x2329 ||\r\n            ucs === 0x232a ||\r\n            (ucs >= 0x2e80 && ucs <= 0xa4cf && ucs !== 0x303f) ||\r\n            (ucs >= 0xac00 && ucs <= 0xd7a3) ||\r\n            (ucs >= 0xf900 && ucs <= 0xfaff) ||\r\n            (ucs >= 0xfe10 && ucs <= 0xfe19) ||\r\n            (ucs >= 0xfe30 && ucs <= 0xfe6f) ||\r\n            (ucs >= 0xff00 && ucs <= 0xff60) ||\r\n            (ucs >= 0xffe0 && ucs <= 0xffe6)));\r\n    }\r\n    function wcwidthHigh(ucs) {\r\n        if (bisearch(ucs, COMBINING_HIGH)) {\r\n            return 0;\r\n        }\r\n        if ((ucs >= 0x20000 && ucs <= 0x2fffd) || (ucs >= 0x30000 && ucs <= 0x3fffd)) {\r\n            return 2;\r\n        }\r\n        return 1;\r\n    }\r\n    var control = opts.control | 0;\r\n    var table = null;\r\n    function init_table() {\r\n        var CODEPOINTS = 65536;\r\n        var BITWIDTH = 2;\r\n        var ITEMSIZE = 32;\r\n        var CONTAINERSIZE = CODEPOINTS * BITWIDTH / ITEMSIZE;\r\n        var CODEPOINTS_PER_ITEM = ITEMSIZE / BITWIDTH;\r\n        table = (typeof Uint32Array === 'undefined')\r\n            ? new Array(CONTAINERSIZE)\r\n            : new Uint32Array(CONTAINERSIZE);\r\n        for (var i = 0; i < CONTAINERSIZE; ++i) {\r\n            var num = 0;\r\n            var pos = CODEPOINTS_PER_ITEM;\r\n            while (pos--) {\r\n                num = (num << 2) | wcwidthBMP(CODEPOINTS_PER_ITEM * i + pos);\r\n            }\r\n            table[i] = num;\r\n        }\r\n        return table;\r\n    }\r\n    return function (num) {\r\n        num = num | 0;\r\n        if (num < 32) {\r\n            return control | 0;\r\n        }\r\n        if (num < 127) {\r\n            return 1;\r\n        }\r\n        var t = table || init_table();\r\n        if (num < 65536) {\r\n            return t[num >> 4] >> ((num & 15) << 1) & 3;\r\n        }\r\n        return wcwidthHigh(num);\r\n    };\r\n})({ nul: 0, control: 0 });\r\n\r\n\r\n\r\n},{}],5:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CHARSETS = {};\r\nexports.DEFAULT_CHARSET = exports.CHARSETS['B'];\r\nexports.CHARSETS['0'] = {\r\n    '`': '\\u25c6',\r\n    'a': '\\u2592',\r\n    'b': '\\u0009',\r\n    'c': '\\u000c',\r\n    'd': '\\u000d',\r\n    'e': '\\u000a',\r\n    'f': '\\u00b0',\r\n    'g': '\\u00b1',\r\n    'h': '\\u2424',\r\n    'i': '\\u000b',\r\n    'j': '\\u2518',\r\n    'k': '\\u2510',\r\n    'l': '\\u250c',\r\n    'm': '\\u2514',\r\n    'n': '\\u253c',\r\n    'o': '\\u23ba',\r\n    'p': '\\u23bb',\r\n    'q': '\\u2500',\r\n    'r': '\\u23bc',\r\n    's': '\\u23bd',\r\n    't': '\\u251c',\r\n    'u': '\\u2524',\r\n    'v': '\\u2534',\r\n    'w': '\\u252c',\r\n    'x': '\\u2502',\r\n    'y': '\\u2264',\r\n    'z': '\\u2265',\r\n    '{': '\\u03c0',\r\n    '|': '\\u2260',\r\n    '}': '\\u00a3',\r\n    '~': '\\u00b7'\r\n};\r\nexports.CHARSETS['A'] = {\r\n    '#': '£'\r\n};\r\nexports.CHARSETS['B'] = null;\r\nexports.CHARSETS['4'] = {\r\n    '#': '£',\r\n    '@': '¾',\r\n    '[': 'ij',\r\n    '\\\\': '½',\r\n    ']': '|',\r\n    '{': '¨',\r\n    '|': 'f',\r\n    '}': '¼',\r\n    '~': '´'\r\n};\r\nexports.CHARSETS['C'] =\r\n    exports.CHARSETS['5'] = {\r\n        '[': 'Ä',\r\n        '\\\\': 'Ö',\r\n        ']': 'Å',\r\n        '^': 'Ü',\r\n        '`': 'é',\r\n        '{': 'ä',\r\n        '|': 'ö',\r\n        '}': 'å',\r\n        '~': 'ü'\r\n    };\r\nexports.CHARSETS['R'] = {\r\n    '#': '£',\r\n    '@': 'à',\r\n    '[': '°',\r\n    '\\\\': 'ç',\r\n    ']': '§',\r\n    '{': 'é',\r\n    '|': 'ù',\r\n    '}': 'è',\r\n    '~': '¨'\r\n};\r\nexports.CHARSETS['Q'] = {\r\n    '@': 'à',\r\n    '[': 'â',\r\n    '\\\\': 'ç',\r\n    ']': 'ê',\r\n    '^': 'î',\r\n    '`': 'ô',\r\n    '{': 'é',\r\n    '|': 'ù',\r\n    '}': 'è',\r\n    '~': 'û'\r\n};\r\nexports.CHARSETS['K'] = {\r\n    '@': '§',\r\n    '[': 'Ä',\r\n    '\\\\': 'Ö',\r\n    ']': 'Ü',\r\n    '{': 'ä',\r\n    '|': 'ö',\r\n    '}': 'ü',\r\n    '~': 'ß'\r\n};\r\nexports.CHARSETS['Y'] = {\r\n    '#': '£',\r\n    '@': '§',\r\n    '[': '°',\r\n    '\\\\': 'ç',\r\n    ']': 'é',\r\n    '`': 'ù',\r\n    '{': 'à',\r\n    '|': 'ò',\r\n    '}': 'è',\r\n    '~': 'ì'\r\n};\r\nexports.CHARSETS['E'] =\r\n    exports.CHARSETS['6'] = {\r\n        '@': 'Ä',\r\n        '[': 'Æ',\r\n        '\\\\': 'Ø',\r\n        ']': 'Å',\r\n        '^': 'Ü',\r\n        '`': 'ä',\r\n        '{': 'æ',\r\n        '|': 'ø',\r\n        '}': 'å',\r\n        '~': 'ü'\r\n    };\r\nexports.CHARSETS['Z'] = {\r\n    '#': '£',\r\n    '@': '§',\r\n    '[': '¡',\r\n    '\\\\': 'Ñ',\r\n    ']': '¿',\r\n    '{': '°',\r\n    '|': 'ñ',\r\n    '}': 'ç'\r\n};\r\nexports.CHARSETS['H'] =\r\n    exports.CHARSETS['7'] = {\r\n        '@': 'É',\r\n        '[': 'Ä',\r\n        '\\\\': 'Ö',\r\n        ']': 'Å',\r\n        '^': 'Ü',\r\n        '`': 'é',\r\n        '{': 'ä',\r\n        '|': 'ö',\r\n        '}': 'å',\r\n        '~': 'ü'\r\n    };\r\nexports.CHARSETS['='] = {\r\n    '#': 'ù',\r\n    '@': 'à',\r\n    '[': 'é',\r\n    '\\\\': 'ç',\r\n    ']': 'ê',\r\n    '^': 'î',\r\n    '_': 'è',\r\n    '`': 'ô',\r\n    '{': 'ä',\r\n    '|': 'ö',\r\n    '}': 'ü',\r\n    '~': 'û'\r\n};\r\n\r\n\r\n\r\n},{}],6:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CompositionHelper = (function () {\r\n    function CompositionHelper(_textarea, _compositionView, _terminal) {\r\n        this._textarea = _textarea;\r\n        this._compositionView = _compositionView;\r\n        this._terminal = _terminal;\r\n        this._isComposing = false;\r\n        this._isSendingComposition = false;\r\n        this._compositionPosition = { start: null, end: null };\r\n    }\r\n    CompositionHelper.prototype.compositionstart = function () {\r\n        this._isComposing = true;\r\n        this._compositionPosition.start = this._textarea.value.length;\r\n        this._compositionView.textContent = '';\r\n        this._compositionView.classList.add('active');\r\n    };\r\n    CompositionHelper.prototype.compositionupdate = function (ev) {\r\n        var _this = this;\r\n        this._compositionView.textContent = ev.data;\r\n        this.updateCompositionElements();\r\n        setTimeout(function () {\r\n            _this._compositionPosition.end = _this._textarea.value.length;\r\n        }, 0);\r\n    };\r\n    CompositionHelper.prototype.compositionend = function () {\r\n        this._finalizeComposition(true);\r\n    };\r\n    CompositionHelper.prototype.keydown = function (ev) {\r\n        if (this._isComposing || this._isSendingComposition) {\r\n            if (ev.keyCode === 229) {\r\n                return false;\r\n            }\r\n            else if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\r\n                return false;\r\n            }\r\n            else {\r\n                this._finalizeComposition(false);\r\n            }\r\n        }\r\n        if (ev.keyCode === 229) {\r\n            this._handleAnyTextareaChanges();\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    CompositionHelper.prototype._finalizeComposition = function (waitForPropogation) {\r\n        var _this = this;\r\n        this._compositionView.classList.remove('active');\r\n        this._isComposing = false;\r\n        this._clearTextareaPosition();\r\n        if (!waitForPropogation) {\r\n            this._isSendingComposition = false;\r\n            var input = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);\r\n            this._terminal.handler(input);\r\n        }\r\n        else {\r\n            var currentCompositionPosition_1 = {\r\n                start: this._compositionPosition.start,\r\n                end: this._compositionPosition.end\r\n            };\r\n            this._isSendingComposition = true;\r\n            setTimeout(function () {\r\n                if (_this._isSendingComposition) {\r\n                    _this._isSendingComposition = false;\r\n                    var input = void 0;\r\n                    if (_this._isComposing) {\r\n                        input = _this._textarea.value.substring(currentCompositionPosition_1.start, currentCompositionPosition_1.end);\r\n                    }\r\n                    else {\r\n                        input = _this._textarea.value.substring(currentCompositionPosition_1.start);\r\n                    }\r\n                    _this._terminal.handler(input);\r\n                }\r\n            }, 0);\r\n        }\r\n    };\r\n    CompositionHelper.prototype._handleAnyTextareaChanges = function () {\r\n        var _this = this;\r\n        var oldValue = this._textarea.value;\r\n        setTimeout(function () {\r\n            if (!_this._isComposing) {\r\n                var newValue = _this._textarea.value;\r\n                var diff = newValue.replace(oldValue, '');\r\n                if (diff.length > 0) {\r\n                    _this._terminal.handler(diff);\r\n                }\r\n            }\r\n        }, 0);\r\n    };\r\n    CompositionHelper.prototype.updateCompositionElements = function (dontRecurse) {\r\n        var _this = this;\r\n        if (!this._isComposing) {\r\n            return;\r\n        }\r\n        if (this._terminal.buffer.isCursorInViewport) {\r\n            var cellHeight = Math.ceil(this._terminal.charMeasure.height * this._terminal.options.lineHeight);\r\n            var cursorTop = this._terminal.buffer.y * cellHeight;\r\n            var cursorLeft = this._terminal.buffer.x * this._terminal.charMeasure.width;\r\n            this._compositionView.style.left = cursorLeft + 'px';\r\n            this._compositionView.style.top = cursorTop + 'px';\r\n            this._compositionView.style.height = cellHeight + 'px';\r\n            this._compositionView.style.lineHeight = cellHeight + 'px';\r\n            var compositionViewBounds = this._compositionView.getBoundingClientRect();\r\n            this._textarea.style.left = cursorLeft + 'px';\r\n            this._textarea.style.top = cursorTop + 'px';\r\n            this._textarea.style.width = compositionViewBounds.width + 'px';\r\n            this._textarea.style.height = compositionViewBounds.height + 'px';\r\n            this._textarea.style.lineHeight = compositionViewBounds.height + 'px';\r\n        }\r\n        if (!dontRecurse) {\r\n            setTimeout(function () { return _this.updateCompositionElements(true); }, 0);\r\n        }\r\n    };\r\n    CompositionHelper.prototype._clearTextareaPosition = function () {\r\n        this._textarea.style.left = '';\r\n        this._textarea.style.top = '';\r\n    };\r\n    return CompositionHelper;\r\n}());\r\nexports.CompositionHelper = CompositionHelper;\r\n\r\n\r\n\r\n},{}],7:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar C0;\r\n(function (C0) {\r\n    C0.NUL = '\\x00';\r\n    C0.SOH = '\\x01';\r\n    C0.STX = '\\x02';\r\n    C0.ETX = '\\x03';\r\n    C0.EOT = '\\x04';\r\n    C0.ENQ = '\\x05';\r\n    C0.ACK = '\\x06';\r\n    C0.BEL = '\\x07';\r\n    C0.BS = '\\x08';\r\n    C0.HT = '\\x09';\r\n    C0.LF = '\\x0a';\r\n    C0.VT = '\\x0b';\r\n    C0.FF = '\\x0c';\r\n    C0.CR = '\\x0d';\r\n    C0.SO = '\\x0e';\r\n    C0.SI = '\\x0f';\r\n    C0.DLE = '\\x10';\r\n    C0.DC1 = '\\x11';\r\n    C0.DC2 = '\\x12';\r\n    C0.DC3 = '\\x13';\r\n    C0.DC4 = '\\x14';\r\n    C0.NAK = '\\x15';\r\n    C0.SYN = '\\x16';\r\n    C0.ETB = '\\x17';\r\n    C0.CAN = '\\x18';\r\n    C0.EM = '\\x19';\r\n    C0.SUB = '\\x1a';\r\n    C0.ESC = '\\x1b';\r\n    C0.FS = '\\x1c';\r\n    C0.GS = '\\x1d';\r\n    C0.RS = '\\x1e';\r\n    C0.US = '\\x1f';\r\n    C0.SP = '\\x20';\r\n    C0.DEL = '\\x7f';\r\n})(C0 = exports.C0 || (exports.C0 = {}));\r\n\r\n\r\n\r\n},{}],8:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar EventEmitter = (function () {\r\n    function EventEmitter() {\r\n        this._events = this._events || {};\r\n    }\r\n    EventEmitter.prototype.on = function (type, listener) {\r\n        this._events[type] = this._events[type] || [];\r\n        this._events[type].push(listener);\r\n    };\r\n    EventEmitter.prototype.addDisposableListener = function (type, handler) {\r\n        var _this = this;\r\n        this.on(type, handler);\r\n        return {\r\n            dispose: function () {\r\n                if (!handler) {\r\n                    return;\r\n                }\r\n                _this.off(type, handler);\r\n                handler = null;\r\n            }\r\n        };\r\n    };\r\n    EventEmitter.prototype.off = function (type, listener) {\r\n        if (!this._events[type]) {\r\n            return;\r\n        }\r\n        var obj = this._events[type];\r\n        var i = obj.length;\r\n        while (i--) {\r\n            if (obj[i] === listener) {\r\n                obj.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.removeAllListeners = function (type) {\r\n        if (this._events[type]) {\r\n            delete this._events[type];\r\n        }\r\n    };\r\n    EventEmitter.prototype.emit = function (type) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (!this._events[type]) {\r\n            return;\r\n        }\r\n        var obj = this._events[type];\r\n        for (var i = 0; i < obj.length; i++) {\r\n            obj[i].apply(this, args);\r\n        }\r\n    };\r\n    EventEmitter.prototype.listeners = function (type) {\r\n        return this._events[type] || [];\r\n    };\r\n    EventEmitter.prototype.destroy = function () {\r\n        this._events = {};\r\n    };\r\n    return EventEmitter;\r\n}());\r\nexports.EventEmitter = EventEmitter;\r\n\r\n\r\n\r\n},{}],9:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar EscapeSequences_1 = require(\"./EscapeSequences\");\r\nvar Charsets_1 = require(\"./Charsets\");\r\nvar Buffer_1 = require(\"./Buffer\");\r\nvar Types_1 = require(\"./renderer/Types\");\r\nvar CharWidth_1 = require(\"./CharWidth\");\r\nvar InputHandler = (function () {\r\n    function InputHandler(_terminal) {\r\n        this._terminal = _terminal;\r\n    }\r\n    InputHandler.prototype.addChar = function (char, code) {\r\n        if (char >= ' ') {\r\n            var chWidth = CharWidth_1.wcwidth(code);\r\n            if (this._terminal.charset && this._terminal.charset[char]) {\r\n                char = this._terminal.charset[char];\r\n            }\r\n            if (this._terminal.options.screenReaderMode) {\r\n                this._terminal.emit('a11y.char', char);\r\n            }\r\n            var row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n            if (!chWidth && this._terminal.buffer.x) {\r\n                if (this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1]) {\r\n                    if (!this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1][Buffer_1.CHAR_DATA_WIDTH_INDEX]) {\r\n                        if (this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 2]) {\r\n                            this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 2][Buffer_1.CHAR_DATA_CHAR_INDEX] += char;\r\n                            this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 2][3] = char.charCodeAt(0);\r\n                        }\r\n                    }\r\n                    else {\r\n                        this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1][Buffer_1.CHAR_DATA_CHAR_INDEX] += char;\r\n                        this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1][3] = char.charCodeAt(0);\r\n                    }\r\n                    this._terminal.updateRange(this._terminal.buffer.y);\r\n                }\r\n                return;\r\n            }\r\n            if (this._terminal.buffer.x + chWidth - 1 >= this._terminal.cols) {\r\n                if (this._terminal.wraparoundMode) {\r\n                    this._terminal.buffer.x = 0;\r\n                    this._terminal.buffer.y++;\r\n                    if (this._terminal.buffer.y > this._terminal.buffer.scrollBottom) {\r\n                        this._terminal.buffer.y--;\r\n                        this._terminal.scroll(true);\r\n                    }\r\n                    else {\r\n                        this._terminal.buffer.lines.get(this._terminal.buffer.y).isWrapped = true;\r\n                    }\r\n                }\r\n                else {\r\n                    if (chWidth === 2) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n            if (this._terminal.insertMode) {\r\n                for (var moves = 0; moves < chWidth; ++moves) {\r\n                    var removed = this._terminal.buffer.lines.get(this._terminal.buffer.y + this._terminal.buffer.ybase).pop();\r\n                    if (removed[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0\r\n                        && this._terminal.buffer.lines.get(row)[this._terminal.cols - 2]\r\n                        && this._terminal.buffer.lines.get(row)[this._terminal.cols - 2][Buffer_1.CHAR_DATA_WIDTH_INDEX] === 2) {\r\n                        this._terminal.buffer.lines.get(row)[this._terminal.cols - 2] = [this._terminal.curAttr, ' ', 1, ' '.charCodeAt(0)];\r\n                    }\r\n                    this._terminal.buffer.lines.get(row).splice(this._terminal.buffer.x, 0, [this._terminal.curAttr, ' ', 1, ' '.charCodeAt(0)]);\r\n                }\r\n            }\r\n            this._terminal.buffer.lines.get(row)[this._terminal.buffer.x] = [this._terminal.curAttr, char, chWidth, char.charCodeAt(0)];\r\n            this._terminal.buffer.x++;\r\n            this._terminal.updateRange(this._terminal.buffer.y);\r\n            if (chWidth === 2) {\r\n                this._terminal.buffer.lines.get(row)[this._terminal.buffer.x] = [this._terminal.curAttr, '', 0, undefined];\r\n                this._terminal.buffer.x++;\r\n            }\r\n        }\r\n    };\r\n    InputHandler.prototype.bell = function () {\r\n        this._terminal.bell();\r\n    };\r\n    InputHandler.prototype.lineFeed = function () {\r\n        if (this._terminal.convertEol) {\r\n            this._terminal.buffer.x = 0;\r\n        }\r\n        this._terminal.buffer.y++;\r\n        if (this._terminal.buffer.y > this._terminal.buffer.scrollBottom) {\r\n            this._terminal.buffer.y--;\r\n            this._terminal.scroll();\r\n        }\r\n        if (this._terminal.buffer.x >= this._terminal.cols) {\r\n            this._terminal.buffer.x--;\r\n        }\r\n        this._terminal.emit('linefeed');\r\n    };\r\n    InputHandler.prototype.carriageReturn = function () {\r\n        this._terminal.buffer.x = 0;\r\n    };\r\n    InputHandler.prototype.backspace = function () {\r\n        if (this._terminal.buffer.x > 0) {\r\n            this._terminal.buffer.x--;\r\n        }\r\n    };\r\n    InputHandler.prototype.tab = function () {\r\n        var originalX = this._terminal.buffer.x;\r\n        this._terminal.buffer.x = this._terminal.buffer.nextStop();\r\n        if (this._terminal.options.screenReaderMode) {\r\n            this._terminal.emit('a11y.tab', this._terminal.buffer.x - originalX);\r\n        }\r\n    };\r\n    InputHandler.prototype.shiftOut = function () {\r\n        this._terminal.setgLevel(1);\r\n    };\r\n    InputHandler.prototype.shiftIn = function () {\r\n        this._terminal.setgLevel(0);\r\n    };\r\n    InputHandler.prototype.insertChars = function (params) {\r\n        var param = params[0];\r\n        if (param < 1)\r\n            param = 1;\r\n        var row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n        var j = this._terminal.buffer.x;\r\n        var ch = [this._terminal.eraseAttr(), ' ', 1, 32];\r\n        while (param-- && j < this._terminal.cols) {\r\n            this._terminal.buffer.lines.get(row).splice(j++, 0, ch);\r\n            this._terminal.buffer.lines.get(row).pop();\r\n        }\r\n    };\r\n    InputHandler.prototype.cursorUp = function (params) {\r\n        var param = params[0];\r\n        if (param < 1) {\r\n            param = 1;\r\n        }\r\n        this._terminal.buffer.y -= param;\r\n        if (this._terminal.buffer.y < 0) {\r\n            this._terminal.buffer.y = 0;\r\n        }\r\n    };\r\n    InputHandler.prototype.cursorDown = function (params) {\r\n        var param = params[0];\r\n        if (param < 1) {\r\n            param = 1;\r\n        }\r\n        this._terminal.buffer.y += param;\r\n        if (this._terminal.buffer.y >= this._terminal.rows) {\r\n            this._terminal.buffer.y = this._terminal.rows - 1;\r\n        }\r\n        if (this._terminal.buffer.x >= this._terminal.cols) {\r\n            this._terminal.buffer.x--;\r\n        }\r\n    };\r\n    InputHandler.prototype.cursorForward = function (params) {\r\n        var param = params[0];\r\n        if (param < 1) {\r\n            param = 1;\r\n        }\r\n        this._terminal.buffer.x += param;\r\n        if (this._terminal.buffer.x >= this._terminal.cols) {\r\n            this._terminal.buffer.x = this._terminal.cols - 1;\r\n        }\r\n    };\r\n    InputHandler.prototype.cursorBackward = function (params) {\r\n        var param = params[0];\r\n        if (param < 1) {\r\n            param = 1;\r\n        }\r\n        if (this._terminal.buffer.x >= this._terminal.cols) {\r\n            this._terminal.buffer.x--;\r\n        }\r\n        this._terminal.buffer.x -= param;\r\n        if (this._terminal.buffer.x < 0) {\r\n            this._terminal.buffer.x = 0;\r\n        }\r\n    };\r\n    InputHandler.prototype.cursorNextLine = function (params) {\r\n        var param = params[0];\r\n        if (param < 1) {\r\n            param = 1;\r\n        }\r\n        this._terminal.buffer.y += param;\r\n        if (this._terminal.buffer.y >= this._terminal.rows) {\r\n            this._terminal.buffer.y = this._terminal.rows - 1;\r\n        }\r\n        this._terminal.buffer.x = 0;\r\n    };\r\n    InputHandler.prototype.cursorPrecedingLine = function (params) {\r\n        var param = params[0];\r\n        if (param < 1) {\r\n            param = 1;\r\n        }\r\n        this._terminal.buffer.y -= param;\r\n        if (this._terminal.buffer.y < 0) {\r\n            this._terminal.buffer.y = 0;\r\n        }\r\n        this._terminal.buffer.x = 0;\r\n    };\r\n    InputHandler.prototype.cursorCharAbsolute = function (params) {\r\n        var param = params[0];\r\n        if (param < 1) {\r\n            param = 1;\r\n        }\r\n        this._terminal.buffer.x = param - 1;\r\n    };\r\n    InputHandler.prototype.cursorPosition = function (params) {\r\n        var col;\r\n        var row = params[0] - 1;\r\n        if (params.length >= 2) {\r\n            col = params[1] - 1;\r\n        }\r\n        else {\r\n            col = 0;\r\n        }\r\n        if (row < 0) {\r\n            row = 0;\r\n        }\r\n        else if (row >= this._terminal.rows) {\r\n            row = this._terminal.rows - 1;\r\n        }\r\n        if (col < 0) {\r\n            col = 0;\r\n        }\r\n        else if (col >= this._terminal.cols) {\r\n            col = this._terminal.cols - 1;\r\n        }\r\n        this._terminal.buffer.x = col;\r\n        this._terminal.buffer.y = row;\r\n    };\r\n    InputHandler.prototype.cursorForwardTab = function (params) {\r\n        var param = params[0] || 1;\r\n        while (param--) {\r\n            this._terminal.buffer.x = this._terminal.buffer.nextStop();\r\n        }\r\n    };\r\n    InputHandler.prototype.eraseInDisplay = function (params) {\r\n        var j;\r\n        switch (params[0]) {\r\n            case 0:\r\n                this._terminal.eraseRight(this._terminal.buffer.x, this._terminal.buffer.y);\r\n                j = this._terminal.buffer.y + 1;\r\n                for (; j < this._terminal.rows; j++) {\r\n                    this._terminal.eraseLine(j);\r\n                }\r\n                break;\r\n            case 1:\r\n                this._terminal.eraseLeft(this._terminal.buffer.x, this._terminal.buffer.y);\r\n                j = this._terminal.buffer.y;\r\n                while (j--) {\r\n                    this._terminal.eraseLine(j);\r\n                }\r\n                break;\r\n            case 2:\r\n                j = this._terminal.rows;\r\n                while (j--)\r\n                    this._terminal.eraseLine(j);\r\n                break;\r\n            case 3:\r\n                var scrollBackSize = this._terminal.buffer.lines.length - this._terminal.rows;\r\n                if (scrollBackSize > 0) {\r\n                    this._terminal.buffer.lines.trimStart(scrollBackSize);\r\n                    this._terminal.buffer.ybase = Math.max(this._terminal.buffer.ybase - scrollBackSize, 0);\r\n                    this._terminal.buffer.ydisp = Math.max(this._terminal.buffer.ydisp - scrollBackSize, 0);\r\n                    this._terminal.emit('scroll', 0);\r\n                }\r\n                break;\r\n        }\r\n    };\r\n    InputHandler.prototype.eraseInLine = function (params) {\r\n        switch (params[0]) {\r\n            case 0:\r\n                this._terminal.eraseRight(this._terminal.buffer.x, this._terminal.buffer.y);\r\n                break;\r\n            case 1:\r\n                this._terminal.eraseLeft(this._terminal.buffer.x, this._terminal.buffer.y);\r\n                break;\r\n            case 2:\r\n                this._terminal.eraseLine(this._terminal.buffer.y);\r\n                break;\r\n        }\r\n    };\r\n    InputHandler.prototype.insertLines = function (params) {\r\n        var param = params[0];\r\n        if (param < 1) {\r\n            param = 1;\r\n        }\r\n        var row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n        var scrollBottomRowsOffset = this._terminal.rows - 1 - this._terminal.buffer.scrollBottom;\r\n        var scrollBottomAbsolute = this._terminal.rows - 1 + this._terminal.buffer.ybase - scrollBottomRowsOffset + 1;\r\n        while (param--) {\r\n            this._terminal.buffer.lines.splice(scrollBottomAbsolute - 1, 1);\r\n            this._terminal.buffer.lines.splice(row, 0, this._terminal.blankLine(true));\r\n        }\r\n        this._terminal.updateRange(this._terminal.buffer.y);\r\n        this._terminal.updateRange(this._terminal.buffer.scrollBottom);\r\n    };\r\n    InputHandler.prototype.deleteLines = function (params) {\r\n        var param = params[0];\r\n        if (param < 1) {\r\n            param = 1;\r\n        }\r\n        var row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n        var j;\r\n        j = this._terminal.rows - 1 - this._terminal.buffer.scrollBottom;\r\n        j = this._terminal.rows - 1 + this._terminal.buffer.ybase - j;\r\n        while (param--) {\r\n            this._terminal.buffer.lines.splice(row, 1);\r\n            this._terminal.buffer.lines.splice(j, 0, this._terminal.blankLine(true));\r\n        }\r\n        this._terminal.updateRange(this._terminal.buffer.y);\r\n        this._terminal.updateRange(this._terminal.buffer.scrollBottom);\r\n    };\r\n    InputHandler.prototype.deleteChars = function (params) {\r\n        var param = params[0];\r\n        if (param < 1) {\r\n            param = 1;\r\n        }\r\n        var row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n        var ch = [this._terminal.eraseAttr(), ' ', 1, 32];\r\n        while (param--) {\r\n            this._terminal.buffer.lines.get(row).splice(this._terminal.buffer.x, 1);\r\n            this._terminal.buffer.lines.get(row).push(ch);\r\n        }\r\n        this._terminal.updateRange(this._terminal.buffer.y);\r\n    };\r\n    InputHandler.prototype.scrollUp = function (params) {\r\n        var param = params[0] || 1;\r\n        while (param--) {\r\n            this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollTop, 1);\r\n            this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollBottom, 0, this._terminal.blankLine());\r\n        }\r\n        this._terminal.updateRange(this._terminal.buffer.scrollTop);\r\n        this._terminal.updateRange(this._terminal.buffer.scrollBottom);\r\n    };\r\n    InputHandler.prototype.scrollDown = function (params) {\r\n        var param = params[0] || 1;\r\n        while (param--) {\r\n            this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollBottom, 1);\r\n            this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollTop, 0, this._terminal.blankLine());\r\n        }\r\n        this._terminal.updateRange(this._terminal.buffer.scrollTop);\r\n        this._terminal.updateRange(this._terminal.buffer.scrollBottom);\r\n    };\r\n    InputHandler.prototype.eraseChars = function (params) {\r\n        var param = params[0];\r\n        if (param < 1) {\r\n            param = 1;\r\n        }\r\n        var row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n        var j = this._terminal.buffer.x;\r\n        var ch = [this._terminal.eraseAttr(), ' ', 1, 32];\r\n        while (param-- && j < this._terminal.cols) {\r\n            this._terminal.buffer.lines.get(row)[j++] = ch;\r\n        }\r\n    };\r\n    InputHandler.prototype.cursorBackwardTab = function (params) {\r\n        var param = params[0] || 1;\r\n        while (param--) {\r\n            this._terminal.buffer.x = this._terminal.buffer.prevStop();\r\n        }\r\n    };\r\n    InputHandler.prototype.charPosAbsolute = function (params) {\r\n        var param = params[0];\r\n        if (param < 1) {\r\n            param = 1;\r\n        }\r\n        this._terminal.buffer.x = param - 1;\r\n        if (this._terminal.buffer.x >= this._terminal.cols) {\r\n            this._terminal.buffer.x = this._terminal.cols - 1;\r\n        }\r\n    };\r\n    InputHandler.prototype.HPositionRelative = function (params) {\r\n        var param = params[0];\r\n        if (param < 1) {\r\n            param = 1;\r\n        }\r\n        this._terminal.buffer.x += param;\r\n        if (this._terminal.buffer.x >= this._terminal.cols) {\r\n            this._terminal.buffer.x = this._terminal.cols - 1;\r\n        }\r\n    };\r\n    InputHandler.prototype.repeatPrecedingCharacter = function (params) {\r\n        var param = params[0] || 1;\r\n        var line = this._terminal.buffer.lines.get(this._terminal.buffer.ybase + this._terminal.buffer.y);\r\n        var ch = line[this._terminal.buffer.x - 1] || [this._terminal.defAttr, ' ', 1, 32];\r\n        while (param--) {\r\n            line[this._terminal.buffer.x++] = ch;\r\n        }\r\n    };\r\n    InputHandler.prototype.sendDeviceAttributes = function (params) {\r\n        if (params[0] > 0) {\r\n            return;\r\n        }\r\n        if (!this._terminal.prefix) {\r\n            if (this._terminal.is('xterm') || this._terminal.is('rxvt-unicode') || this._terminal.is('screen')) {\r\n                this._terminal.send(EscapeSequences_1.C0.ESC + '[?1;2c');\r\n            }\r\n            else if (this._terminal.is('linux')) {\r\n                this._terminal.send(EscapeSequences_1.C0.ESC + '[?6c');\r\n            }\r\n        }\r\n        else if (this._terminal.prefix === '>') {\r\n            if (this._terminal.is('xterm')) {\r\n                this._terminal.send(EscapeSequences_1.C0.ESC + '[>0;276;0c');\r\n            }\r\n            else if (this._terminal.is('rxvt-unicode')) {\r\n                this._terminal.send(EscapeSequences_1.C0.ESC + '[>85;95;0c');\r\n            }\r\n            else if (this._terminal.is('linux')) {\r\n                this._terminal.send(params[0] + 'c');\r\n            }\r\n            else if (this._terminal.is('screen')) {\r\n                this._terminal.send(EscapeSequences_1.C0.ESC + '[>83;40003;0c');\r\n            }\r\n        }\r\n    };\r\n    InputHandler.prototype.linePosAbsolute = function (params) {\r\n        var param = params[0];\r\n        if (param < 1) {\r\n            param = 1;\r\n        }\r\n        this._terminal.buffer.y = param - 1;\r\n        if (this._terminal.buffer.y >= this._terminal.rows) {\r\n            this._terminal.buffer.y = this._terminal.rows - 1;\r\n        }\r\n    };\r\n    InputHandler.prototype.VPositionRelative = function (params) {\r\n        var param = params[0];\r\n        if (param < 1) {\r\n            param = 1;\r\n        }\r\n        this._terminal.buffer.y += param;\r\n        if (this._terminal.buffer.y >= this._terminal.rows) {\r\n            this._terminal.buffer.y = this._terminal.rows - 1;\r\n        }\r\n        if (this._terminal.buffer.x >= this._terminal.cols) {\r\n            this._terminal.buffer.x--;\r\n        }\r\n    };\r\n    InputHandler.prototype.HVPosition = function (params) {\r\n        if (params[0] < 1)\r\n            params[0] = 1;\r\n        if (params[1] < 1)\r\n            params[1] = 1;\r\n        this._terminal.buffer.y = params[0] - 1;\r\n        if (this._terminal.buffer.y >= this._terminal.rows) {\r\n            this._terminal.buffer.y = this._terminal.rows - 1;\r\n        }\r\n        this._terminal.buffer.x = params[1] - 1;\r\n        if (this._terminal.buffer.x >= this._terminal.cols) {\r\n            this._terminal.buffer.x = this._terminal.cols - 1;\r\n        }\r\n    };\r\n    InputHandler.prototype.tabClear = function (params) {\r\n        var param = params[0];\r\n        if (param <= 0) {\r\n            delete this._terminal.buffer.tabs[this._terminal.buffer.x];\r\n        }\r\n        else if (param === 3) {\r\n            this._terminal.buffer.tabs = {};\r\n        }\r\n    };\r\n    InputHandler.prototype.setMode = function (params) {\r\n        if (params.length > 1) {\r\n            for (var i = 0; i < params.length; i++) {\r\n                this.setMode([params[i]]);\r\n            }\r\n            return;\r\n        }\r\n        if (!this._terminal.prefix) {\r\n            switch (params[0]) {\r\n                case 4:\r\n                    this._terminal.insertMode = true;\r\n                    break;\r\n                case 20:\r\n                    break;\r\n            }\r\n        }\r\n        else if (this._terminal.prefix === '?') {\r\n            switch (params[0]) {\r\n                case 1:\r\n                    this._terminal.applicationCursor = true;\r\n                    break;\r\n                case 2:\r\n                    this._terminal.setgCharset(0, Charsets_1.DEFAULT_CHARSET);\r\n                    this._terminal.setgCharset(1, Charsets_1.DEFAULT_CHARSET);\r\n                    this._terminal.setgCharset(2, Charsets_1.DEFAULT_CHARSET);\r\n                    this._terminal.setgCharset(3, Charsets_1.DEFAULT_CHARSET);\r\n                    break;\r\n                case 3:\r\n                    this._terminal.savedCols = this._terminal.cols;\r\n                    this._terminal.resize(132, this._terminal.rows);\r\n                    break;\r\n                case 6:\r\n                    this._terminal.originMode = true;\r\n                    break;\r\n                case 7:\r\n                    this._terminal.wraparoundMode = true;\r\n                    break;\r\n                case 12:\r\n                    break;\r\n                case 66:\r\n                    this._terminal.log('Serial port requested application keypad.');\r\n                    this._terminal.applicationKeypad = true;\r\n                    this._terminal.viewport.syncScrollArea();\r\n                    break;\r\n                case 9:\r\n                case 1000:\r\n                case 1002:\r\n                case 1003:\r\n                    this._terminal.x10Mouse = params[0] === 9;\r\n                    this._terminal.vt200Mouse = params[0] === 1000;\r\n                    this._terminal.normalMouse = params[0] > 1000;\r\n                    this._terminal.mouseEvents = true;\r\n                    this._terminal.element.classList.add('enable-mouse-events');\r\n                    this._terminal.selectionManager.disable();\r\n                    this._terminal.log('Binding to mouse events.');\r\n                    break;\r\n                case 1004:\r\n                    this._terminal.sendFocus = true;\r\n                    break;\r\n                case 1005:\r\n                    this._terminal.utfMouse = true;\r\n                    break;\r\n                case 1006:\r\n                    this._terminal.sgrMouse = true;\r\n                    break;\r\n                case 1015:\r\n                    this._terminal.urxvtMouse = true;\r\n                    break;\r\n                case 25:\r\n                    this._terminal.cursorHidden = false;\r\n                    break;\r\n                case 1049:\r\n                case 47:\r\n                case 1047:\r\n                    this._terminal.buffers.activateAltBuffer();\r\n                    this._terminal.viewport.syncScrollArea();\r\n                    this._terminal.showCursor();\r\n                    break;\r\n                case 2004:\r\n                    this._terminal.bracketedPasteMode = true;\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    InputHandler.prototype.resetMode = function (params) {\r\n        if (params.length > 1) {\r\n            for (var i = 0; i < params.length; i++) {\r\n                this.resetMode([params[i]]);\r\n            }\r\n            return;\r\n        }\r\n        if (!this._terminal.prefix) {\r\n            switch (params[0]) {\r\n                case 4:\r\n                    this._terminal.insertMode = false;\r\n                    break;\r\n                case 20:\r\n                    break;\r\n            }\r\n        }\r\n        else if (this._terminal.prefix === '?') {\r\n            switch (params[0]) {\r\n                case 1:\r\n                    this._terminal.applicationCursor = false;\r\n                    break;\r\n                case 3:\r\n                    if (this._terminal.cols === 132 && this._terminal.savedCols) {\r\n                        this._terminal.resize(this._terminal.savedCols, this._terminal.rows);\r\n                    }\r\n                    delete this._terminal.savedCols;\r\n                    break;\r\n                case 6:\r\n                    this._terminal.originMode = false;\r\n                    break;\r\n                case 7:\r\n                    this._terminal.wraparoundMode = false;\r\n                    break;\r\n                case 12:\r\n                    break;\r\n                case 66:\r\n                    this._terminal.log('Switching back to normal keypad.');\r\n                    this._terminal.applicationKeypad = false;\r\n                    this._terminal.viewport.syncScrollArea();\r\n                    break;\r\n                case 9:\r\n                case 1000:\r\n                case 1002:\r\n                case 1003:\r\n                    this._terminal.x10Mouse = false;\r\n                    this._terminal.vt200Mouse = false;\r\n                    this._terminal.normalMouse = false;\r\n                    this._terminal.mouseEvents = false;\r\n                    this._terminal.element.classList.remove('enable-mouse-events');\r\n                    this._terminal.selectionManager.enable();\r\n                    break;\r\n                case 1004:\r\n                    this._terminal.sendFocus = false;\r\n                    break;\r\n                case 1005:\r\n                    this._terminal.utfMouse = false;\r\n                    break;\r\n                case 1006:\r\n                    this._terminal.sgrMouse = false;\r\n                    break;\r\n                case 1015:\r\n                    this._terminal.urxvtMouse = false;\r\n                    break;\r\n                case 25:\r\n                    this._terminal.cursorHidden = true;\r\n                    break;\r\n                case 1049:\r\n                case 47:\r\n                case 1047:\r\n                    this._terminal.buffers.activateNormalBuffer();\r\n                    this._terminal.refresh(0, this._terminal.rows - 1);\r\n                    this._terminal.viewport.syncScrollArea();\r\n                    this._terminal.showCursor();\r\n                    break;\r\n                case 2004:\r\n                    this._terminal.bracketedPasteMode = false;\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    InputHandler.prototype.charAttributes = function (params) {\r\n        if (params.length === 1 && params[0] === 0) {\r\n            this._terminal.curAttr = this._terminal.defAttr;\r\n            return;\r\n        }\r\n        var l = params.length;\r\n        var flags = this._terminal.curAttr >> 18;\r\n        var fg = (this._terminal.curAttr >> 9) & 0x1ff;\r\n        var bg = this._terminal.curAttr & 0x1ff;\r\n        var p;\r\n        for (var i = 0; i < l; i++) {\r\n            p = params[i];\r\n            if (p >= 30 && p <= 37) {\r\n                fg = p - 30;\r\n            }\r\n            else if (p >= 40 && p <= 47) {\r\n                bg = p - 40;\r\n            }\r\n            else if (p >= 90 && p <= 97) {\r\n                p += 8;\r\n                fg = p - 90;\r\n            }\r\n            else if (p >= 100 && p <= 107) {\r\n                p += 8;\r\n                bg = p - 100;\r\n            }\r\n            else if (p === 0) {\r\n                flags = this._terminal.defAttr >> 18;\r\n                fg = (this._terminal.defAttr >> 9) & 0x1ff;\r\n                bg = this._terminal.defAttr & 0x1ff;\r\n            }\r\n            else if (p === 1) {\r\n                flags |= Types_1.FLAGS.BOLD;\r\n            }\r\n            else if (p === 4) {\r\n                flags |= Types_1.FLAGS.UNDERLINE;\r\n            }\r\n            else if (p === 5) {\r\n                flags |= Types_1.FLAGS.BLINK;\r\n            }\r\n            else if (p === 7) {\r\n                flags |= Types_1.FLAGS.INVERSE;\r\n            }\r\n            else if (p === 8) {\r\n                flags |= Types_1.FLAGS.INVISIBLE;\r\n            }\r\n            else if (p === 2) {\r\n                flags |= Types_1.FLAGS.DIM;\r\n            }\r\n            else if (p === 22) {\r\n                flags &= ~Types_1.FLAGS.BOLD;\r\n                flags &= ~Types_1.FLAGS.DIM;\r\n            }\r\n            else if (p === 24) {\r\n                flags &= ~Types_1.FLAGS.UNDERLINE;\r\n            }\r\n            else if (p === 25) {\r\n                flags &= ~Types_1.FLAGS.BLINK;\r\n            }\r\n            else if (p === 27) {\r\n                flags &= ~Types_1.FLAGS.INVERSE;\r\n            }\r\n            else if (p === 28) {\r\n                flags &= ~Types_1.FLAGS.INVISIBLE;\r\n            }\r\n            else if (p === 39) {\r\n                fg = (this._terminal.defAttr >> 9) & 0x1ff;\r\n            }\r\n            else if (p === 49) {\r\n                bg = this._terminal.defAttr & 0x1ff;\r\n            }\r\n            else if (p === 38) {\r\n                if (params[i + 1] === 2) {\r\n                    i += 2;\r\n                    fg = this._terminal.matchColor(params[i] & 0xff, params[i + 1] & 0xff, params[i + 2] & 0xff);\r\n                    if (fg === -1)\r\n                        fg = 0x1ff;\r\n                    i += 2;\r\n                }\r\n                else if (params[i + 1] === 5) {\r\n                    i += 2;\r\n                    p = params[i] & 0xff;\r\n                    fg = p;\r\n                }\r\n            }\r\n            else if (p === 48) {\r\n                if (params[i + 1] === 2) {\r\n                    i += 2;\r\n                    bg = this._terminal.matchColor(params[i] & 0xff, params[i + 1] & 0xff, params[i + 2] & 0xff);\r\n                    if (bg === -1)\r\n                        bg = 0x1ff;\r\n                    i += 2;\r\n                }\r\n                else if (params[i + 1] === 5) {\r\n                    i += 2;\r\n                    p = params[i] & 0xff;\r\n                    bg = p;\r\n                }\r\n            }\r\n            else if (p === 100) {\r\n                fg = (this._terminal.defAttr >> 9) & 0x1ff;\r\n                bg = this._terminal.defAttr & 0x1ff;\r\n            }\r\n            else {\r\n                this._terminal.error('Unknown SGR attribute: %d.', p);\r\n            }\r\n        }\r\n        this._terminal.curAttr = (flags << 18) | (fg << 9) | bg;\r\n    };\r\n    InputHandler.prototype.deviceStatus = function (params) {\r\n        if (!this._terminal.prefix) {\r\n            switch (params[0]) {\r\n                case 5:\r\n                    this._terminal.send(EscapeSequences_1.C0.ESC + '[0n');\r\n                    break;\r\n                case 6:\r\n                    this._terminal.send(EscapeSequences_1.C0.ESC + '['\r\n                        + (this._terminal.buffer.y + 1)\r\n                        + ';'\r\n                        + (this._terminal.buffer.x + 1)\r\n                        + 'R');\r\n                    break;\r\n            }\r\n        }\r\n        else if (this._terminal.prefix === '?') {\r\n            switch (params[0]) {\r\n                case 6:\r\n                    this._terminal.send(EscapeSequences_1.C0.ESC + '[?'\r\n                        + (this._terminal.buffer.y + 1)\r\n                        + ';'\r\n                        + (this._terminal.buffer.x + 1)\r\n                        + 'R');\r\n                    break;\r\n                case 15:\r\n                    break;\r\n                case 25:\r\n                    break;\r\n                case 26:\r\n                    break;\r\n                case 53:\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    InputHandler.prototype.softReset = function (params) {\r\n        this._terminal.cursorHidden = false;\r\n        this._terminal.insertMode = false;\r\n        this._terminal.originMode = false;\r\n        this._terminal.wraparoundMode = true;\r\n        this._terminal.applicationKeypad = false;\r\n        this._terminal.viewport.syncScrollArea();\r\n        this._terminal.applicationCursor = false;\r\n        this._terminal.buffer.scrollTop = 0;\r\n        this._terminal.buffer.scrollBottom = this._terminal.rows - 1;\r\n        this._terminal.curAttr = this._terminal.defAttr;\r\n        this._terminal.buffer.x = this._terminal.buffer.y = 0;\r\n        this._terminal.charset = null;\r\n        this._terminal.glevel = 0;\r\n        this._terminal.charsets = [null];\r\n    };\r\n    InputHandler.prototype.setCursorStyle = function (params) {\r\n        var param = params[0] < 1 ? 1 : params[0];\r\n        switch (param) {\r\n            case 1:\r\n            case 2:\r\n                this._terminal.setOption('cursorStyle', 'block');\r\n                break;\r\n            case 3:\r\n            case 4:\r\n                this._terminal.setOption('cursorStyle', 'underline');\r\n                break;\r\n            case 5:\r\n            case 6:\r\n                this._terminal.setOption('cursorStyle', 'bar');\r\n                break;\r\n        }\r\n        var isBlinking = param % 2 === 1;\r\n        this._terminal.setOption('cursorBlink', isBlinking);\r\n    };\r\n    InputHandler.prototype.setScrollRegion = function (params) {\r\n        if (this._terminal.prefix)\r\n            return;\r\n        this._terminal.buffer.scrollTop = (params[0] || 1) - 1;\r\n        this._terminal.buffer.scrollBottom = (params[1] && params[1] <= this._terminal.rows ? params[1] : this._terminal.rows) - 1;\r\n        this._terminal.buffer.x = 0;\r\n        this._terminal.buffer.y = 0;\r\n    };\r\n    InputHandler.prototype.saveCursor = function (params) {\r\n        this._terminal.buffer.savedX = this._terminal.buffer.x;\r\n        this._terminal.buffer.savedY = this._terminal.buffer.y;\r\n    };\r\n    InputHandler.prototype.restoreCursor = function (params) {\r\n        this._terminal.buffer.x = this._terminal.buffer.savedX || 0;\r\n        this._terminal.buffer.y = this._terminal.buffer.savedY || 0;\r\n    };\r\n    return InputHandler;\r\n}());\r\nexports.InputHandler = InputHandler;\r\n\r\n\r\n\r\n},{\"./Buffer\":2,\"./CharWidth\":4,\"./Charsets\":5,\"./EscapeSequences\":7,\"./renderer/Types\":30}],10:[function(require,module,exports){\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Types_1 = require(\"./Types\");\r\nvar MouseZoneManager_1 = require(\"./input/MouseZoneManager\");\r\nvar EventEmitter_1 = require(\"./EventEmitter\");\r\nvar Linkifier = (function (_super) {\r\n    __extends(Linkifier, _super);\r\n    function Linkifier(_terminal) {\r\n        var _this = _super.call(this) || this;\r\n        _this._terminal = _terminal;\r\n        _this._linkMatchers = [];\r\n        _this._nextLinkMatcherId = 0;\r\n        _this._rowsToLinkify = {\r\n            start: null,\r\n            end: null\r\n        };\r\n        return _this;\r\n    }\r\n    Linkifier.prototype.attachToDom = function (mouseZoneManager) {\r\n        this._mouseZoneManager = mouseZoneManager;\r\n    };\r\n    Linkifier.prototype.linkifyRows = function (start, end) {\r\n        var _this = this;\r\n        if (!this._mouseZoneManager) {\r\n            return;\r\n        }\r\n        if (this._rowsToLinkify.start === null) {\r\n            this._rowsToLinkify.start = start;\r\n            this._rowsToLinkify.end = end;\r\n        }\r\n        else {\r\n            this._rowsToLinkify.start = Math.min(this._rowsToLinkify.start, start);\r\n            this._rowsToLinkify.end = Math.max(this._rowsToLinkify.end, end);\r\n        }\r\n        this._mouseZoneManager.clearAll(start, end);\r\n        if (this._rowsTimeoutId) {\r\n            clearTimeout(this._rowsTimeoutId);\r\n        }\r\n        this._rowsTimeoutId = setTimeout(function () { return _this._linkifyRows(); }, Linkifier.TIME_BEFORE_LINKIFY);\r\n    };\r\n    Linkifier.prototype._linkifyRows = function () {\r\n        this._rowsTimeoutId = null;\r\n        for (var i = this._rowsToLinkify.start; i <= this._rowsToLinkify.end; i++) {\r\n            this._linkifyRow(i);\r\n        }\r\n        this._rowsToLinkify.start = null;\r\n        this._rowsToLinkify.end = null;\r\n    };\r\n    Linkifier.prototype.registerLinkMatcher = function (regex, handler, options) {\r\n        if (options === void 0) { options = {}; }\r\n        if (!handler) {\r\n            throw new Error('handler must be defined');\r\n        }\r\n        var matcher = {\r\n            id: this._nextLinkMatcherId++,\r\n            regex: regex,\r\n            handler: handler,\r\n            matchIndex: options.matchIndex,\r\n            validationCallback: options.validationCallback,\r\n            hoverTooltipCallback: options.tooltipCallback,\r\n            hoverLeaveCallback: options.leaveCallback,\r\n            willLinkActivate: options.willLinkActivate,\r\n            priority: options.priority || 0\r\n        };\r\n        this._addLinkMatcherToList(matcher);\r\n        return matcher.id;\r\n    };\r\n    Linkifier.prototype._addLinkMatcherToList = function (matcher) {\r\n        if (this._linkMatchers.length === 0) {\r\n            this._linkMatchers.push(matcher);\r\n            return;\r\n        }\r\n        for (var i = this._linkMatchers.length - 1; i >= 0; i--) {\r\n            if (matcher.priority <= this._linkMatchers[i].priority) {\r\n                this._linkMatchers.splice(i + 1, 0, matcher);\r\n                return;\r\n            }\r\n        }\r\n        this._linkMatchers.splice(0, 0, matcher);\r\n    };\r\n    Linkifier.prototype.deregisterLinkMatcher = function (matcherId) {\r\n        for (var i = 0; i < this._linkMatchers.length; i++) {\r\n            if (this._linkMatchers[i].id === matcherId) {\r\n                this._linkMatchers.splice(i, 1);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Linkifier.prototype._linkifyRow = function (rowIndex) {\r\n        var absoluteRowIndex = this._terminal.buffer.ydisp + rowIndex;\r\n        if (absoluteRowIndex >= this._terminal.buffer.lines.length) {\r\n            return;\r\n        }\r\n        if (this._terminal.buffer.lines.get(absoluteRowIndex).isWrapped) {\r\n            if (rowIndex !== 0) {\r\n                return;\r\n            }\r\n            do {\r\n                rowIndex--;\r\n                absoluteRowIndex--;\r\n            } while (this._terminal.buffer.lines.get(absoluteRowIndex).isWrapped);\r\n        }\r\n        var text = this._terminal.buffer.translateBufferLineToString(absoluteRowIndex, false);\r\n        var currentIndex = absoluteRowIndex + 1;\r\n        while (currentIndex < this._terminal.buffer.lines.length &&\r\n            this._terminal.buffer.lines.get(currentIndex).isWrapped) {\r\n            text += this._terminal.buffer.translateBufferLineToString(currentIndex++, false);\r\n        }\r\n        for (var i = 0; i < this._linkMatchers.length; i++) {\r\n            this._doLinkifyRow(rowIndex, text, this._linkMatchers[i]);\r\n        }\r\n    };\r\n    Linkifier.prototype._doLinkifyRow = function (rowIndex, text, matcher, offset) {\r\n        var _this = this;\r\n        if (offset === void 0) { offset = 0; }\r\n        var match = text.match(matcher.regex);\r\n        if (!match || match.length === 0) {\r\n            return;\r\n        }\r\n        var uri = match[typeof matcher.matchIndex !== 'number' ? 0 : matcher.matchIndex];\r\n        var index = text.indexOf(uri);\r\n        if (matcher.validationCallback) {\r\n            matcher.validationCallback(uri, function (isValid) {\r\n                if (_this._rowsTimeoutId) {\r\n                    return;\r\n                }\r\n                if (isValid) {\r\n                    _this._addLink(offset + index, rowIndex, uri, matcher);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this._addLink(offset + index, rowIndex, uri, matcher);\r\n        }\r\n        var remainingStartIndex = index + uri.length;\r\n        var remainingText = text.substr(remainingStartIndex);\r\n        if (remainingText.length > 0) {\r\n            this._doLinkifyRow(rowIndex, remainingText, matcher, offset + remainingStartIndex);\r\n        }\r\n    };\r\n    Linkifier.prototype._addLink = function (x, y, uri, matcher) {\r\n        var _this = this;\r\n        var x1 = x % this._terminal.cols;\r\n        var y1 = y + Math.floor(x / this._terminal.cols);\r\n        var x2 = (x1 + uri.length) % this._terminal.cols;\r\n        var y2 = y1 + Math.floor((x1 + uri.length) / this._terminal.cols);\r\n        if (x2 === 0) {\r\n            x2 = this._terminal.cols;\r\n            y2--;\r\n        }\r\n        this._mouseZoneManager.add(new MouseZoneManager_1.MouseZone(x1 + 1, y1 + 1, x2 + 1, y2 + 1, function (e) {\r\n            if (matcher.handler) {\r\n                return matcher.handler(e, uri);\r\n            }\r\n            window.open(uri, '_blank');\r\n        }, function (e) {\r\n            _this.emit(Types_1.LinkHoverEventTypes.HOVER, _this._createLinkHoverEvent(x1, y1, x2, y2));\r\n            _this._terminal.element.classList.add('xterm-cursor-pointer');\r\n        }, function (e) {\r\n            _this.emit(Types_1.LinkHoverEventTypes.TOOLTIP, _this._createLinkHoverEvent(x1, y1, x2, y2));\r\n            if (matcher.hoverTooltipCallback) {\r\n                matcher.hoverTooltipCallback(e, uri);\r\n            }\r\n        }, function () {\r\n            _this.emit(Types_1.LinkHoverEventTypes.LEAVE, _this._createLinkHoverEvent(x1, y1, x2, y2));\r\n            _this._terminal.element.classList.remove('xterm-cursor-pointer');\r\n            if (matcher.hoverLeaveCallback) {\r\n                matcher.hoverLeaveCallback();\r\n            }\r\n        }, function (e) {\r\n            if (matcher.willLinkActivate) {\r\n                return matcher.willLinkActivate(e, uri);\r\n            }\r\n            return true;\r\n        }));\r\n    };\r\n    Linkifier.prototype._createLinkHoverEvent = function (x1, y1, x2, y2) {\r\n        return { x1: x1, y1: y1, x2: x2, y2: y2, cols: this._terminal.cols };\r\n    };\r\n    Linkifier.TIME_BEFORE_LINKIFY = 200;\r\n    return Linkifier;\r\n}(EventEmitter_1.EventEmitter));\r\nexports.Linkifier = Linkifier;\r\n\r\n\r\n\r\n},{\"./EventEmitter\":8,\"./Types\":17,\"./input/MouseZoneManager\":21}],11:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar EscapeSequences_1 = require(\"./EscapeSequences\");\r\nvar Charsets_1 = require(\"./Charsets\");\r\nvar normalStateHandler = {};\r\nnormalStateHandler[EscapeSequences_1.C0.BEL] = function (parser, handler) { return handler.bell(); };\r\nnormalStateHandler[EscapeSequences_1.C0.LF] = function (parser, handler) { return handler.lineFeed(); };\r\nnormalStateHandler[EscapeSequences_1.C0.VT] = normalStateHandler[EscapeSequences_1.C0.LF];\r\nnormalStateHandler[EscapeSequences_1.C0.FF] = normalStateHandler[EscapeSequences_1.C0.LF];\r\nnormalStateHandler[EscapeSequences_1.C0.CR] = function (parser, handler) { return handler.carriageReturn(); };\r\nnormalStateHandler[EscapeSequences_1.C0.BS] = function (parser, handler) { return handler.backspace(); };\r\nnormalStateHandler[EscapeSequences_1.C0.HT] = function (parser, handler) { return handler.tab(); };\r\nnormalStateHandler[EscapeSequences_1.C0.SO] = function (parser, handler) { return handler.shiftOut(); };\r\nnormalStateHandler[EscapeSequences_1.C0.SI] = function (parser, handler) { return handler.shiftIn(); };\r\nnormalStateHandler[EscapeSequences_1.C0.ESC] = function (parser, handler) { return parser.setState(ParserState.ESCAPED); };\r\nvar escapedStateHandler = {};\r\nescapedStateHandler['['] = function (parser, terminal) {\r\n    terminal.params = [];\r\n    terminal.currentParam = 0;\r\n    parser.setState(ParserState.CSI_PARAM);\r\n};\r\nescapedStateHandler[']'] = function (parser, terminal) {\r\n    terminal.params = [];\r\n    terminal.currentParam = 0;\r\n    parser.setState(ParserState.OSC);\r\n};\r\nescapedStateHandler['P'] = function (parser, terminal) {\r\n    terminal.params = [];\r\n    terminal.currentParam = 0;\r\n    parser.setState(ParserState.DCS);\r\n};\r\nescapedStateHandler['_'] = function (parser, terminal) {\r\n    parser.setState(ParserState.IGNORE);\r\n};\r\nescapedStateHandler['^'] = function (parser, terminal) {\r\n    parser.setState(ParserState.IGNORE);\r\n};\r\nescapedStateHandler['c'] = function (parser, terminal) {\r\n    terminal.reset();\r\n};\r\nescapedStateHandler['E'] = function (parser, terminal) {\r\n    terminal.buffer.x = 0;\r\n    terminal.index();\r\n    parser.setState(ParserState.NORMAL);\r\n};\r\nescapedStateHandler['D'] = function (parser, terminal) {\r\n    terminal.index();\r\n    parser.setState(ParserState.NORMAL);\r\n};\r\nescapedStateHandler['M'] = function (parser, terminal) {\r\n    terminal.reverseIndex();\r\n    parser.setState(ParserState.NORMAL);\r\n};\r\nescapedStateHandler['%'] = function (parser, terminal) {\r\n    terminal.setgLevel(0);\r\n    terminal.setgCharset(0, Charsets_1.DEFAULT_CHARSET);\r\n    parser.setState(ParserState.NORMAL);\r\n    parser.skipNextChar();\r\n};\r\nescapedStateHandler[EscapeSequences_1.C0.CAN] = function (parser) { return parser.setState(ParserState.NORMAL); };\r\nvar csiParamStateHandler = {};\r\ncsiParamStateHandler['?'] = function (parser) { return parser.setPrefix('?'); };\r\ncsiParamStateHandler['>'] = function (parser) { return parser.setPrefix('>'); };\r\ncsiParamStateHandler['!'] = function (parser) { return parser.setPrefix('!'); };\r\ncsiParamStateHandler['0'] = function (parser) { return parser.setParam(parser.getParam() * 10); };\r\ncsiParamStateHandler['1'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 1); };\r\ncsiParamStateHandler['2'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 2); };\r\ncsiParamStateHandler['3'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 3); };\r\ncsiParamStateHandler['4'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 4); };\r\ncsiParamStateHandler['5'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 5); };\r\ncsiParamStateHandler['6'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 6); };\r\ncsiParamStateHandler['7'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 7); };\r\ncsiParamStateHandler['8'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 8); };\r\ncsiParamStateHandler['9'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 9); };\r\ncsiParamStateHandler['$'] = function (parser) { return parser.setPostfix('$'); };\r\ncsiParamStateHandler['\"'] = function (parser) { return parser.setPostfix('\"'); };\r\ncsiParamStateHandler[' '] = function (parser) { return parser.setPostfix(' '); };\r\ncsiParamStateHandler['\\''] = function (parser) { return parser.setPostfix('\\''); };\r\ncsiParamStateHandler[';'] = function (parser) { return parser.finalizeParam(); };\r\ncsiParamStateHandler[EscapeSequences_1.C0.CAN] = function (parser) { return parser.setState(ParserState.NORMAL); };\r\nvar csiStateHandler = {};\r\ncsiStateHandler['@'] = function (handler, params, prefix) { return handler.insertChars(params); };\r\ncsiStateHandler['A'] = function (handler, params, prefix) { return handler.cursorUp(params); };\r\ncsiStateHandler['B'] = function (handler, params, prefix) { return handler.cursorDown(params); };\r\ncsiStateHandler['C'] = function (handler, params, prefix) { return handler.cursorForward(params); };\r\ncsiStateHandler['D'] = function (handler, params, prefix) { return handler.cursorBackward(params); };\r\ncsiStateHandler['E'] = function (handler, params, prefix) { return handler.cursorNextLine(params); };\r\ncsiStateHandler['F'] = function (handler, params, prefix) { return handler.cursorPrecedingLine(params); };\r\ncsiStateHandler['G'] = function (handler, params, prefix) { return handler.cursorCharAbsolute(params); };\r\ncsiStateHandler['H'] = function (handler, params, prefix) { return handler.cursorPosition(params); };\r\ncsiStateHandler['I'] = function (handler, params, prefix) { return handler.cursorForwardTab(params); };\r\ncsiStateHandler['J'] = function (handler, params, prefix) { return handler.eraseInDisplay(params); };\r\ncsiStateHandler['K'] = function (handler, params, prefix) { return handler.eraseInLine(params); };\r\ncsiStateHandler['L'] = function (handler, params, prefix) { return handler.insertLines(params); };\r\ncsiStateHandler['M'] = function (handler, params, prefix) { return handler.deleteLines(params); };\r\ncsiStateHandler['P'] = function (handler, params, prefix) { return handler.deleteChars(params); };\r\ncsiStateHandler['S'] = function (handler, params, prefix) { return handler.scrollUp(params); };\r\ncsiStateHandler['T'] = function (handler, params, prefix) {\r\n    if (params.length < 2 && !prefix) {\r\n        handler.scrollDown(params);\r\n    }\r\n};\r\ncsiStateHandler['X'] = function (handler, params, prefix) { return handler.eraseChars(params); };\r\ncsiStateHandler['Z'] = function (handler, params, prefix) { return handler.cursorBackwardTab(params); };\r\ncsiStateHandler['`'] = function (handler, params, prefix) { return handler.charPosAbsolute(params); };\r\ncsiStateHandler['a'] = function (handler, params, prefix) { return handler.HPositionRelative(params); };\r\ncsiStateHandler['b'] = function (handler, params, prefix) { return handler.repeatPrecedingCharacter(params); };\r\ncsiStateHandler['c'] = function (handler, params, prefix) { return handler.sendDeviceAttributes(params); };\r\ncsiStateHandler['d'] = function (handler, params, prefix) { return handler.linePosAbsolute(params); };\r\ncsiStateHandler['e'] = function (handler, params, prefix) { return handler.VPositionRelative(params); };\r\ncsiStateHandler['f'] = function (handler, params, prefix) { return handler.HVPosition(params); };\r\ncsiStateHandler['g'] = function (handler, params, prefix) { return handler.tabClear(params); };\r\ncsiStateHandler['h'] = function (handler, params, prefix) { return handler.setMode(params); };\r\ncsiStateHandler['l'] = function (handler, params, prefix) { return handler.resetMode(params); };\r\ncsiStateHandler['m'] = function (handler, params, prefix) { return handler.charAttributes(params); };\r\ncsiStateHandler['n'] = function (handler, params, prefix) { return handler.deviceStatus(params); };\r\ncsiStateHandler['p'] = function (handler, params, prefix) {\r\n    switch (prefix) {\r\n        case '!':\r\n            handler.softReset(params);\r\n            break;\r\n    }\r\n};\r\ncsiStateHandler['q'] = function (handler, params, prefix, postfix) {\r\n    if (postfix === ' ') {\r\n        handler.setCursorStyle(params);\r\n    }\r\n};\r\ncsiStateHandler['r'] = function (handler, params) { return handler.setScrollRegion(params); };\r\ncsiStateHandler['s'] = function (handler, params) { return handler.saveCursor(params); };\r\ncsiStateHandler['u'] = function (handler, params) { return handler.restoreCursor(params); };\r\ncsiStateHandler[EscapeSequences_1.C0.CAN] = function (handler, params, prefix, postfix, parser) { return parser.setState(ParserState.NORMAL); };\r\nvar ParserState;\r\n(function (ParserState) {\r\n    ParserState[ParserState[\"NORMAL\"] = 0] = \"NORMAL\";\r\n    ParserState[ParserState[\"ESCAPED\"] = 1] = \"ESCAPED\";\r\n    ParserState[ParserState[\"CSI_PARAM\"] = 2] = \"CSI_PARAM\";\r\n    ParserState[ParserState[\"CSI\"] = 3] = \"CSI\";\r\n    ParserState[ParserState[\"OSC\"] = 4] = \"OSC\";\r\n    ParserState[ParserState[\"CHARSET\"] = 5] = \"CHARSET\";\r\n    ParserState[ParserState[\"DCS\"] = 6] = \"DCS\";\r\n    ParserState[ParserState[\"IGNORE\"] = 7] = \"IGNORE\";\r\n})(ParserState = exports.ParserState || (exports.ParserState = {}));\r\nvar Parser = (function () {\r\n    function Parser(_inputHandler, _terminal) {\r\n        this._inputHandler = _inputHandler;\r\n        this._terminal = _terminal;\r\n        this._state = ParserState.NORMAL;\r\n    }\r\n    Parser.prototype.parse = function (data) {\r\n        var l = data.length;\r\n        var cs;\r\n        var ch;\r\n        var code;\r\n        var low;\r\n        var cursorStartX = this._terminal.buffer.x;\r\n        var cursorStartY = this._terminal.buffer.y;\r\n        if (this._terminal.debug) {\r\n            this._terminal.log('data: ' + data);\r\n        }\r\n        this._position = 0;\r\n        if (this._terminal.surrogate_high) {\r\n            data = this._terminal.surrogate_high + data;\r\n            this._terminal.surrogate_high = '';\r\n        }\r\n        for (; this._position < l; this._position++) {\r\n            ch = data[this._position];\r\n            code = data.charCodeAt(this._position);\r\n            if (0xD800 <= code && code <= 0xDBFF) {\r\n                low = data.charCodeAt(this._position + 1);\r\n                if (isNaN(low)) {\r\n                    this._terminal.surrogate_high = ch;\r\n                    continue;\r\n                }\r\n                code = ((code - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\r\n                ch += data.charAt(this._position + 1);\r\n            }\r\n            if (0xDC00 <= code && code <= 0xDFFF) {\r\n                continue;\r\n            }\r\n            switch (this._state) {\r\n                case ParserState.NORMAL:\r\n                    if (ch in normalStateHandler) {\r\n                        normalStateHandler[ch](this, this._inputHandler);\r\n                    }\r\n                    else {\r\n                        this._inputHandler.addChar(ch, code);\r\n                    }\r\n                    break;\r\n                case ParserState.ESCAPED:\r\n                    if (ch in escapedStateHandler) {\r\n                        escapedStateHandler[ch](this, this._terminal);\r\n                        break;\r\n                    }\r\n                    switch (ch) {\r\n                        case '(':\r\n                        case ')':\r\n                        case '*':\r\n                        case '+':\r\n                        case '-':\r\n                        case '.':\r\n                            switch (ch) {\r\n                                case '(':\r\n                                    this._terminal.gcharset = 0;\r\n                                    break;\r\n                                case ')':\r\n                                    this._terminal.gcharset = 1;\r\n                                    break;\r\n                                case '*':\r\n                                    this._terminal.gcharset = 2;\r\n                                    break;\r\n                                case '+':\r\n                                    this._terminal.gcharset = 3;\r\n                                    break;\r\n                                case '-':\r\n                                    this._terminal.gcharset = 1;\r\n                                    break;\r\n                                case '.':\r\n                                    this._terminal.gcharset = 2;\r\n                                    break;\r\n                            }\r\n                            this._state = ParserState.CHARSET;\r\n                            break;\r\n                        case '/':\r\n                            this._terminal.gcharset = 3;\r\n                            this._state = ParserState.CHARSET;\r\n                            this._position--;\r\n                            break;\r\n                        case 'N':\r\n                            this._state = ParserState.NORMAL;\r\n                            break;\r\n                        case 'O':\r\n                            this._state = ParserState.NORMAL;\r\n                            break;\r\n                        case 'n':\r\n                            this._terminal.setgLevel(2);\r\n                            this._state = ParserState.NORMAL;\r\n                            break;\r\n                        case 'o':\r\n                            this._terminal.setgLevel(3);\r\n                            this._state = ParserState.NORMAL;\r\n                            break;\r\n                        case '|':\r\n                            this._terminal.setgLevel(3);\r\n                            this._state = ParserState.NORMAL;\r\n                            break;\r\n                        case '}':\r\n                            this._terminal.setgLevel(2);\r\n                            this._state = ParserState.NORMAL;\r\n                            break;\r\n                        case '~':\r\n                            this._terminal.setgLevel(1);\r\n                            this._state = ParserState.NORMAL;\r\n                            break;\r\n                        case '7':\r\n                            this._inputHandler.saveCursor();\r\n                            this._state = ParserState.NORMAL;\r\n                            break;\r\n                        case '8':\r\n                            this._inputHandler.restoreCursor();\r\n                            this._state = ParserState.NORMAL;\r\n                            break;\r\n                        case '#':\r\n                            this._state = ParserState.NORMAL;\r\n                            this._position++;\r\n                            break;\r\n                        case 'H':\r\n                            this._terminal.tabSet();\r\n                            this._state = ParserState.NORMAL;\r\n                            break;\r\n                        case '=':\r\n                            this._terminal.log('Serial port requested application keypad.');\r\n                            this._terminal.applicationKeypad = true;\r\n                            if (this._terminal.viewport) {\r\n                                this._terminal.viewport.syncScrollArea();\r\n                            }\r\n                            this._state = ParserState.NORMAL;\r\n                            break;\r\n                        case '>':\r\n                            this._terminal.log('Switching back to normal keypad.');\r\n                            this._terminal.applicationKeypad = false;\r\n                            if (this._terminal.viewport) {\r\n                                this._terminal.viewport.syncScrollArea();\r\n                            }\r\n                            this._state = ParserState.NORMAL;\r\n                            break;\r\n                        default:\r\n                            this._state = ParserState.NORMAL;\r\n                            this._terminal.error('Unknown ESC control: %s.', ch);\r\n                            break;\r\n                    }\r\n                    break;\r\n                case ParserState.CHARSET:\r\n                    if (ch in Charsets_1.CHARSETS) {\r\n                        cs = Charsets_1.CHARSETS[ch];\r\n                        if (ch === '/') {\r\n                            this.skipNextChar();\r\n                        }\r\n                    }\r\n                    else {\r\n                        cs = Charsets_1.DEFAULT_CHARSET;\r\n                    }\r\n                    this._terminal.setgCharset(this._terminal.gcharset, cs);\r\n                    this._terminal.gcharset = null;\r\n                    this._state = ParserState.NORMAL;\r\n                    break;\r\n                case ParserState.OSC:\r\n                    if (ch === EscapeSequences_1.C0.ESC || ch === EscapeSequences_1.C0.BEL) {\r\n                        if (ch === EscapeSequences_1.C0.ESC)\r\n                            this._position++;\r\n                        this._terminal.params.push(this._terminal.currentParam);\r\n                        switch (this._terminal.params[0]) {\r\n                            case 0:\r\n                            case 1:\r\n                            case 2:\r\n                                if (this._terminal.params[1]) {\r\n                                    this._terminal.title = this._terminal.params[1];\r\n                                    this._terminal.handleTitle(this._terminal.title);\r\n                                }\r\n                                break;\r\n                            case 3:\r\n                                break;\r\n                            case 4:\r\n                            case 5:\r\n                                break;\r\n                            case 10:\r\n                            case 11:\r\n                            case 12:\r\n                            case 13:\r\n                            case 14:\r\n                            case 15:\r\n                            case 16:\r\n                            case 17:\r\n                            case 18:\r\n                            case 19:\r\n                                break;\r\n                            case 46:\r\n                                break;\r\n                            case 50:\r\n                                break;\r\n                            case 51:\r\n                                break;\r\n                            case 52:\r\n                                break;\r\n                            case 104:\r\n                            case 105:\r\n                            case 110:\r\n                            case 111:\r\n                            case 112:\r\n                            case 113:\r\n                            case 114:\r\n                            case 115:\r\n                            case 116:\r\n                            case 117:\r\n                            case 118:\r\n                                break;\r\n                        }\r\n                        this._terminal.params = [];\r\n                        this._terminal.currentParam = 0;\r\n                        this._state = ParserState.NORMAL;\r\n                    }\r\n                    else {\r\n                        if (!this._terminal.params.length) {\r\n                            if (ch >= '0' && ch <= '9') {\r\n                                this._terminal.currentParam =\r\n                                    this._terminal.currentParam * 10 + ch.charCodeAt(0) - 48;\r\n                            }\r\n                            else if (ch === ';') {\r\n                                this._terminal.params.push(this._terminal.currentParam);\r\n                                this._terminal.currentParam = '';\r\n                            }\r\n                        }\r\n                        else {\r\n                            this._terminal.currentParam += ch;\r\n                        }\r\n                    }\r\n                    break;\r\n                case ParserState.CSI_PARAM:\r\n                    if (ch in csiParamStateHandler) {\r\n                        csiParamStateHandler[ch](this);\r\n                        break;\r\n                    }\r\n                    this.finalizeParam();\r\n                    this._state = ParserState.CSI;\r\n                case ParserState.CSI:\r\n                    if (ch in csiStateHandler) {\r\n                        if (this._terminal.debug) {\r\n                            this._terminal.log(\"CSI \" + (this._terminal.prefix ? this._terminal.prefix : '') + \" \" + (this._terminal.params ? this._terminal.params.join(';') : '') + \" \" + (this._terminal.postfix ? this._terminal.postfix : '') + \" \" + ch);\r\n                        }\r\n                        csiStateHandler[ch](this._inputHandler, this._terminal.params, this._terminal.prefix, this._terminal.postfix, this);\r\n                    }\r\n                    else {\r\n                        this._terminal.error('Unknown CSI code: %s.', ch);\r\n                    }\r\n                    this._state = ParserState.NORMAL;\r\n                    this._terminal.prefix = '';\r\n                    this._terminal.postfix = '';\r\n                    break;\r\n                case ParserState.DCS:\r\n                    if (ch === EscapeSequences_1.C0.ESC || ch === EscapeSequences_1.C0.BEL) {\r\n                        if (ch === EscapeSequences_1.C0.ESC)\r\n                            this._position++;\r\n                        var pt = void 0;\r\n                        var valid = void 0;\r\n                        switch (this._terminal.prefix) {\r\n                            case '':\r\n                                break;\r\n                            case '$q':\r\n                                pt = this._terminal.currentParam;\r\n                                valid = false;\r\n                                switch (pt) {\r\n                                    case '\"q':\r\n                                        pt = '0\"q';\r\n                                        break;\r\n                                    case '\"p':\r\n                                        pt = '61\"p';\r\n                                        break;\r\n                                    case 'r':\r\n                                        pt = ''\r\n                                            + (this._terminal.buffer.scrollTop + 1)\r\n                                            + ';'\r\n                                            + (this._terminal.buffer.scrollBottom + 1)\r\n                                            + 'r';\r\n                                        break;\r\n                                    case 'm':\r\n                                        pt = '0m';\r\n                                        break;\r\n                                    default:\r\n                                        this._terminal.error('Unknown DCS Pt: %s.', pt);\r\n                                        pt = '';\r\n                                        break;\r\n                                }\r\n                                this._terminal.send(EscapeSequences_1.C0.ESC + 'P' + +valid + '$r' + pt + EscapeSequences_1.C0.ESC + '\\\\');\r\n                                break;\r\n                            case '+p':\r\n                                break;\r\n                            case '+q':\r\n                                pt = this._terminal.currentParam;\r\n                                valid = false;\r\n                                this._terminal.send(EscapeSequences_1.C0.ESC + 'P' + +valid + '+r' + pt + EscapeSequences_1.C0.ESC + '\\\\');\r\n                                break;\r\n                            default:\r\n                                this._terminal.error('Unknown DCS prefix: %s.', this._terminal.prefix);\r\n                                break;\r\n                        }\r\n                        this._terminal.currentParam = 0;\r\n                        this._terminal.prefix = '';\r\n                        this._state = ParserState.NORMAL;\r\n                    }\r\n                    else if (!this._terminal.currentParam) {\r\n                        if (!this._terminal.prefix && ch !== '$' && ch !== '+') {\r\n                            this._terminal.currentParam = ch;\r\n                        }\r\n                        else if (this._terminal.prefix.length === 2) {\r\n                            this._terminal.currentParam = ch;\r\n                        }\r\n                        else {\r\n                            this._terminal.prefix += ch;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this._terminal.currentParam += ch;\r\n                    }\r\n                    break;\r\n                case ParserState.IGNORE:\r\n                    if (ch === EscapeSequences_1.C0.ESC || ch === EscapeSequences_1.C0.BEL) {\r\n                        if (ch === EscapeSequences_1.C0.ESC)\r\n                            this._position++;\r\n                        this._state = ParserState.NORMAL;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        if (this._terminal.buffer.x !== cursorStartX || this._terminal.buffer.y !== cursorStartY) {\r\n            this._terminal.emit('cursormove');\r\n        }\r\n        return this._state;\r\n    };\r\n    Parser.prototype.setState = function (state) {\r\n        this._state = state;\r\n    };\r\n    Parser.prototype.setPrefix = function (prefix) {\r\n        this._terminal.prefix = prefix;\r\n    };\r\n    Parser.prototype.setPostfix = function (postfix) {\r\n        this._terminal.postfix = postfix;\r\n    };\r\n    Parser.prototype.setParam = function (param) {\r\n        this._terminal.currentParam = param;\r\n    };\r\n    Parser.prototype.getParam = function () {\r\n        return this._terminal.currentParam;\r\n    };\r\n    Parser.prototype.finalizeParam = function () {\r\n        this._terminal.params.push(this._terminal.currentParam);\r\n        this._terminal.currentParam = 0;\r\n    };\r\n    Parser.prototype.skipNextChar = function () {\r\n        this._position++;\r\n    };\r\n    return Parser;\r\n}());\r\nexports.Parser = Parser;\r\n\r\n\r\n\r\n},{\"./Charsets\":5,\"./EscapeSequences\":7}],12:[function(require,module,exports){\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar MouseHelper_1 = require(\"./utils/MouseHelper\");\r\nvar Browser = require(\"./shared/utils/Browser\");\r\nvar EventEmitter_1 = require(\"./EventEmitter\");\r\nvar SelectionModel_1 = require(\"./SelectionModel\");\r\nvar Buffer_1 = require(\"./Buffer\");\r\nvar AltClickHandler_1 = require(\"./handlers/AltClickHandler\");\r\nvar DRAG_SCROLL_MAX_THRESHOLD = 50;\r\nvar DRAG_SCROLL_MAX_SPEED = 15;\r\nvar DRAG_SCROLL_INTERVAL = 50;\r\nvar ALT_CLICK_MOVE_CURSOR_TIME = 500;\r\nvar WORD_SEPARATORS = ' ()[]{}\\'\"';\r\nvar NON_BREAKING_SPACE_CHAR = String.fromCharCode(160);\r\nvar ALL_NON_BREAKING_SPACE_REGEX = new RegExp(NON_BREAKING_SPACE_CHAR, 'g');\r\nvar SelectionMode;\r\n(function (SelectionMode) {\r\n    SelectionMode[SelectionMode[\"NORMAL\"] = 0] = \"NORMAL\";\r\n    SelectionMode[SelectionMode[\"WORD\"] = 1] = \"WORD\";\r\n    SelectionMode[SelectionMode[\"LINE\"] = 2] = \"LINE\";\r\n})(SelectionMode || (SelectionMode = {}));\r\nvar SelectionManager = (function (_super) {\r\n    __extends(SelectionManager, _super);\r\n    function SelectionManager(_terminal, _charMeasure) {\r\n        var _this = _super.call(this) || this;\r\n        _this._terminal = _terminal;\r\n        _this._charMeasure = _charMeasure;\r\n        _this._enabled = true;\r\n        _this._initListeners();\r\n        _this.enable();\r\n        _this._model = new SelectionModel_1.SelectionModel(_terminal);\r\n        _this._activeSelectionMode = SelectionMode.NORMAL;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(SelectionManager.prototype, \"_buffer\", {\r\n        get: function () {\r\n            return this._terminal.buffers.active;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SelectionManager.prototype._initListeners = function () {\r\n        var _this = this;\r\n        this._mouseMoveListener = function (event) { return _this._onMouseMove(event); };\r\n        this._mouseUpListener = function (event) { return _this._onMouseUp(event); };\r\n        this._trimListener = function (amount) { return _this._onTrim(amount); };\r\n        this.initBuffersListeners();\r\n    };\r\n    SelectionManager.prototype.initBuffersListeners = function () {\r\n        var _this = this;\r\n        this._terminal.buffer.lines.on('trim', this._trimListener);\r\n        this._terminal.buffers.on('activate', function (e) { return _this._onBufferActivate(e); });\r\n    };\r\n    SelectionManager.prototype.disable = function () {\r\n        this.clearSelection();\r\n        this._enabled = false;\r\n    };\r\n    SelectionManager.prototype.enable = function () {\r\n        this._enabled = true;\r\n    };\r\n    Object.defineProperty(SelectionManager.prototype, \"selectionStart\", {\r\n        get: function () { return this._model.finalSelectionStart; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SelectionManager.prototype, \"selectionEnd\", {\r\n        get: function () { return this._model.finalSelectionEnd; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SelectionManager.prototype, \"hasSelection\", {\r\n        get: function () {\r\n            var start = this._model.finalSelectionStart;\r\n            var end = this._model.finalSelectionEnd;\r\n            if (!start || !end) {\r\n                return false;\r\n            }\r\n            return start[0] !== end[0] || start[1] !== end[1];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SelectionManager.prototype, \"selectionText\", {\r\n        get: function () {\r\n            var start = this._model.finalSelectionStart;\r\n            var end = this._model.finalSelectionEnd;\r\n            if (!start || !end) {\r\n                return '';\r\n            }\r\n            var startRowEndCol = start[1] === end[1] ? end[0] : null;\r\n            var result = [];\r\n            result.push(this._buffer.translateBufferLineToString(start[1], true, start[0], startRowEndCol));\r\n            for (var i = start[1] + 1; i <= end[1] - 1; i++) {\r\n                var bufferLine = this._buffer.lines.get(i);\r\n                var lineText = this._buffer.translateBufferLineToString(i, true);\r\n                if (bufferLine.isWrapped) {\r\n                    result[result.length - 1] += lineText;\r\n                }\r\n                else {\r\n                    result.push(lineText);\r\n                }\r\n            }\r\n            if (start[1] !== end[1]) {\r\n                var bufferLine = this._buffer.lines.get(end[1]);\r\n                var lineText = this._buffer.translateBufferLineToString(end[1], true, 0, end[0]);\r\n                if (bufferLine.isWrapped) {\r\n                    result[result.length - 1] += lineText;\r\n                }\r\n                else {\r\n                    result.push(lineText);\r\n                }\r\n            }\r\n            var formattedResult = result.map(function (line) {\r\n                return line.replace(ALL_NON_BREAKING_SPACE_REGEX, ' ');\r\n            }).join(Browser.isMSWindows ? '\\r\\n' : '\\n');\r\n            return formattedResult;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SelectionManager.prototype.clearSelection = function () {\r\n        this._model.clearSelection();\r\n        this._removeMouseDownListeners();\r\n        this.refresh();\r\n    };\r\n    SelectionManager.prototype.refresh = function (isNewSelection) {\r\n        var _this = this;\r\n        if (!this._refreshAnimationFrame) {\r\n            this._refreshAnimationFrame = window.requestAnimationFrame(function () { return _this._refresh(); });\r\n        }\r\n        if (Browser.isLinux && isNewSelection) {\r\n            var selectionText = this.selectionText;\r\n            if (selectionText.length) {\r\n                this.emit('newselection', this.selectionText);\r\n            }\r\n        }\r\n    };\r\n    SelectionManager.prototype._refresh = function () {\r\n        this._refreshAnimationFrame = null;\r\n        this.emit('refresh', { start: this._model.finalSelectionStart, end: this._model.finalSelectionEnd });\r\n    };\r\n    SelectionManager.prototype.isClickInSelection = function (event) {\r\n        var coords = this._getMouseBufferCoords(event);\r\n        var start = this._model.finalSelectionStart;\r\n        var end = this._model.finalSelectionEnd;\r\n        if (!start || !end) {\r\n            return false;\r\n        }\r\n        return (coords[1] > start[1] && coords[1] < end[1]) ||\r\n            (start[1] === end[1] && coords[1] === start[1] && coords[0] > start[0] && coords[0] < end[0]) ||\r\n            (start[1] < end[1] && coords[1] === end[1] && coords[0] < end[0]);\r\n    };\r\n    SelectionManager.prototype.selectWordAtCursor = function (event) {\r\n        var coords = this._getMouseBufferCoords(event);\r\n        if (coords) {\r\n            this._selectWordAt(coords, false);\r\n            this._model.selectionEnd = null;\r\n            this.refresh(true);\r\n        }\r\n    };\r\n    SelectionManager.prototype.selectAll = function () {\r\n        this._model.isSelectAllActive = true;\r\n        this.refresh();\r\n        this._terminal.emit('selection');\r\n    };\r\n    SelectionManager.prototype.selectLines = function (start, end) {\r\n        this._model.clearSelection();\r\n        start = Math.max(start, 0);\r\n        end = Math.min(end, this._terminal.buffer.lines.length - 1);\r\n        this._model.selectionStart = [0, start];\r\n        this._model.selectionEnd = [this._terminal.cols, end];\r\n        this.refresh();\r\n        this._terminal.emit('selection');\r\n    };\r\n    SelectionManager.prototype._onTrim = function (amount) {\r\n        var needsRefresh = this._model.onTrim(amount);\r\n        if (needsRefresh) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    SelectionManager.prototype._getMouseBufferCoords = function (event) {\r\n        var coords = this._terminal.mouseHelper.getCoords(event, this._terminal.screenElement, this._charMeasure, this._terminal.options.lineHeight, this._terminal.cols, this._terminal.rows, true);\r\n        if (!coords) {\r\n            return null;\r\n        }\r\n        coords[0]--;\r\n        coords[1]--;\r\n        coords[1] += this._terminal.buffer.ydisp;\r\n        return coords;\r\n    };\r\n    SelectionManager.prototype._getMouseEventScrollAmount = function (event) {\r\n        var offset = MouseHelper_1.MouseHelper.getCoordsRelativeToElement(event, this._terminal.screenElement)[1];\r\n        var terminalHeight = this._terminal.rows * Math.ceil(this._charMeasure.height * this._terminal.options.lineHeight);\r\n        if (offset >= 0 && offset <= terminalHeight) {\r\n            return 0;\r\n        }\r\n        if (offset > terminalHeight) {\r\n            offset -= terminalHeight;\r\n        }\r\n        offset = Math.min(Math.max(offset, -DRAG_SCROLL_MAX_THRESHOLD), DRAG_SCROLL_MAX_THRESHOLD);\r\n        offset /= DRAG_SCROLL_MAX_THRESHOLD;\r\n        return (offset / Math.abs(offset)) + Math.round(offset * (DRAG_SCROLL_MAX_SPEED - 1));\r\n    };\r\n    SelectionManager.prototype.shouldForceSelection = function (event) {\r\n        return Browser.isMac ? event.altKey : event.shiftKey;\r\n    };\r\n    SelectionManager.prototype.onMouseDown = function (event) {\r\n        this._mouseDownTimeStamp = event.timeStamp;\r\n        if (event.button === 2 && this.hasSelection) {\r\n            return;\r\n        }\r\n        if (event.button !== 0) {\r\n            return;\r\n        }\r\n        if (!this._enabled) {\r\n            if (!this.shouldForceSelection(event)) {\r\n                return;\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n        event.preventDefault();\r\n        this._dragScrollAmount = 0;\r\n        if (this._enabled && event.shiftKey) {\r\n            this._onIncrementalClick(event);\r\n        }\r\n        else {\r\n            if (event.detail === 1) {\r\n                this._onSingleClick(event);\r\n            }\r\n            else if (event.detail === 2) {\r\n                this._onDoubleClick(event);\r\n            }\r\n            else if (event.detail === 3) {\r\n                this._onTripleClick(event);\r\n            }\r\n        }\r\n        this._addMouseDownListeners();\r\n        this.refresh(true);\r\n    };\r\n    SelectionManager.prototype._addMouseDownListeners = function () {\r\n        var _this = this;\r\n        this._terminal.element.ownerDocument.addEventListener('mousemove', this._mouseMoveListener);\r\n        this._terminal.element.ownerDocument.addEventListener('mouseup', this._mouseUpListener);\r\n        this._dragScrollIntervalTimer = setInterval(function () { return _this._dragScroll(); }, DRAG_SCROLL_INTERVAL);\r\n    };\r\n    SelectionManager.prototype._removeMouseDownListeners = function () {\r\n        this._terminal.element.ownerDocument.removeEventListener('mousemove', this._mouseMoveListener);\r\n        this._terminal.element.ownerDocument.removeEventListener('mouseup', this._mouseUpListener);\r\n        clearInterval(this._dragScrollIntervalTimer);\r\n        this._dragScrollIntervalTimer = null;\r\n    };\r\n    SelectionManager.prototype._onIncrementalClick = function (event) {\r\n        if (this._model.selectionStart) {\r\n            this._model.selectionEnd = this._getMouseBufferCoords(event);\r\n        }\r\n    };\r\n    SelectionManager.prototype._onSingleClick = function (event) {\r\n        this._model.selectionStartLength = 0;\r\n        this._model.isSelectAllActive = false;\r\n        this._activeSelectionMode = SelectionMode.NORMAL;\r\n        this._model.selectionStart = this._getMouseBufferCoords(event);\r\n        if (!this._model.selectionStart) {\r\n            return;\r\n        }\r\n        this._model.selectionEnd = null;\r\n        var line = this._buffer.lines.get(this._model.selectionStart[1]);\r\n        if (!line) {\r\n            return;\r\n        }\r\n        if (line.length >= this._model.selectionStart[0]) {\r\n            return;\r\n        }\r\n        var char = line[this._model.selectionStart[0]];\r\n        if (char[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\r\n            this._model.selectionStart[0]++;\r\n        }\r\n    };\r\n    SelectionManager.prototype._onDoubleClick = function (event) {\r\n        var coords = this._getMouseBufferCoords(event);\r\n        if (coords) {\r\n            this._activeSelectionMode = SelectionMode.WORD;\r\n            this._selectWordAt(coords, true);\r\n        }\r\n    };\r\n    SelectionManager.prototype._onTripleClick = function (event) {\r\n        var coords = this._getMouseBufferCoords(event);\r\n        if (coords) {\r\n            this._activeSelectionMode = SelectionMode.LINE;\r\n            this._selectLineAt(coords[1]);\r\n        }\r\n    };\r\n    SelectionManager.prototype._onMouseMove = function (event) {\r\n        event.stopImmediatePropagation();\r\n        var previousSelectionEnd = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;\r\n        this._model.selectionEnd = this._getMouseBufferCoords(event);\r\n        if (!this._model.selectionEnd) {\r\n            this.refresh(true);\r\n            return;\r\n        }\r\n        if (this._activeSelectionMode === SelectionMode.LINE) {\r\n            if (this._model.selectionEnd[1] < this._model.selectionStart[1]) {\r\n                this._model.selectionEnd[0] = 0;\r\n            }\r\n            else {\r\n                this._model.selectionEnd[0] = this._terminal.cols;\r\n            }\r\n        }\r\n        else if (this._activeSelectionMode === SelectionMode.WORD) {\r\n            this._selectToWordAt(this._model.selectionEnd);\r\n        }\r\n        this._dragScrollAmount = this._getMouseEventScrollAmount(event);\r\n        if (this._dragScrollAmount > 0) {\r\n            this._model.selectionEnd[0] = this._terminal.cols;\r\n        }\r\n        else if (this._dragScrollAmount < 0) {\r\n            this._model.selectionEnd[0] = 0;\r\n        }\r\n        if (this._model.selectionEnd[1] < this._buffer.lines.length) {\r\n            var char = this._buffer.lines.get(this._model.selectionEnd[1])[this._model.selectionEnd[0]];\r\n            if (char && char[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\r\n                this._model.selectionEnd[0]++;\r\n            }\r\n        }\r\n        if (!previousSelectionEnd ||\r\n            previousSelectionEnd[0] !== this._model.selectionEnd[0] ||\r\n            previousSelectionEnd[1] !== this._model.selectionEnd[1]) {\r\n            this.refresh(true);\r\n        }\r\n    };\r\n    SelectionManager.prototype._dragScroll = function () {\r\n        if (this._dragScrollAmount) {\r\n            this._terminal.scrollLines(this._dragScrollAmount, false);\r\n            if (this._dragScrollAmount > 0) {\r\n                this._model.selectionEnd = [this._terminal.cols - 1, Math.min(this._terminal.buffer.ydisp + this._terminal.rows, this._terminal.buffer.lines.length - 1)];\r\n            }\r\n            else {\r\n                this._model.selectionEnd = [0, this._terminal.buffer.ydisp];\r\n            }\r\n            this.refresh();\r\n        }\r\n    };\r\n    SelectionManager.prototype._onMouseUp = function (event) {\r\n        var timeElapsed = event.timeStamp - this._mouseDownTimeStamp;\r\n        this._removeMouseDownListeners();\r\n        if (this.selectionText.length <= 1 && timeElapsed < ALT_CLICK_MOVE_CURSOR_TIME) {\r\n            (new AltClickHandler_1.AltClickHandler(event, this._terminal)).move();\r\n        }\r\n        else if (this.hasSelection) {\r\n            this._terminal.emit('selection');\r\n        }\r\n    };\r\n    SelectionManager.prototype._onBufferActivate = function (e) {\r\n        this.clearSelection();\r\n        e.inactiveBuffer.lines.off('trim', this._trimListener);\r\n        e.activeBuffer.lines.on('trim', this._trimListener);\r\n    };\r\n    SelectionManager.prototype._convertViewportColToCharacterIndex = function (bufferLine, coords) {\r\n        var charIndex = coords[0];\r\n        for (var i = 0; coords[0] >= i; i++) {\r\n            var char = bufferLine[i];\r\n            if (char[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\r\n                charIndex--;\r\n            }\r\n            else if (char[Buffer_1.CHAR_DATA_CHAR_INDEX].length > 1 && coords[0] !== i) {\r\n                charIndex += char[Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\r\n            }\r\n        }\r\n        return charIndex;\r\n    };\r\n    SelectionManager.prototype.setSelection = function (col, row, length) {\r\n        this._model.clearSelection();\r\n        this._removeMouseDownListeners();\r\n        this._model.selectionStart = [col, row];\r\n        this._model.selectionStartLength = length;\r\n        this.refresh();\r\n    };\r\n    SelectionManager.prototype._getWordAt = function (coords, allowWhitespaceOnlySelection) {\r\n        if (coords[0] >= this._terminal.cols) {\r\n            return null;\r\n        }\r\n        var bufferLine = this._buffer.lines.get(coords[1]);\r\n        if (!bufferLine) {\r\n            return null;\r\n        }\r\n        var line = this._buffer.translateBufferLineToString(coords[1], false);\r\n        var startIndex = this._convertViewportColToCharacterIndex(bufferLine, coords);\r\n        var endIndex = startIndex;\r\n        var charOffset = coords[0] - startIndex;\r\n        var leftWideCharCount = 0;\r\n        var rightWideCharCount = 0;\r\n        var leftLongCharOffset = 0;\r\n        var rightLongCharOffset = 0;\r\n        if (line.charAt(startIndex) === ' ') {\r\n            while (startIndex > 0 && line.charAt(startIndex - 1) === ' ') {\r\n                startIndex--;\r\n            }\r\n            while (endIndex < line.length && line.charAt(endIndex + 1) === ' ') {\r\n                endIndex++;\r\n            }\r\n        }\r\n        else {\r\n            var startCol = coords[0];\r\n            var endCol = coords[0];\r\n            if (bufferLine[startCol][Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\r\n                leftWideCharCount++;\r\n                startCol--;\r\n            }\r\n            if (bufferLine[endCol][Buffer_1.CHAR_DATA_WIDTH_INDEX] === 2) {\r\n                rightWideCharCount++;\r\n                endCol++;\r\n            }\r\n            if (bufferLine[endCol][Buffer_1.CHAR_DATA_CHAR_INDEX].length > 1) {\r\n                rightLongCharOffset += bufferLine[endCol][Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\r\n                endIndex += bufferLine[endCol][Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\r\n            }\r\n            while (startCol > 0 && startIndex > 0 && !this._isCharWordSeparator(bufferLine[startCol - 1])) {\r\n                var char = bufferLine[startCol - 1];\r\n                if (char[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\r\n                    leftWideCharCount++;\r\n                    startCol--;\r\n                }\r\n                else if (char[Buffer_1.CHAR_DATA_CHAR_INDEX].length > 1) {\r\n                    leftLongCharOffset += char[Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\r\n                    startIndex -= char[Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\r\n                }\r\n                startIndex--;\r\n                startCol--;\r\n            }\r\n            while (endCol < bufferLine.length && endIndex + 1 < line.length && !this._isCharWordSeparator(bufferLine[endCol + 1])) {\r\n                var char = bufferLine[endCol + 1];\r\n                if (char[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 2) {\r\n                    rightWideCharCount++;\r\n                    endCol++;\r\n                }\r\n                else if (char[Buffer_1.CHAR_DATA_CHAR_INDEX].length > 1) {\r\n                    rightLongCharOffset += char[Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\r\n                    endIndex += char[Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\r\n                }\r\n                endIndex++;\r\n                endCol++;\r\n            }\r\n        }\r\n        endIndex++;\r\n        var start = startIndex\r\n            + charOffset\r\n            - leftWideCharCount\r\n            + leftLongCharOffset;\r\n        var length = Math.min(this._terminal.cols, endIndex\r\n            - startIndex\r\n            + leftWideCharCount\r\n            + rightWideCharCount\r\n            - leftLongCharOffset\r\n            - rightLongCharOffset);\r\n        if (!allowWhitespaceOnlySelection && line.slice(startIndex, endIndex).trim() === '') {\r\n            return null;\r\n        }\r\n        return { start: start, length: length };\r\n    };\r\n    SelectionManager.prototype._selectWordAt = function (coords, allowWhitespaceOnlySelection) {\r\n        var wordPosition = this._getWordAt(coords, allowWhitespaceOnlySelection);\r\n        if (wordPosition) {\r\n            this._model.selectionStart = [wordPosition.start, coords[1]];\r\n            this._model.selectionStartLength = wordPosition.length;\r\n        }\r\n    };\r\n    SelectionManager.prototype._selectToWordAt = function (coords) {\r\n        var wordPosition = this._getWordAt(coords, true);\r\n        if (wordPosition) {\r\n            this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? wordPosition.start : (wordPosition.start + wordPosition.length), coords[1]];\r\n        }\r\n    };\r\n    SelectionManager.prototype._isCharWordSeparator = function (charData) {\r\n        if (charData[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\r\n            return false;\r\n        }\r\n        return WORD_SEPARATORS.indexOf(charData[Buffer_1.CHAR_DATA_CHAR_INDEX]) >= 0;\r\n    };\r\n    SelectionManager.prototype._selectLineAt = function (line) {\r\n        this._model.selectionStart = [0, line];\r\n        this._model.selectionStartLength = this._terminal.cols;\r\n    };\r\n    return SelectionManager;\r\n}(EventEmitter_1.EventEmitter));\r\nexports.SelectionManager = SelectionManager;\r\n\r\n\r\n\r\n},{\"./Buffer\":2,\"./EventEmitter\":8,\"./SelectionModel\":13,\"./handlers/AltClickHandler\":19,\"./shared/utils/Browser\":36,\"./utils/MouseHelper\":41}],13:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar SelectionModel = (function () {\r\n    function SelectionModel(_terminal) {\r\n        this._terminal = _terminal;\r\n        this.clearSelection();\r\n    }\r\n    SelectionModel.prototype.clearSelection = function () {\r\n        this.selectionStart = null;\r\n        this.selectionEnd = null;\r\n        this.isSelectAllActive = false;\r\n        this.selectionStartLength = 0;\r\n    };\r\n    Object.defineProperty(SelectionModel.prototype, \"finalSelectionStart\", {\r\n        get: function () {\r\n            if (this.isSelectAllActive) {\r\n                return [0, 0];\r\n            }\r\n            if (!this.selectionEnd || !this.selectionStart) {\r\n                return this.selectionStart;\r\n            }\r\n            return this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SelectionModel.prototype, \"finalSelectionEnd\", {\r\n        get: function () {\r\n            if (this.isSelectAllActive) {\r\n                return [this._terminal.cols, this._terminal.buffer.ybase + this._terminal.rows - 1];\r\n            }\r\n            if (!this.selectionStart) {\r\n                return null;\r\n            }\r\n            if (!this.selectionEnd || this.areSelectionValuesReversed()) {\r\n                return [this.selectionStart[0] + this.selectionStartLength, this.selectionStart[1]];\r\n            }\r\n            if (this.selectionStartLength) {\r\n                if (this.selectionEnd[1] === this.selectionStart[1]) {\r\n                    return [Math.max(this.selectionStart[0] + this.selectionStartLength, this.selectionEnd[0]), this.selectionEnd[1]];\r\n                }\r\n            }\r\n            return this.selectionEnd;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SelectionModel.prototype.areSelectionValuesReversed = function () {\r\n        var start = this.selectionStart;\r\n        var end = this.selectionEnd;\r\n        if (!start || !end) {\r\n            return false;\r\n        }\r\n        return start[1] > end[1] || (start[1] === end[1] && start[0] > end[0]);\r\n    };\r\n    SelectionModel.prototype.onTrim = function (amount) {\r\n        if (this.selectionStart) {\r\n            this.selectionStart[1] -= amount;\r\n        }\r\n        if (this.selectionEnd) {\r\n            this.selectionEnd[1] -= amount;\r\n        }\r\n        if (this.selectionEnd && this.selectionEnd[1] < 0) {\r\n            this.clearSelection();\r\n            return true;\r\n        }\r\n        if (this.selectionStart && this.selectionStart[1] < 0) {\r\n            this.selectionStart[1] = 0;\r\n        }\r\n        return false;\r\n    };\r\n    return SelectionModel;\r\n}());\r\nexports.SelectionModel = SelectionModel;\r\n\r\n\r\n\r\n},{}],14:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DEFAULT_BELL_SOUND = 'data:audio/wav;base64,UklGRigBAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQBAADpAFgCwAMlBZoG/wdmCcoKRAypDQ8PbRDBEQQTOxRtFYcWlBePGIUZXhoiG88bcBz7HHIdzh0WHlMeZx51HmkeUx4WHs8dah0AHXwc3hs9G4saxRnyGBIYGBcQFv8U4RPAEoYRQBACD70NWwwHC6gJOwjWBloF7gOBAhABkf8b/qv8R/ve+Xf4Ife79W/0JfPZ8Z/wde9N7ijtE+wU6xvqM+lb6H7nw+YX5mrlxuQz5Mzje+Ma49fioeKD4nXiYeJy4pHitOL04j/jn+MN5IPkFOWs5U3mDefM55/ogOl36m7rdOyE7abuyu8D8Unyj/Pg9D/2qfcb+Yn6/vuK/Qj/lAAlAg==';\r\nvar SoundManager = (function () {\r\n    function SoundManager(_terminal) {\r\n        this._terminal = _terminal;\r\n    }\r\n    SoundManager.prototype.playBellSound = function () {\r\n        var audioContextCtor = window.AudioContext || window.webkitAudioContext;\r\n        if (!this._audioContext && audioContextCtor) {\r\n            this._audioContext = new audioContextCtor();\r\n        }\r\n        if (this._audioContext) {\r\n            var bellAudioSource_1 = this._audioContext.createBufferSource();\r\n            var context_1 = this._audioContext;\r\n            this._audioContext.decodeAudioData(this._base64ToArrayBuffer(this._removeMimeType(this._terminal.options.bellSound)), function (buffer) {\r\n                bellAudioSource_1.buffer = buffer;\r\n                bellAudioSource_1.connect(context_1.destination);\r\n                bellAudioSource_1.start(0);\r\n            });\r\n        }\r\n        else {\r\n            console.warn('Sorry, but the Web Audio API is not supported by your browser. Please, consider upgrading to the latest version');\r\n        }\r\n    };\r\n    SoundManager.prototype._base64ToArrayBuffer = function (base64) {\r\n        var binaryString = window.atob(base64);\r\n        var len = binaryString.length;\r\n        var bytes = new Uint8Array(len);\r\n        for (var i = 0; i < len; i++) {\r\n            bytes[i] = binaryString.charCodeAt(i);\r\n        }\r\n        return bytes.buffer;\r\n    };\r\n    SoundManager.prototype._removeMimeType = function (dataURI) {\r\n        var splitUri = dataURI.split(',');\r\n        return splitUri[1];\r\n    };\r\n    return SoundManager;\r\n}());\r\nexports.SoundManager = SoundManager;\r\n\r\n\r\n\r\n},{}],15:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.blankLine = 'Blank line';\r\nexports.promptLabel = 'Terminal input';\r\nexports.tooMuchOutput = 'Too much output to announce, navigate to rows manually to read';\r\n\r\n\r\n\r\n},{}],16:[function(require,module,exports){\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar BufferSet_1 = require(\"./BufferSet\");\r\nvar Buffer_1 = require(\"./Buffer\");\r\nvar CompositionHelper_1 = require(\"./CompositionHelper\");\r\nvar EventEmitter_1 = require(\"./EventEmitter\");\r\nvar Viewport_1 = require(\"./Viewport\");\r\nvar Clipboard_1 = require(\"./handlers/Clipboard\");\r\nvar EscapeSequences_1 = require(\"./EscapeSequences\");\r\nvar InputHandler_1 = require(\"./InputHandler\");\r\nvar Parser_1 = require(\"./Parser\");\r\nvar Renderer_1 = require(\"./renderer/Renderer\");\r\nvar Linkifier_1 = require(\"./Linkifier\");\r\nvar SelectionManager_1 = require(\"./SelectionManager\");\r\nvar CharMeasure_1 = require(\"./utils/CharMeasure\");\r\nvar Browser = require(\"./shared/utils/Browser\");\r\nvar Strings = require(\"./Strings\");\r\nvar MouseHelper_1 = require(\"./utils/MouseHelper\");\r\nvar Clone_1 = require(\"./utils/Clone\");\r\nvar SoundManager_1 = require(\"./SoundManager\");\r\nvar ColorManager_1 = require(\"./renderer/ColorManager\");\r\nvar MouseZoneManager_1 = require(\"./input/MouseZoneManager\");\r\nvar AccessibilityManager_1 = require(\"./AccessibilityManager\");\r\nvar ScreenDprMonitor_1 = require(\"./utils/ScreenDprMonitor\");\r\nvar KEYCODE_KEY_MAPPINGS = {\r\n    48: ['0', ')'],\r\n    49: ['1', '!'],\r\n    50: ['2', '@'],\r\n    51: ['3', '#'],\r\n    52: ['4', '$'],\r\n    53: ['5', '%'],\r\n    54: ['6', '^'],\r\n    55: ['7', '&'],\r\n    56: ['8', '*'],\r\n    57: ['9', '('],\r\n    186: [';', ':'],\r\n    187: ['=', '+'],\r\n    188: [',', '<'],\r\n    189: ['-', '_'],\r\n    190: ['.', '>'],\r\n    191: ['/', '?'],\r\n    192: ['`', '~'],\r\n    219: ['[', '{'],\r\n    220: ['\\\\', '|'],\r\n    221: [']', '}'],\r\n    222: ['\\'', '\"']\r\n};\r\nvar document = (typeof window !== 'undefined') ? window.document : null;\r\nvar WRITE_BUFFER_PAUSE_THRESHOLD = 5;\r\nvar WRITE_BATCH_SIZE = 300;\r\nvar DEFAULT_OPTIONS = {\r\n    cols: 80,\r\n    rows: 24,\r\n    convertEol: false,\r\n    termName: 'xterm',\r\n    cursorBlink: false,\r\n    cursorStyle: 'block',\r\n    bellSound: SoundManager_1.DEFAULT_BELL_SOUND,\r\n    bellStyle: 'none',\r\n    enableBold: true,\r\n    fontFamily: 'courier-new, courier, monospace',\r\n    fontSize: 15,\r\n    fontWeight: 'normal',\r\n    fontWeightBold: 'bold',\r\n    lineHeight: 1.0,\r\n    letterSpacing: 0,\r\n    scrollback: 1000,\r\n    screenKeys: false,\r\n    screenReaderMode: false,\r\n    debug: false,\r\n    macOptionIsMeta: false,\r\n    cancelEvents: false,\r\n    disableStdin: false,\r\n    useFlowControl: false,\r\n    allowTransparency: false,\r\n    tabStopWidth: 8,\r\n    theme: null,\r\n    rightClickSelectsWord: Browser.isMac\r\n};\r\nvar Terminal = (function (_super) {\r\n    __extends(Terminal, _super);\r\n    function Terminal(options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this) || this;\r\n        _this.browser = Browser;\r\n        _this.options = Clone_1.clone(options);\r\n        _this._setup();\r\n        return _this;\r\n    }\r\n    Terminal.prototype._setup = function () {\r\n        var _this = this;\r\n        Object.keys(DEFAULT_OPTIONS).forEach(function (key) {\r\n            if (_this.options[key] == null) {\r\n                _this.options[key] = DEFAULT_OPTIONS[key];\r\n            }\r\n            _this[key] = _this.options[key];\r\n        });\r\n        this._parent = document ? document.body : null;\r\n        this.cols = this.options.cols;\r\n        this.rows = this.options.rows;\r\n        if (this.options.handler) {\r\n            this.on('data', this.options.handler);\r\n        }\r\n        this.cursorState = 0;\r\n        this.cursorHidden = false;\r\n        this._sendDataQueue = '';\r\n        this._customKeyEventHandler = null;\r\n        this.applicationKeypad = false;\r\n        this.applicationCursor = false;\r\n        this.originMode = false;\r\n        this.insertMode = false;\r\n        this.wraparoundMode = true;\r\n        this.bracketedPasteMode = false;\r\n        this.charset = null;\r\n        this.gcharset = null;\r\n        this.glevel = 0;\r\n        this.charsets = [null];\r\n        this.defAttr = (0 << 18) | (257 << 9) | (256 << 0);\r\n        this.curAttr = (0 << 18) | (257 << 9) | (256 << 0);\r\n        this.params = [];\r\n        this.currentParam = 0;\r\n        this.prefix = '';\r\n        this.postfix = '';\r\n        this.writeBuffer = [];\r\n        this._writeInProgress = false;\r\n        this._xoffSentToCatchUp = false;\r\n        this._userScrolling = false;\r\n        this._inputHandler = new InputHandler_1.InputHandler(this);\r\n        this._parser = new Parser_1.Parser(this._inputHandler, this);\r\n        this.renderer = this.renderer || null;\r\n        this.selectionManager = this.selectionManager || null;\r\n        this.linkifier = this.linkifier || new Linkifier_1.Linkifier(this);\r\n        this._mouseZoneManager = this._mouseZoneManager || null;\r\n        this.soundManager = this.soundManager || new SoundManager_1.SoundManager(this);\r\n        this.buffers = new BufferSet_1.BufferSet(this);\r\n        if (this.selectionManager) {\r\n            this.selectionManager.clearSelection();\r\n            this.selectionManager.initBuffersListeners();\r\n        }\r\n    };\r\n    Object.defineProperty(Terminal.prototype, \"buffer\", {\r\n        get: function () {\r\n            return this.buffers.active;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Terminal, \"strings\", {\r\n        get: function () {\r\n            return Strings;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Terminal.prototype.eraseAttr = function () {\r\n        return (this.defAttr & ~0x1ff) | (this.curAttr & 0x1ff);\r\n    };\r\n    Terminal.prototype.focus = function () {\r\n        if (this.textarea) {\r\n            this.textarea.focus();\r\n        }\r\n    };\r\n    Object.defineProperty(Terminal.prototype, \"isFocused\", {\r\n        get: function () {\r\n            return document.activeElement === this.textarea;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Terminal.prototype.getOption = function (key) {\r\n        if (!(key in DEFAULT_OPTIONS)) {\r\n            throw new Error('No option with key \"' + key + '\"');\r\n        }\r\n        if (typeof this.options[key] !== 'undefined') {\r\n            return this.options[key];\r\n        }\r\n        return this[key];\r\n    };\r\n    Terminal.prototype.setOption = function (key, value) {\r\n        if (!(key in DEFAULT_OPTIONS)) {\r\n            throw new Error('No option with key \"' + key + '\"');\r\n        }\r\n        switch (key) {\r\n            case 'bellStyle':\r\n                if (!value) {\r\n                    value = 'none';\r\n                }\r\n                break;\r\n            case 'cursorStyle':\r\n                if (!value) {\r\n                    value = 'block';\r\n                }\r\n                break;\r\n            case 'fontWeight':\r\n                if (!value) {\r\n                    value = 'normal';\r\n                }\r\n                break;\r\n            case 'fontWeightBold':\r\n                if (!value) {\r\n                    value = 'bold';\r\n                }\r\n                break;\r\n            case 'lineHeight':\r\n                if (value < 1) {\r\n                    console.warn(key + \" cannot be less than 1, value: \" + value);\r\n                    return;\r\n                }\r\n            case 'tabStopWidth':\r\n                if (value < 1) {\r\n                    console.warn(key + \" cannot be less than 1, value: \" + value);\r\n                    return;\r\n                }\r\n                break;\r\n            case 'theme':\r\n                if (this.renderer) {\r\n                    this._setTheme(value);\r\n                    return;\r\n                }\r\n                break;\r\n            case 'scrollback':\r\n                value = Math.min(value, Buffer_1.MAX_BUFFER_SIZE);\r\n                if (value < 0) {\r\n                    console.warn(key + \" cannot be less than 0, value: \" + value);\r\n                    return;\r\n                }\r\n                if (this.options[key] !== value) {\r\n                    var newBufferLength = this.rows + value;\r\n                    if (this.buffer.lines.length > newBufferLength) {\r\n                        var amountToTrim = this.buffer.lines.length - newBufferLength;\r\n                        var needsRefresh = (this.buffer.ydisp - amountToTrim < 0);\r\n                        this.buffer.lines.trimStart(amountToTrim);\r\n                        this.buffer.ybase = Math.max(this.buffer.ybase - amountToTrim, 0);\r\n                        this.buffer.ydisp = Math.max(this.buffer.ydisp - amountToTrim, 0);\r\n                        if (needsRefresh) {\r\n                            this.refresh(0, this.rows - 1);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n        this[key] = value;\r\n        this.options[key] = value;\r\n        switch (key) {\r\n            case 'fontFamily':\r\n            case 'fontSize':\r\n                this.renderer.clear();\r\n                this.charMeasure.measure(this.options);\r\n                break;\r\n            case 'enableBold':\r\n            case 'letterSpacing':\r\n            case 'lineHeight':\r\n            case 'fontWeight':\r\n            case 'fontWeightBold':\r\n                this.renderer.clear();\r\n                this.renderer.onResize(this.cols, this.rows);\r\n                this.refresh(0, this.rows - 1);\r\n            case 'scrollback':\r\n                this.buffers.resize(this.cols, this.rows);\r\n                this.viewport.syncScrollArea();\r\n                break;\r\n            case 'screenReaderMode':\r\n                if (value) {\r\n                    if (!this._accessibilityManager) {\r\n                        this._accessibilityManager = new AccessibilityManager_1.AccessibilityManager(this);\r\n                    }\r\n                }\r\n                else {\r\n                    if (this._accessibilityManager) {\r\n                        this._accessibilityManager.dispose();\r\n                        this._accessibilityManager = null;\r\n                    }\r\n                }\r\n                break;\r\n            case 'tabStopWidth':\r\n                this.buffers.setupTabStops();\r\n                break;\r\n        }\r\n        if (this.renderer) {\r\n            this.renderer.onOptionsChanged();\r\n        }\r\n    };\r\n    Terminal.prototype._onTextAreaFocus = function () {\r\n        if (this.sendFocus) {\r\n            this.send(EscapeSequences_1.C0.ESC + '[I');\r\n        }\r\n        this.element.classList.add('focus');\r\n        this.showCursor();\r\n        this.emit('focus');\r\n    };\r\n    Terminal.prototype.blur = function () {\r\n        return this.textarea.blur();\r\n    };\r\n    Terminal.prototype._onTextAreaBlur = function () {\r\n        this.textarea.value = '';\r\n        this.refresh(this.buffer.y, this.buffer.y);\r\n        if (this.sendFocus) {\r\n            this.send(EscapeSequences_1.C0.ESC + '[O');\r\n        }\r\n        this.element.classList.remove('focus');\r\n        this.emit('blur');\r\n    };\r\n    Terminal.prototype._initGlobal = function () {\r\n        var _this = this;\r\n        this._bindKeys();\r\n        on(this.element, 'copy', function (event) {\r\n            if (!_this.hasSelection()) {\r\n                return;\r\n            }\r\n            Clipboard_1.copyHandler(event, _this, _this.selectionManager);\r\n        });\r\n        var pasteHandlerWrapper = function (event) { return Clipboard_1.pasteHandler(event, _this); };\r\n        on(this.textarea, 'paste', pasteHandlerWrapper);\r\n        on(this.element, 'paste', pasteHandlerWrapper);\r\n        if (Browser.isFirefox) {\r\n            on(this.element, 'mousedown', function (event) {\r\n                if (event.button === 2) {\r\n                    Clipboard_1.rightClickHandler(event, _this.textarea, _this.selectionManager, _this.options.rightClickSelectsWord);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            on(this.element, 'contextmenu', function (event) {\r\n                Clipboard_1.rightClickHandler(event, _this.textarea, _this.selectionManager, _this.options.rightClickSelectsWord);\r\n            });\r\n        }\r\n        if (Browser.isLinux) {\r\n            on(this.element, 'auxclick', function (event) {\r\n                if (event.button === 1) {\r\n                    Clipboard_1.moveTextAreaUnderMouseCursor(event, _this.textarea);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Terminal.prototype._bindKeys = function () {\r\n        var _this = this;\r\n        var self = this;\r\n        on(this.element, 'keydown', function (ev) {\r\n            if (document.activeElement !== this) {\r\n                return;\r\n            }\r\n            self._keyDown(ev);\r\n        }, true);\r\n        on(this.element, 'keypress', function (ev) {\r\n            if (document.activeElement !== this) {\r\n                return;\r\n            }\r\n            self._keyPress(ev);\r\n        }, true);\r\n        on(this.element, 'keyup', function (ev) {\r\n            if (!wasMondifierKeyOnlyEvent(ev)) {\r\n                _this.focus();\r\n            }\r\n        }, true);\r\n        on(this.textarea, 'keydown', function (ev) { return _this._keyDown(ev); }, true);\r\n        on(this.textarea, 'keypress', function (ev) { return _this._keyPress(ev); }, true);\r\n        on(this.textarea, 'compositionstart', function () { return _this._compositionHelper.compositionstart(); });\r\n        on(this.textarea, 'compositionupdate', function (e) { return _this._compositionHelper.compositionupdate(e); });\r\n        on(this.textarea, 'compositionend', function () { return _this._compositionHelper.compositionend(); });\r\n        this.on('refresh', function () { return _this._compositionHelper.updateCompositionElements(); });\r\n        this.on('refresh', function (data) { return _this._queueLinkification(data.start, data.end); });\r\n    };\r\n    Terminal.prototype.open = function (parent) {\r\n        var _this = this;\r\n        this._parent = parent || this._parent;\r\n        if (!this._parent) {\r\n            throw new Error('Terminal requires a parent element.');\r\n        }\r\n        this._context = this._parent.ownerDocument.defaultView;\r\n        this._document = this._parent.ownerDocument;\r\n        this._screenDprMonitor = new ScreenDprMonitor_1.ScreenDprMonitor();\r\n        this._screenDprMonitor.setListener(function () { return _this.emit('dprchange', window.devicePixelRatio); });\r\n        this.element = this._document.createElement('div');\r\n        this.element.dir = 'ltr';\r\n        this.element.classList.add('terminal');\r\n        this.element.classList.add('xterm');\r\n        this.element.setAttribute('tabindex', '0');\r\n        this._parent.appendChild(this.element);\r\n        var fragment = document.createDocumentFragment();\r\n        this._viewportElement = document.createElement('div');\r\n        this._viewportElement.classList.add('xterm-viewport');\r\n        fragment.appendChild(this._viewportElement);\r\n        this._viewportScrollArea = document.createElement('div');\r\n        this._viewportScrollArea.classList.add('xterm-scroll-area');\r\n        this._viewportElement.appendChild(this._viewportScrollArea);\r\n        this.screenElement = document.createElement('div');\r\n        this.screenElement.classList.add('xterm-screen');\r\n        this._helperContainer = document.createElement('div');\r\n        this._helperContainer.classList.add('xterm-helpers');\r\n        this.screenElement.appendChild(this._helperContainer);\r\n        fragment.appendChild(this.screenElement);\r\n        this._mouseZoneManager = new MouseZoneManager_1.MouseZoneManager(this);\r\n        this.on('scroll', function () { return _this._mouseZoneManager.clearAll(); });\r\n        this.linkifier.attachToDom(this._mouseZoneManager);\r\n        this.textarea = document.createElement('textarea');\r\n        this.textarea.classList.add('xterm-helper-textarea');\r\n        this.textarea.setAttribute('aria-label', Strings.promptLabel);\r\n        this.textarea.setAttribute('aria-multiline', 'false');\r\n        this.textarea.setAttribute('autocorrect', 'off');\r\n        this.textarea.setAttribute('autocapitalize', 'off');\r\n        this.textarea.setAttribute('spellcheck', 'false');\r\n        this.textarea.tabIndex = 0;\r\n        this.textarea.addEventListener('focus', function () { return _this._onTextAreaFocus(); });\r\n        this.textarea.addEventListener('blur', function () { return _this._onTextAreaBlur(); });\r\n        this._helperContainer.appendChild(this.textarea);\r\n        this._compositionView = document.createElement('div');\r\n        this._compositionView.classList.add('composition-view');\r\n        this._compositionHelper = new CompositionHelper_1.CompositionHelper(this.textarea, this._compositionView, this);\r\n        this._helperContainer.appendChild(this._compositionView);\r\n        this.charMeasure = new CharMeasure_1.CharMeasure(document, this._helperContainer);\r\n        this.element.appendChild(fragment);\r\n        this.renderer = new Renderer_1.Renderer(this, this.options.theme);\r\n        this.options.theme = null;\r\n        this.viewport = new Viewport_1.Viewport(this, this._viewportElement, this._viewportScrollArea, this.charMeasure);\r\n        this.viewport.onThemeChanged(this.renderer.colorManager.colors);\r\n        this.on('cursormove', function () { return _this.renderer.onCursorMove(); });\r\n        this.on('resize', function () { return _this.renderer.onResize(_this.cols, _this.rows); });\r\n        this.on('blur', function () { return _this.renderer.onBlur(); });\r\n        this.on('focus', function () { return _this.renderer.onFocus(); });\r\n        this.on('dprchange', function () { return _this.renderer.onWindowResize(window.devicePixelRatio); });\r\n        window.addEventListener('resize', function () { return _this.renderer.onWindowResize(window.devicePixelRatio); });\r\n        this.charMeasure.on('charsizechanged', function () { return _this.renderer.onResize(_this.cols, _this.rows); });\r\n        this.renderer.on('resize', function (dimensions) { return _this.viewport.syncScrollArea(); });\r\n        this.selectionManager = new SelectionManager_1.SelectionManager(this, this.charMeasure);\r\n        this.element.addEventListener('mousedown', function (e) { return _this.selectionManager.onMouseDown(e); });\r\n        this.selectionManager.on('refresh', function (data) { return _this.renderer.onSelectionChanged(data.start, data.end); });\r\n        this.selectionManager.on('newselection', function (text) {\r\n            _this.textarea.value = text;\r\n            _this.textarea.focus();\r\n            _this.textarea.select();\r\n        });\r\n        this.on('scroll', function () {\r\n            _this.viewport.syncScrollArea();\r\n            _this.selectionManager.refresh();\r\n        });\r\n        this._viewportElement.addEventListener('scroll', function () { return _this.selectionManager.refresh(); });\r\n        this.mouseHelper = new MouseHelper_1.MouseHelper(this.renderer);\r\n        if (this.options.screenReaderMode) {\r\n            this._accessibilityManager = new AccessibilityManager_1.AccessibilityManager(this);\r\n        }\r\n        this.charMeasure.measure(this.options);\r\n        this.refresh(0, this.rows - 1);\r\n        this._initGlobal();\r\n        this.bindMouse();\r\n    };\r\n    Terminal.prototype._setTheme = function (theme) {\r\n        var colors = this.renderer.setTheme(theme);\r\n        if (this.viewport) {\r\n            this.viewport.onThemeChanged(colors);\r\n        }\r\n    };\r\n    Terminal.applyAddon = function (addon) {\r\n        addon.apply(Terminal);\r\n    };\r\n    Terminal.prototype.bindMouse = function () {\r\n        var _this = this;\r\n        var el = this.element;\r\n        var self = this;\r\n        var pressed = 32;\r\n        function sendButton(ev) {\r\n            var button;\r\n            var pos;\r\n            button = getButton(ev);\r\n            pos = self.mouseHelper.getRawByteCoords(ev, self.screenElement, self.charMeasure, self.options.lineHeight, self.cols, self.rows);\r\n            if (!pos)\r\n                return;\r\n            sendEvent(button, pos);\r\n            switch (ev.overrideType || ev.type) {\r\n                case 'mousedown':\r\n                    pressed = button;\r\n                    break;\r\n                case 'mouseup':\r\n                    pressed = 32;\r\n                    break;\r\n                case 'wheel':\r\n                    break;\r\n            }\r\n        }\r\n        function sendMove(ev) {\r\n            var button = pressed;\r\n            var pos = self.mouseHelper.getRawByteCoords(ev, self.screenElement, self.charMeasure, self.options.lineHeight, self.cols, self.rows);\r\n            if (!pos)\r\n                return;\r\n            button += 32;\r\n            sendEvent(button, pos);\r\n        }\r\n        function encode(data, ch) {\r\n            if (!self.utfMouse) {\r\n                if (ch === 255) {\r\n                    data.push(0);\r\n                    return;\r\n                }\r\n                if (ch > 127)\r\n                    ch = 127;\r\n                data.push(ch);\r\n            }\r\n            else {\r\n                if (ch === 2047) {\r\n                    data.push(0);\r\n                    return;\r\n                }\r\n                if (ch < 127) {\r\n                    data.push(ch);\r\n                }\r\n                else {\r\n                    if (ch > 2047)\r\n                        ch = 2047;\r\n                    data.push(0xC0 | (ch >> 6));\r\n                    data.push(0x80 | (ch & 0x3F));\r\n                }\r\n            }\r\n        }\r\n        function sendEvent(button, pos) {\r\n            if (self._vt300Mouse) {\r\n                button &= 3;\r\n                pos.x -= 32;\r\n                pos.y -= 32;\r\n                var data_1 = EscapeSequences_1.C0.ESC + '[24';\r\n                if (button === 0)\r\n                    data_1 += '1';\r\n                else if (button === 1)\r\n                    data_1 += '3';\r\n                else if (button === 2)\r\n                    data_1 += '5';\r\n                else if (button === 3)\r\n                    return;\r\n                else\r\n                    data_1 += '0';\r\n                data_1 += '~[' + pos.x + ',' + pos.y + ']\\r';\r\n                self.send(data_1);\r\n                return;\r\n            }\r\n            if (self._decLocator) {\r\n                button &= 3;\r\n                pos.x -= 32;\r\n                pos.y -= 32;\r\n                if (button === 0)\r\n                    button = 2;\r\n                else if (button === 1)\r\n                    button = 4;\r\n                else if (button === 2)\r\n                    button = 6;\r\n                else if (button === 3)\r\n                    button = 3;\r\n                self.send(EscapeSequences_1.C0.ESC + '['\r\n                    + button\r\n                    + ';'\r\n                    + (button === 3 ? 4 : 0)\r\n                    + ';'\r\n                    + pos.y\r\n                    + ';'\r\n                    + pos.x\r\n                    + ';'\r\n                    + pos.page || 0\r\n                    + '&w');\r\n                return;\r\n            }\r\n            if (self.urxvtMouse) {\r\n                pos.x -= 32;\r\n                pos.y -= 32;\r\n                pos.x++;\r\n                pos.y++;\r\n                self.send(EscapeSequences_1.C0.ESC + '[' + button + ';' + pos.x + ';' + pos.y + 'M');\r\n                return;\r\n            }\r\n            if (self.sgrMouse) {\r\n                pos.x -= 32;\r\n                pos.y -= 32;\r\n                self.send(EscapeSequences_1.C0.ESC + '[<'\r\n                    + (((button & 3) === 3 ? button & ~3 : button) - 32)\r\n                    + ';'\r\n                    + pos.x\r\n                    + ';'\r\n                    + pos.y\r\n                    + ((button & 3) === 3 ? 'm' : 'M'));\r\n                return;\r\n            }\r\n            var data = [];\r\n            encode(data, button);\r\n            encode(data, pos.x);\r\n            encode(data, pos.y);\r\n            self.send(EscapeSequences_1.C0.ESC + '[M' + String.fromCharCode.apply(String, data));\r\n        }\r\n        function getButton(ev) {\r\n            var button;\r\n            var shift;\r\n            var meta;\r\n            var ctrl;\r\n            var mod;\r\n            switch (ev.overrideType || ev.type) {\r\n                case 'mousedown':\r\n                    button = ev.button != null\r\n                        ? +ev.button\r\n                        : ev.which != null\r\n                            ? ev.which - 1\r\n                            : null;\r\n                    if (Browser.isMSIE) {\r\n                        button = button === 1 ? 0 : button === 4 ? 1 : button;\r\n                    }\r\n                    break;\r\n                case 'mouseup':\r\n                    button = 3;\r\n                    break;\r\n                case 'DOMMouseScroll':\r\n                    button = ev.detail < 0\r\n                        ? 64\r\n                        : 65;\r\n                    break;\r\n                case 'wheel':\r\n                    button = ev.wheelDeltaY > 0\r\n                        ? 64\r\n                        : 65;\r\n                    break;\r\n            }\r\n            shift = ev.shiftKey ? 4 : 0;\r\n            meta = ev.metaKey ? 8 : 0;\r\n            ctrl = ev.ctrlKey ? 16 : 0;\r\n            mod = shift | meta | ctrl;\r\n            if (self.vt200Mouse) {\r\n                mod &= ctrl;\r\n            }\r\n            else if (!self.normalMouse) {\r\n                mod = 0;\r\n            }\r\n            button = (32 + (mod << 2)) + button;\r\n            return button;\r\n        }\r\n        on(el, 'mousedown', function (ev) {\r\n            ev.preventDefault();\r\n            _this.focus();\r\n            if (!_this.mouseEvents || _this.selectionManager.shouldForceSelection(ev)) {\r\n                return;\r\n            }\r\n            sendButton(ev);\r\n            if (_this.vt200Mouse) {\r\n                ev.overrideType = 'mouseup';\r\n                sendButton(ev);\r\n                return _this.cancel(ev);\r\n            }\r\n            if (_this.normalMouse)\r\n                on(_this._document, 'mousemove', sendMove);\r\n            if (!_this.x10Mouse) {\r\n                var handler_1 = function (ev) {\r\n                    sendButton(ev);\r\n                    if (_this.normalMouse)\r\n                        off(_this._document, 'mousemove', sendMove);\r\n                    off(_this._document, 'mouseup', handler_1);\r\n                    return _this.cancel(ev);\r\n                };\r\n                on(_this._document, 'mouseup', handler_1);\r\n            }\r\n            return _this.cancel(ev);\r\n        });\r\n        on(el, 'wheel', function (ev) {\r\n            if (!_this.mouseEvents) {\r\n                if (!_this.buffer.hasScrollback) {\r\n                    var amount = _this.viewport.getLinesScrolled(ev);\r\n                    if (amount === 0) {\r\n                        return;\r\n                    }\r\n                    var sequence = EscapeSequences_1.C0.ESC + (_this.applicationCursor ? 'O' : '[') + (ev.deltaY < 0 ? 'A' : 'B');\r\n                    var data = '';\r\n                    for (var i = 0; i < Math.abs(amount); i++) {\r\n                        data += sequence;\r\n                    }\r\n                    _this.send(data);\r\n                }\r\n                return;\r\n            }\r\n            if (_this.x10Mouse || _this._vt300Mouse || _this._decLocator)\r\n                return;\r\n            sendButton(ev);\r\n            ev.preventDefault();\r\n        });\r\n        on(el, 'wheel', function (ev) {\r\n            if (_this.mouseEvents)\r\n                return;\r\n            _this.viewport.onWheel(ev);\r\n            return _this.cancel(ev);\r\n        });\r\n        on(el, 'touchstart', function (ev) {\r\n            if (_this.mouseEvents)\r\n                return;\r\n            _this.viewport.onTouchStart(ev);\r\n            return _this.cancel(ev);\r\n        });\r\n        on(el, 'touchmove', function (ev) {\r\n            if (_this.mouseEvents)\r\n                return;\r\n            _this.viewport.onTouchMove(ev);\r\n            return _this.cancel(ev);\r\n        });\r\n    };\r\n    Terminal.prototype.destroy = function () {\r\n        _super.prototype.destroy.call(this);\r\n        this.handler = function () { };\r\n        this.write = function () { };\r\n        if (this.element && this.element.parentNode) {\r\n            this.element.parentNode.removeChild(this.element);\r\n        }\r\n    };\r\n    Terminal.prototype.refresh = function (start, end) {\r\n        if (this.renderer) {\r\n            this.renderer.refreshRows(start, end);\r\n        }\r\n    };\r\n    Terminal.prototype._queueLinkification = function (start, end) {\r\n        if (this.linkifier) {\r\n            this.linkifier.linkifyRows(start, end);\r\n        }\r\n    };\r\n    Terminal.prototype.showCursor = function () {\r\n        if (!this.cursorState) {\r\n            this.cursorState = 1;\r\n            this.refresh(this.buffer.y, this.buffer.y);\r\n        }\r\n    };\r\n    Terminal.prototype.scroll = function (isWrapped) {\r\n        var newLine = this.blankLine(undefined, isWrapped);\r\n        var topRow = this.buffer.ybase + this.buffer.scrollTop;\r\n        var bottomRow = this.buffer.ybase + this.buffer.scrollBottom;\r\n        if (this.buffer.scrollTop === 0) {\r\n            var willBufferBeTrimmed = this.buffer.lines.length === this.buffer.lines.maxLength;\r\n            if (bottomRow === this.buffer.lines.length - 1) {\r\n                this.buffer.lines.push(newLine);\r\n            }\r\n            else {\r\n                this.buffer.lines.splice(bottomRow + 1, 0, newLine);\r\n            }\r\n            if (!willBufferBeTrimmed) {\r\n                this.buffer.ybase++;\r\n                if (!this._userScrolling) {\r\n                    this.buffer.ydisp++;\r\n                }\r\n            }\r\n            else {\r\n                if (this._userScrolling) {\r\n                    this.buffer.ydisp = Math.max(this.buffer.ydisp - 1, 0);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var scrollRegionHeight = bottomRow - topRow + 1;\r\n            this.buffer.lines.shiftElements(topRow + 1, scrollRegionHeight - 1, -1);\r\n            this.buffer.lines.set(bottomRow, newLine);\r\n        }\r\n        if (!this._userScrolling) {\r\n            this.buffer.ydisp = this.buffer.ybase;\r\n        }\r\n        this.updateRange(this.buffer.scrollTop);\r\n        this.updateRange(this.buffer.scrollBottom);\r\n        this.emit('scroll', this.buffer.ydisp);\r\n    };\r\n    Terminal.prototype.scrollLines = function (disp, suppressScrollEvent) {\r\n        if (disp < 0) {\r\n            if (this.buffer.ydisp === 0) {\r\n                return;\r\n            }\r\n            this._userScrolling = true;\r\n        }\r\n        else if (disp + this.buffer.ydisp >= this.buffer.ybase) {\r\n            this._userScrolling = false;\r\n        }\r\n        var oldYdisp = this.buffer.ydisp;\r\n        this.buffer.ydisp = Math.max(Math.min(this.buffer.ydisp + disp, this.buffer.ybase), 0);\r\n        if (oldYdisp === this.buffer.ydisp) {\r\n            return;\r\n        }\r\n        if (!suppressScrollEvent) {\r\n            this.emit('scroll', this.buffer.ydisp);\r\n        }\r\n        this.refresh(0, this.rows - 1);\r\n    };\r\n    Terminal.prototype.scrollPages = function (pageCount) {\r\n        this.scrollLines(pageCount * (this.rows - 1));\r\n    };\r\n    Terminal.prototype.scrollToTop = function () {\r\n        this.scrollLines(-this.buffer.ydisp);\r\n    };\r\n    Terminal.prototype.scrollToBottom = function () {\r\n        this.scrollLines(this.buffer.ybase - this.buffer.ydisp);\r\n    };\r\n    Terminal.prototype.scrollToLine = function (line) {\r\n        var scrollAmount = line - this.buffer.ydisp;\r\n        if (scrollAmount !== 0) {\r\n            this.scrollLines(scrollAmount);\r\n        }\r\n    };\r\n    Terminal.prototype.write = function (data) {\r\n        var _this = this;\r\n        if (!data) {\r\n            return;\r\n        }\r\n        this.writeBuffer.push(data);\r\n        if (this.options.useFlowControl && !this._xoffSentToCatchUp && this.writeBuffer.length >= WRITE_BUFFER_PAUSE_THRESHOLD) {\r\n            this.send(EscapeSequences_1.C0.DC3);\r\n            this._xoffSentToCatchUp = true;\r\n        }\r\n        if (!this._writeInProgress && this.writeBuffer.length > 0) {\r\n            this._writeInProgress = true;\r\n            setTimeout(function () {\r\n                _this._innerWrite();\r\n            });\r\n        }\r\n    };\r\n    Terminal.prototype._innerWrite = function () {\r\n        var _this = this;\r\n        var writeBatch = this.writeBuffer.splice(0, WRITE_BATCH_SIZE);\r\n        while (writeBatch.length > 0) {\r\n            var data = writeBatch.shift();\r\n            if (this._xoffSentToCatchUp && writeBatch.length === 0 && this.writeBuffer.length === 0) {\r\n                this.send(EscapeSequences_1.C0.DC1);\r\n                this._xoffSentToCatchUp = false;\r\n            }\r\n            this._refreshStart = this.buffer.y;\r\n            this._refreshEnd = this.buffer.y;\r\n            var state = this._parser.parse(data);\r\n            this._parser.setState(state);\r\n            this.updateRange(this.buffer.y);\r\n            this.refresh(this._refreshStart, this._refreshEnd);\r\n        }\r\n        if (this.writeBuffer.length > 0) {\r\n            setTimeout(function () { return _this._innerWrite(); }, 0);\r\n        }\r\n        else {\r\n            this._writeInProgress = false;\r\n        }\r\n    };\r\n    Terminal.prototype.writeln = function (data) {\r\n        this.write(data + '\\r\\n');\r\n    };\r\n    Terminal.prototype.attachCustomKeyEventHandler = function (customKeyEventHandler) {\r\n        this._customKeyEventHandler = customKeyEventHandler;\r\n    };\r\n    Terminal.prototype.registerLinkMatcher = function (regex, handler, options) {\r\n        var matcherId = this.linkifier.registerLinkMatcher(regex, handler, options);\r\n        this.refresh(0, this.rows - 1);\r\n        return matcherId;\r\n    };\r\n    Terminal.prototype.deregisterLinkMatcher = function (matcherId) {\r\n        if (this.linkifier.deregisterLinkMatcher(matcherId)) {\r\n            this.refresh(0, this.rows - 1);\r\n        }\r\n    };\r\n    Object.defineProperty(Terminal.prototype, \"markers\", {\r\n        get: function () {\r\n            return this.buffer.markers;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Terminal.prototype.addMarker = function (cursorYOffset) {\r\n        if (this.buffer !== this.buffers.normal) {\r\n            return;\r\n        }\r\n        return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + cursorYOffset);\r\n    };\r\n    Terminal.prototype.hasSelection = function () {\r\n        return this.selectionManager ? this.selectionManager.hasSelection : false;\r\n    };\r\n    Terminal.prototype.getSelection = function () {\r\n        return this.selectionManager ? this.selectionManager.selectionText : '';\r\n    };\r\n    Terminal.prototype.clearSelection = function () {\r\n        if (this.selectionManager) {\r\n            this.selectionManager.clearSelection();\r\n        }\r\n    };\r\n    Terminal.prototype.selectAll = function () {\r\n        if (this.selectionManager) {\r\n            this.selectionManager.selectAll();\r\n        }\r\n    };\r\n    Terminal.prototype.selectLines = function (start, end) {\r\n        if (this.selectionManager) {\r\n            this.selectionManager.selectLines(start, end);\r\n        }\r\n    };\r\n    Terminal.prototype._keyDown = function (ev) {\r\n        if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\r\n            return false;\r\n        }\r\n        if (!this._compositionHelper.keydown(ev)) {\r\n            if (this.buffer.ybase !== this.buffer.ydisp) {\r\n                this.scrollToBottom();\r\n            }\r\n            return false;\r\n        }\r\n        var result = this._evaluateKeyEscapeSequence(ev);\r\n        if (result.scrollLines) {\r\n            this.scrollLines(result.scrollLines);\r\n            return this.cancel(ev, true);\r\n        }\r\n        if (this._isThirdLevelShift(this.browser, ev)) {\r\n            return true;\r\n        }\r\n        if (result.cancel) {\r\n            this.cancel(ev, true);\r\n        }\r\n        if (!result.key) {\r\n            return true;\r\n        }\r\n        this.emit('keydown', ev);\r\n        this.emit('key', result.key, ev);\r\n        this.showCursor();\r\n        this.handler(result.key);\r\n        return this.cancel(ev, true);\r\n    };\r\n    Terminal.prototype._isThirdLevelShift = function (browser, ev) {\r\n        var thirdLevelKey = (browser.isMac && !this.options.macOptionIsMeta && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\r\n            (browser.isMSWindows && ev.altKey && ev.ctrlKey && !ev.metaKey);\r\n        if (ev.type === 'keypress') {\r\n            return thirdLevelKey;\r\n        }\r\n        return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\r\n    };\r\n    Terminal.prototype._evaluateKeyEscapeSequence = function (ev) {\r\n        var result = {\r\n            cancel: false,\r\n            key: undefined,\r\n            scrollLines: undefined\r\n        };\r\n        var modifiers = (ev.shiftKey ? 1 : 0) | (ev.altKey ? 2 : 0) | (ev.ctrlKey ? 4 : 0) | (ev.metaKey ? 8 : 0);\r\n        switch (ev.keyCode) {\r\n            case 0:\r\n                if (ev.key === 'UIKeyInputUpArrow') {\r\n                    if (this.applicationCursor) {\r\n                        result.key = EscapeSequences_1.C0.ESC + 'OA';\r\n                    }\r\n                    else {\r\n                        result.key = EscapeSequences_1.C0.ESC + '[A';\r\n                    }\r\n                }\r\n                else if (ev.key === 'UIKeyInputLeftArrow') {\r\n                    if (this.applicationCursor) {\r\n                        result.key = EscapeSequences_1.C0.ESC + 'OD';\r\n                    }\r\n                    else {\r\n                        result.key = EscapeSequences_1.C0.ESC + '[D';\r\n                    }\r\n                }\r\n                else if (ev.key === 'UIKeyInputRightArrow') {\r\n                    if (this.applicationCursor) {\r\n                        result.key = EscapeSequences_1.C0.ESC + 'OC';\r\n                    }\r\n                    else {\r\n                        result.key = EscapeSequences_1.C0.ESC + '[C';\r\n                    }\r\n                }\r\n                else if (ev.key === 'UIKeyInputDownArrow') {\r\n                    if (this.applicationCursor) {\r\n                        result.key = EscapeSequences_1.C0.ESC + 'OB';\r\n                    }\r\n                    else {\r\n                        result.key = EscapeSequences_1.C0.ESC + '[B';\r\n                    }\r\n                }\r\n                break;\r\n            case 8:\r\n                if (ev.shiftKey) {\r\n                    result.key = EscapeSequences_1.C0.BS;\r\n                    break;\r\n                }\r\n                else if (ev.altKey) {\r\n                    result.key = EscapeSequences_1.C0.ESC + EscapeSequences_1.C0.DEL;\r\n                    break;\r\n                }\r\n                result.key = EscapeSequences_1.C0.DEL;\r\n                break;\r\n            case 9:\r\n                if (ev.shiftKey) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[Z';\r\n                    break;\r\n                }\r\n                result.key = EscapeSequences_1.C0.HT;\r\n                result.cancel = true;\r\n                break;\r\n            case 13:\r\n                result.key = EscapeSequences_1.C0.CR;\r\n                result.cancel = true;\r\n                break;\r\n            case 27:\r\n                result.key = EscapeSequences_1.C0.ESC;\r\n                result.cancel = true;\r\n                break;\r\n            case 37:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'D';\r\n                    if (result.key === EscapeSequences_1.C0.ESC + '[1;3D') {\r\n                        result.key = (this.browser.isMac) ? EscapeSequences_1.C0.ESC + 'b' : EscapeSequences_1.C0.ESC + '[1;5D';\r\n                    }\r\n                }\r\n                else if (this.applicationCursor) {\r\n                    result.key = EscapeSequences_1.C0.ESC + 'OD';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[D';\r\n                }\r\n                break;\r\n            case 39:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'C';\r\n                    if (result.key === EscapeSequences_1.C0.ESC + '[1;3C') {\r\n                        result.key = (this.browser.isMac) ? EscapeSequences_1.C0.ESC + 'f' : EscapeSequences_1.C0.ESC + '[1;5C';\r\n                    }\r\n                }\r\n                else if (this.applicationCursor) {\r\n                    result.key = EscapeSequences_1.C0.ESC + 'OC';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[C';\r\n                }\r\n                break;\r\n            case 38:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'A';\r\n                    if (result.key === EscapeSequences_1.C0.ESC + '[1;3A') {\r\n                        result.key = EscapeSequences_1.C0.ESC + '[1;5A';\r\n                    }\r\n                }\r\n                else if (this.applicationCursor) {\r\n                    result.key = EscapeSequences_1.C0.ESC + 'OA';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[A';\r\n                }\r\n                break;\r\n            case 40:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'B';\r\n                    if (result.key === EscapeSequences_1.C0.ESC + '[1;3B') {\r\n                        result.key = EscapeSequences_1.C0.ESC + '[1;5B';\r\n                    }\r\n                }\r\n                else if (this.applicationCursor) {\r\n                    result.key = EscapeSequences_1.C0.ESC + 'OB';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[B';\r\n                }\r\n                break;\r\n            case 45:\r\n                if (!ev.shiftKey && !ev.ctrlKey) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[2~';\r\n                }\r\n                break;\r\n            case 46:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[3;' + (modifiers + 1) + '~';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[3~';\r\n                }\r\n                break;\r\n            case 36:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'H';\r\n                }\r\n                else if (this.applicationCursor) {\r\n                    result.key = EscapeSequences_1.C0.ESC + 'OH';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[H';\r\n                }\r\n                break;\r\n            case 35:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'F';\r\n                }\r\n                else if (this.applicationCursor) {\r\n                    result.key = EscapeSequences_1.C0.ESC + 'OF';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[F';\r\n                }\r\n                break;\r\n            case 33:\r\n                if (ev.shiftKey) {\r\n                    result.scrollLines = -(this.rows - 1);\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[5~';\r\n                }\r\n                break;\r\n            case 34:\r\n                if (ev.shiftKey) {\r\n                    result.scrollLines = this.rows - 1;\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[6~';\r\n                }\r\n                break;\r\n            case 112:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'P';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + 'OP';\r\n                }\r\n                break;\r\n            case 113:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'Q';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + 'OQ';\r\n                }\r\n                break;\r\n            case 114:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'R';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + 'OR';\r\n                }\r\n                break;\r\n            case 115:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'S';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + 'OS';\r\n                }\r\n                break;\r\n            case 116:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[15;' + (modifiers + 1) + '~';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[15~';\r\n                }\r\n                break;\r\n            case 117:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[17;' + (modifiers + 1) + '~';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[17~';\r\n                }\r\n                break;\r\n            case 118:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[18;' + (modifiers + 1) + '~';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[18~';\r\n                }\r\n                break;\r\n            case 119:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[19;' + (modifiers + 1) + '~';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[19~';\r\n                }\r\n                break;\r\n            case 120:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[20;' + (modifiers + 1) + '~';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[20~';\r\n                }\r\n                break;\r\n            case 121:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[21;' + (modifiers + 1) + '~';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[21~';\r\n                }\r\n                break;\r\n            case 122:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[23;' + (modifiers + 1) + '~';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[23~';\r\n                }\r\n                break;\r\n            case 123:\r\n                if (modifiers) {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[24;' + (modifiers + 1) + '~';\r\n                }\r\n                else {\r\n                    result.key = EscapeSequences_1.C0.ESC + '[24~';\r\n                }\r\n                break;\r\n            default:\r\n                if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\r\n                    if (ev.keyCode >= 65 && ev.keyCode <= 90) {\r\n                        result.key = String.fromCharCode(ev.keyCode - 64);\r\n                    }\r\n                    else if (ev.keyCode === 32) {\r\n                        result.key = String.fromCharCode(0);\r\n                    }\r\n                    else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\r\n                        result.key = String.fromCharCode(ev.keyCode - 51 + 27);\r\n                    }\r\n                    else if (ev.keyCode === 56) {\r\n                        result.key = String.fromCharCode(127);\r\n                    }\r\n                    else if (ev.keyCode === 219) {\r\n                        result.key = String.fromCharCode(27);\r\n                    }\r\n                    else if (ev.keyCode === 220) {\r\n                        result.key = String.fromCharCode(28);\r\n                    }\r\n                    else if (ev.keyCode === 221) {\r\n                        result.key = String.fromCharCode(29);\r\n                    }\r\n                }\r\n                else if ((!this.browser.isMac || this.options.macOptionIsMeta) && ev.altKey && !ev.metaKey) {\r\n                    var keyMapping = KEYCODE_KEY_MAPPINGS[ev.keyCode];\r\n                    var key = keyMapping && keyMapping[!ev.shiftKey ? 0 : 1];\r\n                    if (key) {\r\n                        result.key = EscapeSequences_1.C0.ESC + key;\r\n                    }\r\n                    else if (ev.keyCode >= 65 && ev.keyCode <= 90) {\r\n                        var keyCode = ev.ctrlKey ? ev.keyCode - 64 : ev.keyCode + 32;\r\n                        result.key = EscapeSequences_1.C0.ESC + String.fromCharCode(keyCode);\r\n                    }\r\n                }\r\n                else if (this.browser.isMac && !ev.altKey && !ev.ctrlKey && ev.metaKey) {\r\n                    if (ev.keyCode === 65) {\r\n                        this.selectAll();\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n        return result;\r\n    };\r\n    Terminal.prototype.setgLevel = function (g) {\r\n        this.glevel = g;\r\n        this.charset = this.charsets[g];\r\n    };\r\n    Terminal.prototype.setgCharset = function (g, charset) {\r\n        this.charsets[g] = charset;\r\n        if (this.glevel === g) {\r\n            this.charset = charset;\r\n        }\r\n    };\r\n    Terminal.prototype._keyPress = function (ev) {\r\n        var key;\r\n        if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\r\n            return false;\r\n        }\r\n        this.cancel(ev);\r\n        if (ev.charCode) {\r\n            key = ev.charCode;\r\n        }\r\n        else if (ev.which == null) {\r\n            key = ev.keyCode;\r\n        }\r\n        else if (ev.which !== 0 && ev.charCode !== 0) {\r\n            key = ev.which;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        if (!key || ((ev.altKey || ev.ctrlKey || ev.metaKey) && !this._isThirdLevelShift(this.browser, ev))) {\r\n            return false;\r\n        }\r\n        key = String.fromCharCode(key);\r\n        this.emit('keypress', key, ev);\r\n        this.emit('key', key, ev);\r\n        this.showCursor();\r\n        this.handler(key);\r\n        return true;\r\n    };\r\n    Terminal.prototype.send = function (data) {\r\n        var _this = this;\r\n        if (!this._sendDataQueue) {\r\n            setTimeout(function () {\r\n                _this.handler(_this._sendDataQueue);\r\n                _this._sendDataQueue = '';\r\n            }, 1);\r\n        }\r\n        this._sendDataQueue += data;\r\n    };\r\n    Terminal.prototype.bell = function () {\r\n        var _this = this;\r\n        this.emit('bell');\r\n        if (this._soundBell()) {\r\n            this.soundManager.playBellSound();\r\n        }\r\n        if (this._visualBell()) {\r\n            this.element.classList.add('visual-bell-active');\r\n            clearTimeout(this._visualBellTimer);\r\n            this._visualBellTimer = window.setTimeout(function () {\r\n                _this.element.classList.remove('visual-bell-active');\r\n            }, 200);\r\n        }\r\n    };\r\n    Terminal.prototype.log = function (text, data) {\r\n        if (!this.options.debug)\r\n            return;\r\n        if (!this._context.console || !this._context.console.log)\r\n            return;\r\n        this._context.console.log(text, data);\r\n    };\r\n    Terminal.prototype.error = function (text, data) {\r\n        if (!this.options.debug)\r\n            return;\r\n        if (!this._context.console || !this._context.console.error)\r\n            return;\r\n        this._context.console.error(text, data);\r\n    };\r\n    Terminal.prototype.resize = function (x, y) {\r\n        if (isNaN(x) || isNaN(y)) {\r\n            return;\r\n        }\r\n        if (x === this.cols && y === this.rows) {\r\n            if (!this.charMeasure.width || !this.charMeasure.height) {\r\n                this.charMeasure.measure(this.options);\r\n            }\r\n            return;\r\n        }\r\n        if (x < 1)\r\n            x = 1;\r\n        if (y < 1)\r\n            y = 1;\r\n        this.buffers.resize(x, y);\r\n        this.cols = x;\r\n        this.rows = y;\r\n        this.buffers.setupTabStops(this.cols);\r\n        if (this.charMeasure) {\r\n            this.charMeasure.measure(this.options);\r\n        }\r\n        this.refresh(0, this.rows - 1);\r\n        this.emit('resize', { cols: x, rows: y });\r\n    };\r\n    Terminal.prototype.updateRange = function (y) {\r\n        if (y < this._refreshStart)\r\n            this._refreshStart = y;\r\n        if (y > this._refreshEnd)\r\n            this._refreshEnd = y;\r\n    };\r\n    Terminal.prototype.maxRange = function () {\r\n        this._refreshStart = 0;\r\n        this._refreshEnd = this.rows - 1;\r\n    };\r\n    Terminal.prototype.eraseRight = function (x, y) {\r\n        var line = this.buffer.lines.get(this.buffer.ybase + y);\r\n        if (!line) {\r\n            return;\r\n        }\r\n        var ch = [this.eraseAttr(), ' ', 1, 32];\r\n        for (; x < this.cols; x++) {\r\n            line[x] = ch;\r\n        }\r\n        this.updateRange(y);\r\n    };\r\n    Terminal.prototype.eraseLeft = function (x, y) {\r\n        var line = this.buffer.lines.get(this.buffer.ybase + y);\r\n        if (!line) {\r\n            return;\r\n        }\r\n        var ch = [this.eraseAttr(), ' ', 1, 32];\r\n        x++;\r\n        while (x--) {\r\n            line[x] = ch;\r\n        }\r\n        this.updateRange(y);\r\n    };\r\n    Terminal.prototype.clear = function () {\r\n        if (this.buffer.ybase === 0 && this.buffer.y === 0) {\r\n            return;\r\n        }\r\n        this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y));\r\n        this.buffer.lines.length = 1;\r\n        this.buffer.ydisp = 0;\r\n        this.buffer.ybase = 0;\r\n        this.buffer.y = 0;\r\n        for (var i = 1; i < this.rows; i++) {\r\n            this.buffer.lines.push(this.blankLine());\r\n        }\r\n        this.refresh(0, this.rows - 1);\r\n        this.emit('scroll', this.buffer.ydisp);\r\n    };\r\n    Terminal.prototype.eraseLine = function (y) {\r\n        this.eraseRight(0, y);\r\n    };\r\n    Terminal.prototype.blankLine = function (cur, isWrapped, cols) {\r\n        var attr = cur ? this.eraseAttr() : this.defAttr;\r\n        var ch = [attr, ' ', 1, 32];\r\n        var line = [];\r\n        if (isWrapped) {\r\n            line.isWrapped = isWrapped;\r\n        }\r\n        cols = cols || this.cols;\r\n        for (var i = 0; i < cols; i++) {\r\n            line[i] = ch;\r\n        }\r\n        return line;\r\n    };\r\n    Terminal.prototype.ch = function (cur) {\r\n        if (cur) {\r\n            return [this.eraseAttr(), ' ', 1, 32];\r\n        }\r\n        return [this.defAttr, ' ', 1, 32];\r\n    };\r\n    Terminal.prototype.is = function (term) {\r\n        return (this.options.termName + '').indexOf(term) === 0;\r\n    };\r\n    Terminal.prototype.handler = function (data) {\r\n        if (this.options.disableStdin) {\r\n            return;\r\n        }\r\n        if (this.selectionManager && this.selectionManager.hasSelection) {\r\n            this.selectionManager.clearSelection();\r\n        }\r\n        if (this.buffer.ybase !== this.buffer.ydisp) {\r\n            this.scrollToBottom();\r\n        }\r\n        this.emit('data', data);\r\n    };\r\n    Terminal.prototype.handleTitle = function (title) {\r\n        this.emit('title', title);\r\n    };\r\n    Terminal.prototype.index = function () {\r\n        this.buffer.y++;\r\n        if (this.buffer.y > this.buffer.scrollBottom) {\r\n            this.buffer.y--;\r\n            this.scroll();\r\n        }\r\n        if (this.buffer.x >= this.cols) {\r\n            this.buffer.x--;\r\n        }\r\n    };\r\n    Terminal.prototype.reverseIndex = function () {\r\n        if (this.buffer.y === this.buffer.scrollTop) {\r\n            var scrollRegionHeight = this.buffer.scrollBottom - this.buffer.scrollTop;\r\n            this.buffer.lines.shiftElements(this.buffer.y + this.buffer.ybase, scrollRegionHeight, 1);\r\n            this.buffer.lines.set(this.buffer.y + this.buffer.ybase, this.blankLine(true));\r\n            this.updateRange(this.buffer.scrollTop);\r\n            this.updateRange(this.buffer.scrollBottom);\r\n        }\r\n        else {\r\n            this.buffer.y--;\r\n        }\r\n    };\r\n    Terminal.prototype.reset = function () {\r\n        this.options.rows = this.rows;\r\n        this.options.cols = this.cols;\r\n        var customKeyEventHandler = this._customKeyEventHandler;\r\n        var inputHandler = this._inputHandler;\r\n        this._setup();\r\n        this._customKeyEventHandler = customKeyEventHandler;\r\n        this._inputHandler = inputHandler;\r\n        this.refresh(0, this.rows - 1);\r\n        if (this.viewport) {\r\n            this.viewport.syncScrollArea();\r\n        }\r\n    };\r\n    Terminal.prototype.tabSet = function () {\r\n        this.buffer.tabs[this.buffer.x] = true;\r\n    };\r\n    Terminal.prototype.cancel = function (ev, force) {\r\n        if (!this.options.cancelEvents && !force) {\r\n            return;\r\n        }\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n        return false;\r\n    };\r\n    Terminal.prototype.matchColor = function (r1, g1, b1) {\r\n        return matchColor_(r1, g1, b1);\r\n    };\r\n    Terminal.prototype._visualBell = function () {\r\n        return false;\r\n    };\r\n    Terminal.prototype._soundBell = function () {\r\n        return this.options.bellStyle === 'sound';\r\n    };\r\n    return Terminal;\r\n}(EventEmitter_1.EventEmitter));\r\nexports.Terminal = Terminal;\r\nfunction globalOn(el, type, handler, capture) {\r\n    if (!Array.isArray(el)) {\r\n        el = [el];\r\n    }\r\n    el.forEach(function (element) {\r\n        element.addEventListener(type, handler, capture || false);\r\n    });\r\n}\r\nvar on = globalOn;\r\nfunction off(el, type, handler, capture) {\r\n    if (capture === void 0) { capture = false; }\r\n    el.removeEventListener(type, handler, capture);\r\n}\r\nfunction wasMondifierKeyOnlyEvent(ev) {\r\n    return ev.keyCode === 16 ||\r\n        ev.keyCode === 17 ||\r\n        ev.keyCode === 18;\r\n}\r\nvar matchColorCache = {};\r\nfunction matchColorDistance(r1, g1, b1, r2, g2, b2) {\r\n    return Math.pow(30 * (r1 - r2), 2)\r\n        + Math.pow(59 * (g1 - g2), 2)\r\n        + Math.pow(11 * (b1 - b2), 2);\r\n}\r\nfunction matchColor_(r1, g1, b1) {\r\n    var hash = (r1 << 16) | (g1 << 8) | b1;\r\n    if (matchColorCache[hash] != null) {\r\n        return matchColorCache[hash];\r\n    }\r\n    var ldiff = Infinity;\r\n    var li = -1;\r\n    var i = 0;\r\n    var c;\r\n    var r2;\r\n    var g2;\r\n    var b2;\r\n    var diff;\r\n    for (; i < ColorManager_1.DEFAULT_ANSI_COLORS.length; i++) {\r\n        c = ColorManager_1.DEFAULT_ANSI_COLORS[i].rgba;\r\n        r2 = c >>> 24;\r\n        g2 = c >>> 16 & 0xFF;\r\n        b2 = c >>> 8 & 0xFF;\r\n        diff = matchColorDistance(r1, g1, b1, r2, g2, b2);\r\n        if (diff === 0) {\r\n            li = i;\r\n            break;\r\n        }\r\n        if (diff < ldiff) {\r\n            ldiff = diff;\r\n            li = i;\r\n        }\r\n    }\r\n    return matchColorCache[hash] = li;\r\n}\r\n\r\n\r\n\r\n},{\"./AccessibilityManager\":1,\"./Buffer\":2,\"./BufferSet\":3,\"./CompositionHelper\":6,\"./EscapeSequences\":7,\"./EventEmitter\":8,\"./InputHandler\":9,\"./Linkifier\":10,\"./Parser\":11,\"./SelectionManager\":12,\"./SoundManager\":14,\"./Strings\":15,\"./Viewport\":18,\"./handlers/Clipboard\":20,\"./input/MouseZoneManager\":21,\"./renderer/ColorManager\":23,\"./renderer/Renderer\":27,\"./shared/utils/Browser\":36,\"./utils/CharMeasure\":37,\"./utils/Clone\":39,\"./utils/MouseHelper\":41,\"./utils/ScreenDprMonitor\":43}],17:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar LinkHoverEventTypes;\r\n(function (LinkHoverEventTypes) {\r\n    LinkHoverEventTypes[\"HOVER\"] = \"linkhover\";\r\n    LinkHoverEventTypes[\"TOOLTIP\"] = \"linktooltip\";\r\n    LinkHoverEventTypes[\"LEAVE\"] = \"linkleave\";\r\n})(LinkHoverEventTypes = exports.LinkHoverEventTypes || (exports.LinkHoverEventTypes = {}));\r\n\r\n\r\n\r\n},{}],18:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar FALLBACK_SCROLL_BAR_WIDTH = 15;\r\nvar Viewport = (function () {\r\n    function Viewport(_terminal, _viewportElement, _scrollArea, _charMeasure) {\r\n        var _this = this;\r\n        this._terminal = _terminal;\r\n        this._viewportElement = _viewportElement;\r\n        this._scrollArea = _scrollArea;\r\n        this._charMeasure = _charMeasure;\r\n        this.scrollBarWidth = 0;\r\n        this._currentRowHeight = 0;\r\n        this._lastRecordedBufferLength = 0;\r\n        this._lastRecordedViewportHeight = 0;\r\n        this._lastRecordedBufferHeight = 0;\r\n        this._wheelPartialScroll = 0;\r\n        this.scrollBarWidth = (this._viewportElement.offsetWidth - this._scrollArea.offsetWidth) || FALLBACK_SCROLL_BAR_WIDTH;\r\n        this._viewportElement.addEventListener('scroll', this._onScroll.bind(this));\r\n        setTimeout(function () { return _this.syncScrollArea(); }, 0);\r\n    }\r\n    Viewport.prototype.onThemeChanged = function (colors) {\r\n        this._viewportElement.style.backgroundColor = colors.background.css;\r\n    };\r\n    Viewport.prototype._refresh = function () {\r\n        if (this._charMeasure.height > 0) {\r\n            this._currentRowHeight = this._terminal.renderer.dimensions.scaledCellHeight / window.devicePixelRatio;\r\n            this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;\r\n            var newBufferHeight = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._terminal.renderer.dimensions.canvasHeight);\r\n            if (this._lastRecordedBufferHeight !== newBufferHeight) {\r\n                this._lastRecordedBufferHeight = newBufferHeight;\r\n                this._scrollArea.style.height = this._lastRecordedBufferHeight + 'px';\r\n            }\r\n        }\r\n    };\r\n    Viewport.prototype.syncScrollArea = function () {\r\n        if (this._lastRecordedBufferLength !== this._terminal.buffer.lines.length) {\r\n            this._lastRecordedBufferLength = this._terminal.buffer.lines.length;\r\n            this._refresh();\r\n        }\r\n        else if (this._lastRecordedViewportHeight !== this._terminal.renderer.dimensions.canvasHeight) {\r\n            this._refresh();\r\n        }\r\n        else {\r\n            if (this._terminal.renderer.dimensions.scaledCellHeight / window.devicePixelRatio !== this._currentRowHeight) {\r\n                this._refresh();\r\n            }\r\n        }\r\n        var scrollTop = this._terminal.buffer.ydisp * this._currentRowHeight;\r\n        if (this._viewportElement.scrollTop !== scrollTop) {\r\n            this._viewportElement.scrollTop = scrollTop;\r\n        }\r\n    };\r\n    Viewport.prototype._onScroll = function (ev) {\r\n        if (!this._viewportElement.offsetParent) {\r\n            return;\r\n        }\r\n        var newRow = Math.round(this._viewportElement.scrollTop / this._currentRowHeight);\r\n        var diff = newRow - this._terminal.buffer.ydisp;\r\n        this._terminal.scrollLines(diff, true);\r\n    };\r\n    Viewport.prototype.onWheel = function (ev) {\r\n        var amount = this._getPixelsScrolled(ev);\r\n        if (amount === 0) {\r\n            return;\r\n        }\r\n        this._viewportElement.scrollTop += amount;\r\n        ev.preventDefault();\r\n    };\r\n    Viewport.prototype._getPixelsScrolled = function (ev) {\r\n        if (ev.deltaY === 0) {\r\n            return 0;\r\n        }\r\n        var amount = ev.deltaY;\r\n        if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\r\n            amount *= this._currentRowHeight;\r\n        }\r\n        else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\r\n            amount *= this._currentRowHeight * this._terminal.rows;\r\n        }\r\n        return amount;\r\n    };\r\n    Viewport.prototype.getLinesScrolled = function (ev) {\r\n        if (ev.deltaY === 0) {\r\n            return 0;\r\n        }\r\n        var amount = ev.deltaY;\r\n        if (ev.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {\r\n            amount /= this._currentRowHeight + 0.0;\r\n            this._wheelPartialScroll += amount;\r\n            amount = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1);\r\n            this._wheelPartialScroll %= 1;\r\n        }\r\n        else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\r\n            amount *= this._terminal.rows;\r\n        }\r\n        return amount;\r\n    };\r\n    Viewport.prototype.onTouchStart = function (ev) {\r\n        this._lastTouchY = ev.touches[0].pageY;\r\n    };\r\n    Viewport.prototype.onTouchMove = function (ev) {\r\n        var deltaY = this._lastTouchY - ev.touches[0].pageY;\r\n        this._lastTouchY = ev.touches[0].pageY;\r\n        if (deltaY === 0) {\r\n            return;\r\n        }\r\n        this._viewportElement.scrollTop += deltaY;\r\n        ev.preventDefault();\r\n    };\r\n    return Viewport;\r\n}());\r\nexports.Viewport = Viewport;\r\n\r\n\r\n\r\n},{}],19:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar EscapeSequences_1 = require(\"../EscapeSequences\");\r\nvar Direction;\r\n(function (Direction) {\r\n    Direction[\"Up\"] = \"A\";\r\n    Direction[\"Down\"] = \"B\";\r\n    Direction[\"Right\"] = \"C\";\r\n    Direction[\"Left\"] = \"D\";\r\n})(Direction || (Direction = {}));\r\nvar AltClickHandler = (function () {\r\n    function AltClickHandler(_mouseEvent, _terminal) {\r\n        this._mouseEvent = _mouseEvent;\r\n        this._terminal = _terminal;\r\n        this._lines = this._terminal.buffer.lines;\r\n        this._startCol = this._terminal.buffer.x;\r\n        this._startRow = this._terminal.buffer.y;\r\n        _a = this._terminal.mouseHelper.getCoords(this._mouseEvent, this._terminal.element, this._terminal.charMeasure, this._terminal.options.lineHeight, this._terminal.cols, this._terminal.rows, false).map(function (coordinate) {\r\n            return coordinate - 1;\r\n        }), this._endCol = _a[0], this._endRow = _a[1];\r\n        var _a;\r\n    }\r\n    AltClickHandler.prototype.move = function () {\r\n        if (this._mouseEvent.altKey) {\r\n            this._terminal.send(this._arrowSequences());\r\n        }\r\n    };\r\n    AltClickHandler.prototype._arrowSequences = function () {\r\n        if (!this._terminal.buffer.hasScrollback) {\r\n            return this._resetStartingRow() + this._moveToRequestedRow() + this._moveToRequestedCol();\r\n        }\r\n        return this._moveHorizontallyOnly();\r\n    };\r\n    AltClickHandler.prototype._resetStartingRow = function () {\r\n        if (this._moveToRequestedRow().length === 0) {\r\n            return '';\r\n        }\r\n        else {\r\n            return repeat(this._bufferLine(this._startCol, this._startRow, this._startCol, this._startRow - this._wrappedRowsForRow(this._startRow), false).length, this._sequence(Direction.Left));\r\n        }\r\n    };\r\n    AltClickHandler.prototype._moveToRequestedRow = function () {\r\n        var startRow = this._startRow - this._wrappedRowsForRow(this._startRow);\r\n        var endRow = this._endRow - this._wrappedRowsForRow(this._endRow);\r\n        var rowsToMove = Math.abs(startRow - endRow) - this._wrappedRowsCount();\r\n        return repeat(rowsToMove, this._sequence(this._verticalDirection()));\r\n    };\r\n    AltClickHandler.prototype._moveToRequestedCol = function () {\r\n        var startRow;\r\n        if (this._moveToRequestedRow().length > 0) {\r\n            startRow = this._endRow - this._wrappedRowsForRow(this._endRow);\r\n        }\r\n        else {\r\n            startRow = this._startRow;\r\n        }\r\n        var endRow = this._endRow;\r\n        var direction = this._horizontalDirection();\r\n        return repeat(this._bufferLine(this._startCol, startRow, this._endCol, endRow, direction === Direction.Right).length, this._sequence(direction));\r\n    };\r\n    AltClickHandler.prototype._moveHorizontallyOnly = function () {\r\n        var direction = this._horizontalDirection();\r\n        return repeat(Math.abs(this._startCol - this._endCol), this._sequence(direction));\r\n    };\r\n    AltClickHandler.prototype._wrappedRowsCount = function () {\r\n        var wrappedRows = 0;\r\n        var startRow = this._startRow - this._wrappedRowsForRow(this._startRow);\r\n        var endRow = this._endRow - this._wrappedRowsForRow(this._endRow);\r\n        for (var i = 0; i < Math.abs(startRow - endRow); i++) {\r\n            var direction = this._verticalDirection() === Direction.Up ? -1 : 1;\r\n            if (this._lines.get(startRow + (direction * i)).isWrapped) {\r\n                wrappedRows++;\r\n            }\r\n        }\r\n        return wrappedRows;\r\n    };\r\n    AltClickHandler.prototype._wrappedRowsForRow = function (currentRow) {\r\n        var rowCount = 0;\r\n        var lineWraps = this._lines.get(currentRow).isWrapped;\r\n        while (lineWraps && currentRow >= 0 && currentRow < this._terminal.rows) {\r\n            rowCount++;\r\n            currentRow--;\r\n            lineWraps = this._lines.get(currentRow).isWrapped;\r\n        }\r\n        return rowCount;\r\n    };\r\n    AltClickHandler.prototype._horizontalDirection = function () {\r\n        var startRow;\r\n        if (this._moveToRequestedRow().length > 0) {\r\n            startRow = this._endRow - this._wrappedRowsForRow(this._endRow);\r\n        }\r\n        else {\r\n            startRow = this._startRow;\r\n        }\r\n        if ((this._startCol < this._endCol &&\r\n            startRow <= this._endRow) ||\r\n            (this._startCol >= this._endCol &&\r\n                startRow < this._endRow)) {\r\n            return Direction.Right;\r\n        }\r\n        else {\r\n            return Direction.Left;\r\n        }\r\n    };\r\n    AltClickHandler.prototype._verticalDirection = function () {\r\n        if (this._startRow > this._endRow) {\r\n            return Direction.Up;\r\n        }\r\n        else {\r\n            return Direction.Down;\r\n        }\r\n    };\r\n    AltClickHandler.prototype._bufferLine = function (startCol, startRow, endCol, endRow, forward) {\r\n        var currentCol = startCol;\r\n        var currentRow = startRow;\r\n        var bufferStr = '';\r\n        while (currentCol !== endCol || currentRow !== endRow) {\r\n            currentCol += forward ? 1 : -1;\r\n            if (forward && currentCol > this._terminal.cols - 1) {\r\n                bufferStr += this._terminal.buffer.translateBufferLineToString(currentRow, false, startCol, currentCol);\r\n                currentCol = 0;\r\n                startCol = 0;\r\n                currentRow++;\r\n            }\r\n            else if (!forward && currentCol < 0) {\r\n                bufferStr += this._terminal.buffer.translateBufferLineToString(currentRow, false, 0, startCol + 1);\r\n                currentCol = this._terminal.cols - 1;\r\n                startCol = currentCol;\r\n                currentRow--;\r\n            }\r\n        }\r\n        return bufferStr + this._terminal.buffer.translateBufferLineToString(currentRow, false, startCol, currentCol);\r\n    };\r\n    AltClickHandler.prototype._sequence = function (direction) {\r\n        var mod = this._terminal.applicationCursor ? 'O' : '[';\r\n        return EscapeSequences_1.C0.ESC + mod + direction;\r\n    };\r\n    return AltClickHandler;\r\n}());\r\nexports.AltClickHandler = AltClickHandler;\r\nfunction repeat(count, str) {\r\n    count = Math.floor(count);\r\n    var rpt = '';\r\n    for (var i = 0; i < count; i++) {\r\n        rpt += str;\r\n    }\r\n    return rpt;\r\n}\r\n\r\n\r\n\r\n},{\"../EscapeSequences\":7}],20:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction prepareTextForTerminal(text) {\r\n    return text.replace(/\\r?\\n/g, '\\r');\r\n}\r\nexports.prepareTextForTerminal = prepareTextForTerminal;\r\nfunction bracketTextForPaste(text, bracketedPasteMode) {\r\n    if (bracketedPasteMode) {\r\n        return '\\x1b[200~' + text + '\\x1b[201~';\r\n    }\r\n    return text;\r\n}\r\nexports.bracketTextForPaste = bracketTextForPaste;\r\nfunction copyHandler(ev, term, selectionManager) {\r\n    if (term.browser.isMSIE) {\r\n        window.clipboardData.setData('Text', selectionManager.selectionText);\r\n    }\r\n    else {\r\n        ev.clipboardData.setData('text/plain', selectionManager.selectionText);\r\n    }\r\n    ev.preventDefault();\r\n}\r\nexports.copyHandler = copyHandler;\r\nfunction pasteHandler(ev, term) {\r\n    ev.stopPropagation();\r\n    var text;\r\n    var dispatchPaste = function (text) {\r\n        text = prepareTextForTerminal(text);\r\n        text = bracketTextForPaste(text, term.bracketedPasteMode);\r\n        term.handler(text);\r\n        term.textarea.value = '';\r\n        term.emit('paste', text);\r\n        term.cancel(ev);\r\n    };\r\n    if (term.browser.isMSIE) {\r\n        if (window.clipboardData) {\r\n            text = window.clipboardData.getData('Text');\r\n            dispatchPaste(text);\r\n        }\r\n    }\r\n    else {\r\n        if (ev.clipboardData) {\r\n            text = ev.clipboardData.getData('text/plain');\r\n            dispatchPaste(text);\r\n        }\r\n    }\r\n}\r\nexports.pasteHandler = pasteHandler;\r\nfunction moveTextAreaUnderMouseCursor(ev, textarea) {\r\n    textarea.style.position = 'fixed';\r\n    textarea.style.width = '20px';\r\n    textarea.style.height = '20px';\r\n    textarea.style.left = (ev.clientX - 10) + 'px';\r\n    textarea.style.top = (ev.clientY - 10) + 'px';\r\n    textarea.style.zIndex = '1000';\r\n    textarea.focus();\r\n    setTimeout(function () {\r\n        textarea.style.position = null;\r\n        textarea.style.width = null;\r\n        textarea.style.height = null;\r\n        textarea.style.left = null;\r\n        textarea.style.top = null;\r\n        textarea.style.zIndex = null;\r\n    }, 200);\r\n}\r\nexports.moveTextAreaUnderMouseCursor = moveTextAreaUnderMouseCursor;\r\nfunction rightClickHandler(ev, textarea, selectionManager, shouldSelectWord) {\r\n    moveTextAreaUnderMouseCursor(ev, textarea);\r\n    if (shouldSelectWord && !selectionManager.isClickInSelection(ev)) {\r\n        selectionManager.selectWordAtCursor(ev);\r\n    }\r\n    textarea.value = selectionManager.selectionText;\r\n    textarea.select();\r\n}\r\nexports.rightClickHandler = rightClickHandler;\r\n\r\n\r\n\r\n},{}],21:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar HOVER_DURATION = 500;\r\nvar MouseZoneManager = (function () {\r\n    function MouseZoneManager(_terminal) {\r\n        var _this = this;\r\n        this._terminal = _terminal;\r\n        this._zones = [];\r\n        this._areZonesActive = false;\r\n        this._tooltipTimeout = null;\r\n        this._currentZone = null;\r\n        this._lastHoverCoords = [null, null];\r\n        this._terminal.element.addEventListener('mousedown', function (e) { return _this._onMouseDown(e); });\r\n        this._mouseMoveListener = function (e) { return _this._onMouseMove(e); };\r\n        this._clickListener = function (e) { return _this._onClick(e); };\r\n    }\r\n    MouseZoneManager.prototype.add = function (zone) {\r\n        this._zones.push(zone);\r\n        if (this._zones.length === 1) {\r\n            this._activate();\r\n        }\r\n    };\r\n    MouseZoneManager.prototype.clearAll = function (start, end) {\r\n        if (this._zones.length === 0) {\r\n            return;\r\n        }\r\n        if (!end) {\r\n            start = 0;\r\n            end = this._terminal.rows - 1;\r\n        }\r\n        for (var i = 0; i < this._zones.length; i++) {\r\n            var zone = this._zones[i];\r\n            if ((zone.y1 > start && zone.y1 <= end + 1) ||\r\n                (zone.y2 > start && zone.y2 <= end + 1) ||\r\n                (zone.y1 < start && zone.y2 > end + 1)) {\r\n                if (this._currentZone && this._currentZone === zone) {\r\n                    this._currentZone.leaveCallback();\r\n                    this._currentZone = null;\r\n                }\r\n                this._zones.splice(i--, 1);\r\n            }\r\n        }\r\n        if (this._zones.length === 0) {\r\n            this._deactivate();\r\n        }\r\n    };\r\n    MouseZoneManager.prototype._activate = function () {\r\n        if (!this._areZonesActive) {\r\n            this._areZonesActive = true;\r\n            this._terminal.element.addEventListener('mousemove', this._mouseMoveListener);\r\n            this._terminal.element.addEventListener('click', this._clickListener);\r\n        }\r\n    };\r\n    MouseZoneManager.prototype._deactivate = function () {\r\n        if (this._areZonesActive) {\r\n            this._areZonesActive = false;\r\n            this._terminal.element.removeEventListener('mousemove', this._mouseMoveListener);\r\n            this._terminal.element.removeEventListener('click', this._clickListener);\r\n        }\r\n    };\r\n    MouseZoneManager.prototype._onMouseMove = function (e) {\r\n        if (this._lastHoverCoords[0] !== e.pageX || this._lastHoverCoords[1] !== e.pageY) {\r\n            this._onHover(e);\r\n            this._lastHoverCoords = [e.pageX, e.pageY];\r\n        }\r\n    };\r\n    MouseZoneManager.prototype._onHover = function (e) {\r\n        var _this = this;\r\n        var zone = this._findZoneEventAt(e);\r\n        if (zone === this._currentZone) {\r\n            return;\r\n        }\r\n        if (this._currentZone) {\r\n            this._currentZone.leaveCallback();\r\n            this._currentZone = null;\r\n            if (this._tooltipTimeout) {\r\n                clearTimeout(this._tooltipTimeout);\r\n            }\r\n        }\r\n        if (!zone) {\r\n            return;\r\n        }\r\n        this._currentZone = zone;\r\n        if (zone.hoverCallback) {\r\n            zone.hoverCallback(e);\r\n        }\r\n        this._tooltipTimeout = setTimeout(function () { return _this._onTooltip(e); }, HOVER_DURATION);\r\n    };\r\n    MouseZoneManager.prototype._onTooltip = function (e) {\r\n        this._tooltipTimeout = null;\r\n        var zone = this._findZoneEventAt(e);\r\n        if (zone && zone.tooltipCallback) {\r\n            zone.tooltipCallback(e);\r\n        }\r\n    };\r\n    MouseZoneManager.prototype._onMouseDown = function (e) {\r\n        if (!this._areZonesActive) {\r\n            return;\r\n        }\r\n        var zone = this._findZoneEventAt(e);\r\n        if (zone) {\r\n            if (zone.willLinkActivate(e)) {\r\n                e.preventDefault();\r\n                e.stopImmediatePropagation();\r\n            }\r\n        }\r\n    };\r\n    MouseZoneManager.prototype._onClick = function (e) {\r\n        var zone = this._findZoneEventAt(e);\r\n        if (zone) {\r\n            zone.clickCallback(e);\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n        }\r\n    };\r\n    MouseZoneManager.prototype._findZoneEventAt = function (e) {\r\n        var coords = this._terminal.mouseHelper.getCoords(e, this._terminal.screenElement, this._terminal.charMeasure, this._terminal.options.lineHeight, this._terminal.cols, this._terminal.rows);\r\n        if (!coords) {\r\n            return null;\r\n        }\r\n        var x = coords[0];\r\n        var y = coords[1];\r\n        for (var i = 0; i < this._zones.length; i++) {\r\n            var zone = this._zones[i];\r\n            if (zone.y1 === zone.y2) {\r\n                if (y === zone.y1 && x >= zone.x1 && x < zone.x2) {\r\n                    return zone;\r\n                }\r\n            }\r\n            else {\r\n                if ((y === zone.y1 && x >= zone.x1) ||\r\n                    (y === zone.y2 && x < zone.x2) ||\r\n                    (y > zone.y1 && y < zone.y2)) {\r\n                    return zone;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    return MouseZoneManager;\r\n}());\r\nexports.MouseZoneManager = MouseZoneManager;\r\nvar MouseZone = (function () {\r\n    function MouseZone(x1, y1, x2, y2, clickCallback, hoverCallback, tooltipCallback, leaveCallback, willLinkActivate) {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n        this.clickCallback = clickCallback;\r\n        this.hoverCallback = hoverCallback;\r\n        this.tooltipCallback = tooltipCallback;\r\n        this.leaveCallback = leaveCallback;\r\n        this.willLinkActivate = willLinkActivate;\r\n    }\r\n    return MouseZone;\r\n}());\r\nexports.MouseZone = MouseZone;\r\n\r\n\r\n\r\n},{}],22:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Types_1 = require(\"./atlas/Types\");\r\nvar Types_2 = require(\"../shared/atlas/Types\");\r\nvar CharAtlas_1 = require(\"./atlas/CharAtlas\");\r\nvar Buffer_1 = require(\"../Buffer\");\r\nvar BaseRenderLayer = (function () {\r\n    function BaseRenderLayer(_container, id, zIndex, _alpha, _colors) {\r\n        this._container = _container;\r\n        this._alpha = _alpha;\r\n        this._colors = _colors;\r\n        this._scaledCharWidth = 0;\r\n        this._scaledCharHeight = 0;\r\n        this._scaledCellWidth = 0;\r\n        this._scaledCellHeight = 0;\r\n        this._scaledCharLeft = 0;\r\n        this._scaledCharTop = 0;\r\n        this._canvas = document.createElement('canvas');\r\n        this._canvas.classList.add(\"xterm-\" + id + \"-layer\");\r\n        this._canvas.style.zIndex = zIndex.toString();\r\n        this._initCanvas();\r\n        this._container.appendChild(this._canvas);\r\n    }\r\n    BaseRenderLayer.prototype._initCanvas = function () {\r\n        this._ctx = this._canvas.getContext('2d', { alpha: this._alpha });\r\n        if (!this._alpha) {\r\n            this.clearAll();\r\n        }\r\n    };\r\n    BaseRenderLayer.prototype.onOptionsChanged = function (terminal) { };\r\n    BaseRenderLayer.prototype.onBlur = function (terminal) { };\r\n    BaseRenderLayer.prototype.onFocus = function (terminal) { };\r\n    BaseRenderLayer.prototype.onCursorMove = function (terminal) { };\r\n    BaseRenderLayer.prototype.onGridChanged = function (terminal, startRow, endRow) { };\r\n    BaseRenderLayer.prototype.onSelectionChanged = function (terminal, start, end) { };\r\n    BaseRenderLayer.prototype.onThemeChanged = function (terminal, colorSet) {\r\n        this._refreshCharAtlas(terminal, colorSet);\r\n    };\r\n    BaseRenderLayer.prototype.setTransparency = function (terminal, alpha) {\r\n        if (alpha === this._alpha) {\r\n            return;\r\n        }\r\n        var oldCanvas = this._canvas;\r\n        this._alpha = alpha;\r\n        this._canvas = this._canvas.cloneNode();\r\n        this._initCanvas();\r\n        this._container.replaceChild(this._canvas, oldCanvas);\r\n        this._refreshCharAtlas(terminal, this._colors);\r\n        this.onGridChanged(terminal, 0, terminal.rows - 1);\r\n    };\r\n    BaseRenderLayer.prototype._refreshCharAtlas = function (terminal, colorSet) {\r\n        var _this = this;\r\n        if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\r\n            return;\r\n        }\r\n        this._charAtlas = null;\r\n        var result = CharAtlas_1.acquireCharAtlas(terminal, colorSet, this._scaledCharWidth, this._scaledCharHeight);\r\n        if (result instanceof HTMLCanvasElement) {\r\n            this._charAtlas = result;\r\n        }\r\n        else {\r\n            result.then(function (bitmap) { return _this._charAtlas = bitmap; });\r\n        }\r\n    };\r\n    BaseRenderLayer.prototype.resize = function (terminal, dim) {\r\n        this._scaledCellWidth = dim.scaledCellWidth;\r\n        this._scaledCellHeight = dim.scaledCellHeight;\r\n        this._scaledCharWidth = dim.scaledCharWidth;\r\n        this._scaledCharHeight = dim.scaledCharHeight;\r\n        this._scaledCharLeft = dim.scaledCharLeft;\r\n        this._scaledCharTop = dim.scaledCharTop;\r\n        this._canvas.width = dim.scaledCanvasWidth;\r\n        this._canvas.height = dim.scaledCanvasHeight;\r\n        this._canvas.style.width = dim.canvasWidth + \"px\";\r\n        this._canvas.style.height = dim.canvasHeight + \"px\";\r\n        if (!this._alpha) {\r\n            this.clearAll();\r\n        }\r\n        this._refreshCharAtlas(terminal, this._colors);\r\n    };\r\n    BaseRenderLayer.prototype.fillCells = function (x, y, width, height) {\r\n        this._ctx.fillRect(x * this._scaledCellWidth, y * this._scaledCellHeight, width * this._scaledCellWidth, height * this._scaledCellHeight);\r\n    };\r\n    BaseRenderLayer.prototype.fillBottomLineAtCells = function (x, y, width) {\r\n        if (width === void 0) { width = 1; }\r\n        this._ctx.fillRect(x * this._scaledCellWidth, (y + 1) * this._scaledCellHeight - window.devicePixelRatio - 1, width * this._scaledCellWidth, window.devicePixelRatio);\r\n    };\r\n    BaseRenderLayer.prototype.fillLeftLineAtCell = function (x, y) {\r\n        this._ctx.fillRect(x * this._scaledCellWidth, y * this._scaledCellHeight, window.devicePixelRatio, this._scaledCellHeight);\r\n    };\r\n    BaseRenderLayer.prototype.strokeRectAtCell = function (x, y, width, height) {\r\n        this._ctx.lineWidth = window.devicePixelRatio;\r\n        this._ctx.strokeRect(x * this._scaledCellWidth + window.devicePixelRatio / 2, y * this._scaledCellHeight + (window.devicePixelRatio / 2), width * this._scaledCellWidth - window.devicePixelRatio, (height * this._scaledCellHeight) - window.devicePixelRatio);\r\n    };\r\n    BaseRenderLayer.prototype.clearAll = function () {\r\n        if (this._alpha) {\r\n            this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        }\r\n        else {\r\n            this._ctx.fillStyle = this._colors.background.css;\r\n            this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\r\n        }\r\n    };\r\n    BaseRenderLayer.prototype.clearCells = function (x, y, width, height) {\r\n        if (this._alpha) {\r\n            this._ctx.clearRect(x * this._scaledCellWidth, y * this._scaledCellHeight, width * this._scaledCellWidth, height * this._scaledCellHeight);\r\n        }\r\n        else {\r\n            this._ctx.fillStyle = this._colors.background.css;\r\n            this._ctx.fillRect(x * this._scaledCellWidth, y * this._scaledCellHeight, width * this._scaledCellWidth, height * this._scaledCellHeight);\r\n        }\r\n    };\r\n    BaseRenderLayer.prototype.fillCharTrueColor = function (terminal, charData, x, y) {\r\n        this._ctx.font = this._getFont(terminal, false);\r\n        this._ctx.textBaseline = 'top';\r\n        this._clipRow(terminal, y);\r\n        this._ctx.fillText(charData[Buffer_1.CHAR_DATA_CHAR_INDEX], x * this._scaledCellWidth + this._scaledCharLeft, y * this._scaledCellHeight + this._scaledCharTop);\r\n    };\r\n    BaseRenderLayer.prototype.drawChar = function (terminal, char, code, width, x, y, fg, bg, bold, dim) {\r\n        var colorIndex = 0;\r\n        if (fg < 256) {\r\n            colorIndex = fg + 2;\r\n        }\r\n        else {\r\n            if (bold && terminal.options.enableBold) {\r\n                colorIndex = 1;\r\n            }\r\n        }\r\n        var isAscii = code < 256;\r\n        var isBasicColor = (colorIndex > 1 && fg < 16) && (fg < 8 || bold);\r\n        var isDefaultColor = fg >= 256;\r\n        var isDefaultBackground = bg >= 256;\r\n        if (this._charAtlas && isAscii && (isBasicColor || isDefaultColor) && isDefaultBackground) {\r\n            var charAtlasCellWidth = this._scaledCharWidth + Types_2.CHAR_ATLAS_CELL_SPACING;\r\n            var charAtlasCellHeight = this._scaledCharHeight + Types_2.CHAR_ATLAS_CELL_SPACING;\r\n            if (dim) {\r\n                this._ctx.globalAlpha = Types_1.DIM_OPACITY;\r\n            }\r\n            if (bold && !terminal.options.enableBold) {\r\n                if (colorIndex > 1) {\r\n                    colorIndex -= 8;\r\n                }\r\n            }\r\n            this._ctx.drawImage(this._charAtlas, code * charAtlasCellWidth, colorIndex * charAtlasCellHeight, charAtlasCellWidth, this._scaledCharHeight, x * this._scaledCellWidth + this._scaledCharLeft, y * this._scaledCellHeight + this._scaledCharTop, charAtlasCellWidth, this._scaledCharHeight);\r\n        }\r\n        else {\r\n            this._drawUncachedChar(terminal, char, width, fg, x, y, bold && terminal.options.enableBold, dim);\r\n        }\r\n    };\r\n    BaseRenderLayer.prototype._drawUncachedChar = function (terminal, char, width, fg, x, y, bold, dim) {\r\n        this._ctx.save();\r\n        this._ctx.font = this._getFont(terminal, bold);\r\n        this._ctx.textBaseline = 'top';\r\n        if (fg === Types_1.INVERTED_DEFAULT_COLOR) {\r\n            this._ctx.fillStyle = this._colors.background.css;\r\n        }\r\n        else if (fg < 256) {\r\n            this._ctx.fillStyle = this._colors.ansi[fg].css;\r\n        }\r\n        else {\r\n            this._ctx.fillStyle = this._colors.foreground.css;\r\n        }\r\n        this._clipRow(terminal, y);\r\n        if (dim) {\r\n            this._ctx.globalAlpha = Types_1.DIM_OPACITY;\r\n        }\r\n        this._ctx.fillText(char, x * this._scaledCellWidth + this._scaledCharLeft, y * this._scaledCellHeight + this._scaledCharTop);\r\n        this._ctx.restore();\r\n    };\r\n    BaseRenderLayer.prototype._clipRow = function (terminal, y) {\r\n        this._ctx.beginPath();\r\n        this._ctx.rect(0, y * this._scaledCellHeight, terminal.cols * this._scaledCellWidth, this._scaledCellHeight);\r\n        this._ctx.clip();\r\n    };\r\n    BaseRenderLayer.prototype._getFont = function (terminal, isBold) {\r\n        var fontWeight = isBold ? terminal.options.fontWeightBold : terminal.options.fontWeight;\r\n        return fontWeight + \" \" + terminal.options.fontSize * window.devicePixelRatio + \"px \" + terminal.options.fontFamily;\r\n    };\r\n    return BaseRenderLayer;\r\n}());\r\nexports.BaseRenderLayer = BaseRenderLayer;\r\n\r\n\r\n\r\n},{\"../Buffer\":2,\"../shared/atlas/Types\":35,\"./atlas/CharAtlas\":31,\"./atlas/Types\":33}],23:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar DEFAULT_FOREGROUND = fromHex('#ffffff');\r\nvar DEFAULT_BACKGROUND = fromHex('#000000');\r\nvar DEFAULT_CURSOR = fromHex('#ffffff');\r\nvar DEFAULT_CURSOR_ACCENT = fromHex('#000000');\r\nvar DEFAULT_SELECTION = {\r\n    css: 'rgba(255, 255, 255, 0.3)',\r\n    rgba: 0xFFFFFF77\r\n};\r\nexports.DEFAULT_ANSI_COLORS = (function () {\r\n    var colors = [\r\n        fromHex('#2e3436'),\r\n        fromHex('#cc0000'),\r\n        fromHex('#4e9a06'),\r\n        fromHex('#c4a000'),\r\n        fromHex('#3465a4'),\r\n        fromHex('#75507b'),\r\n        fromHex('#06989a'),\r\n        fromHex('#d3d7cf'),\r\n        fromHex('#555753'),\r\n        fromHex('#ef2929'),\r\n        fromHex('#8ae234'),\r\n        fromHex('#fce94f'),\r\n        fromHex('#729fcf'),\r\n        fromHex('#ad7fa8'),\r\n        fromHex('#34e2e2'),\r\n        fromHex('#eeeeec')\r\n    ];\r\n    var v = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];\r\n    for (var i = 0; i < 216; i++) {\r\n        var r = v[(i / 36) % 6 | 0];\r\n        var g = v[(i / 6) % 6 | 0];\r\n        var b = v[i % 6];\r\n        colors.push({\r\n            css: \"#\" + toPaddedHex(r) + toPaddedHex(g) + toPaddedHex(b),\r\n            rgba: ((r << 24) | (g << 16) | (b << 8) | 0xFF) >>> 0\r\n        });\r\n    }\r\n    for (var i = 0; i < 24; i++) {\r\n        var c = 8 + i * 10;\r\n        var ch = toPaddedHex(c);\r\n        colors.push({\r\n            css: \"#\" + ch + ch + ch,\r\n            rgba: ((c << 24) | (c << 16) | (c << 8) | 0xFF) >>> 0\r\n        });\r\n    }\r\n    return colors;\r\n})();\r\nfunction fromHex(css) {\r\n    return {\r\n        css: css,\r\n        rgba: parseInt(css.slice(1), 16) << 8 | 0xFF\r\n    };\r\n}\r\nfunction toPaddedHex(c) {\r\n    var s = c.toString(16);\r\n    return s.length < 2 ? '0' + s : s;\r\n}\r\nvar ColorManager = (function () {\r\n    function ColorManager(document, allowTransparency) {\r\n        this.allowTransparency = allowTransparency;\r\n        var canvas = document.createElement('canvas');\r\n        canvas.width = 1;\r\n        canvas.height = 1;\r\n        this._ctx = canvas.getContext('2d');\r\n        this._ctx.globalCompositeOperation = 'copy';\r\n        this._litmusColor = this._ctx.createLinearGradient(0, 0, 1, 1);\r\n        this.colors = {\r\n            foreground: DEFAULT_FOREGROUND,\r\n            background: DEFAULT_BACKGROUND,\r\n            cursor: DEFAULT_CURSOR,\r\n            cursorAccent: DEFAULT_CURSOR_ACCENT,\r\n            selection: DEFAULT_SELECTION,\r\n            ansi: exports.DEFAULT_ANSI_COLORS.slice()\r\n        };\r\n    }\r\n    ColorManager.prototype.setTheme = function (theme) {\r\n        this.colors.foreground = this._parseColor(theme.foreground, DEFAULT_FOREGROUND);\r\n        this.colors.background = this._parseColor(theme.background, DEFAULT_BACKGROUND);\r\n        this.colors.cursor = this._parseColor(theme.cursor, DEFAULT_CURSOR, true);\r\n        this.colors.cursorAccent = this._parseColor(theme.cursorAccent, DEFAULT_CURSOR_ACCENT, true);\r\n        this.colors.selection = this._parseColor(theme.selection, DEFAULT_SELECTION, true);\r\n        this.colors.ansi[0] = this._parseColor(theme.black, exports.DEFAULT_ANSI_COLORS[0]);\r\n        this.colors.ansi[1] = this._parseColor(theme.red, exports.DEFAULT_ANSI_COLORS[1]);\r\n        this.colors.ansi[2] = this._parseColor(theme.green, exports.DEFAULT_ANSI_COLORS[2]);\r\n        this.colors.ansi[3] = this._parseColor(theme.yellow, exports.DEFAULT_ANSI_COLORS[3]);\r\n        this.colors.ansi[4] = this._parseColor(theme.blue, exports.DEFAULT_ANSI_COLORS[4]);\r\n        this.colors.ansi[5] = this._parseColor(theme.magenta, exports.DEFAULT_ANSI_COLORS[5]);\r\n        this.colors.ansi[6] = this._parseColor(theme.cyan, exports.DEFAULT_ANSI_COLORS[6]);\r\n        this.colors.ansi[7] = this._parseColor(theme.white, exports.DEFAULT_ANSI_COLORS[7]);\r\n        this.colors.ansi[8] = this._parseColor(theme.brightBlack, exports.DEFAULT_ANSI_COLORS[8]);\r\n        this.colors.ansi[9] = this._parseColor(theme.brightRed, exports.DEFAULT_ANSI_COLORS[9]);\r\n        this.colors.ansi[10] = this._parseColor(theme.brightGreen, exports.DEFAULT_ANSI_COLORS[10]);\r\n        this.colors.ansi[11] = this._parseColor(theme.brightYellow, exports.DEFAULT_ANSI_COLORS[11]);\r\n        this.colors.ansi[12] = this._parseColor(theme.brightBlue, exports.DEFAULT_ANSI_COLORS[12]);\r\n        this.colors.ansi[13] = this._parseColor(theme.brightMagenta, exports.DEFAULT_ANSI_COLORS[13]);\r\n        this.colors.ansi[14] = this._parseColor(theme.brightCyan, exports.DEFAULT_ANSI_COLORS[14]);\r\n        this.colors.ansi[15] = this._parseColor(theme.brightWhite, exports.DEFAULT_ANSI_COLORS[15]);\r\n    };\r\n    ColorManager.prototype._parseColor = function (css, fallback, allowTransparency) {\r\n        if (allowTransparency === void 0) { allowTransparency = this.allowTransparency; }\r\n        if (!css) {\r\n            return fallback;\r\n        }\r\n        this._ctx.fillStyle = this._litmusColor;\r\n        this._ctx.fillStyle = css;\r\n        if (typeof this._ctx.fillStyle !== 'string') {\r\n            console.warn(\"Color: \" + css + \" is invalid using fallback \" + fallback.css);\r\n            return fallback;\r\n        }\r\n        this._ctx.fillRect(0, 0, 1, 1);\r\n        var data = this._ctx.getImageData(0, 0, 1, 1).data;\r\n        if (!allowTransparency && data[3] !== 0xFF) {\r\n            console.warn(\"Color: \" + css + \" is using transparency, but allowTransparency is false. \" +\r\n                (\"Using fallback \" + fallback.css + \".\"));\r\n            return fallback;\r\n        }\r\n        return {\r\n            css: css,\r\n            rgba: (data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3]) >>> 0\r\n        };\r\n    };\r\n    return ColorManager;\r\n}());\r\nexports.ColorManager = ColorManager;\r\n\r\n\r\n\r\n},{}],24:[function(require,module,exports){\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Buffer_1 = require(\"../Buffer\");\r\nvar BaseRenderLayer_1 = require(\"./BaseRenderLayer\");\r\nvar BLINK_INTERVAL = 600;\r\nvar CursorRenderLayer = (function (_super) {\r\n    __extends(CursorRenderLayer, _super);\r\n    function CursorRenderLayer(container, zIndex, colors) {\r\n        var _this = _super.call(this, container, 'cursor', zIndex, true, colors) || this;\r\n        _this._state = {\r\n            x: null,\r\n            y: null,\r\n            isFocused: null,\r\n            style: null,\r\n            width: null\r\n        };\r\n        _this._cursorRenderers = {\r\n            'bar': _this._renderBarCursor.bind(_this),\r\n            'block': _this._renderBlockCursor.bind(_this),\r\n            'underline': _this._renderUnderlineCursor.bind(_this)\r\n        };\r\n        return _this;\r\n    }\r\n    CursorRenderLayer.prototype.resize = function (terminal, dim) {\r\n        _super.prototype.resize.call(this, terminal, dim);\r\n        this._state = {\r\n            x: null,\r\n            y: null,\r\n            isFocused: null,\r\n            style: null,\r\n            width: null\r\n        };\r\n    };\r\n    CursorRenderLayer.prototype.reset = function (terminal) {\r\n        this._clearCursor();\r\n        if (this._cursorBlinkStateManager) {\r\n            this._cursorBlinkStateManager.dispose();\r\n            this._cursorBlinkStateManager = null;\r\n            this.onOptionsChanged(terminal);\r\n        }\r\n    };\r\n    CursorRenderLayer.prototype.onBlur = function (terminal) {\r\n        if (this._cursorBlinkStateManager) {\r\n            this._cursorBlinkStateManager.pause();\r\n        }\r\n        terminal.refresh(terminal.buffer.y, terminal.buffer.y);\r\n    };\r\n    CursorRenderLayer.prototype.onFocus = function (terminal) {\r\n        if (this._cursorBlinkStateManager) {\r\n            this._cursorBlinkStateManager.resume(terminal);\r\n        }\r\n        else {\r\n            terminal.refresh(terminal.buffer.y, terminal.buffer.y);\r\n        }\r\n    };\r\n    CursorRenderLayer.prototype.onOptionsChanged = function (terminal) {\r\n        var _this = this;\r\n        if (terminal.options.cursorBlink) {\r\n            if (!this._cursorBlinkStateManager) {\r\n                this._cursorBlinkStateManager = new CursorBlinkStateManager(terminal, function () {\r\n                    _this._render(terminal, true);\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            if (this._cursorBlinkStateManager) {\r\n                this._cursorBlinkStateManager.dispose();\r\n                this._cursorBlinkStateManager = null;\r\n            }\r\n            terminal.refresh(terminal.buffer.y, terminal.buffer.y);\r\n        }\r\n    };\r\n    CursorRenderLayer.prototype.onCursorMove = function (terminal) {\r\n        if (this._cursorBlinkStateManager) {\r\n            this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\r\n        }\r\n    };\r\n    CursorRenderLayer.prototype.onGridChanged = function (terminal, startRow, endRow) {\r\n        if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\r\n            this._render(terminal, false);\r\n        }\r\n        else {\r\n            this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\r\n        }\r\n    };\r\n    CursorRenderLayer.prototype._render = function (terminal, triggeredByAnimationFrame) {\r\n        if (!terminal.cursorState || terminal.cursorHidden) {\r\n            this._clearCursor();\r\n            return;\r\n        }\r\n        var cursorY = terminal.buffer.ybase + terminal.buffer.y;\r\n        var viewportRelativeCursorY = cursorY - terminal.buffer.ydisp;\r\n        if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= terminal.rows) {\r\n            this._clearCursor();\r\n            return;\r\n        }\r\n        var charData = terminal.buffer.lines.get(cursorY)[terminal.buffer.x];\r\n        if (!charData) {\r\n            return;\r\n        }\r\n        if (!terminal.isFocused) {\r\n            this._clearCursor();\r\n            this._ctx.save();\r\n            this._ctx.fillStyle = this._colors.cursor.css;\r\n            this._renderBlurCursor(terminal, terminal.buffer.x, viewportRelativeCursorY, charData);\r\n            this._ctx.restore();\r\n            this._state.x = terminal.buffer.x;\r\n            this._state.y = viewportRelativeCursorY;\r\n            this._state.isFocused = false;\r\n            this._state.style = terminal.options.cursorStyle;\r\n            this._state.width = charData[Buffer_1.CHAR_DATA_WIDTH_INDEX];\r\n            return;\r\n        }\r\n        if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\r\n            this._clearCursor();\r\n            return;\r\n        }\r\n        if (this._state) {\r\n            if (this._state.x === terminal.buffer.x &&\r\n                this._state.y === viewportRelativeCursorY &&\r\n                this._state.isFocused === terminal.isFocused &&\r\n                this._state.style === terminal.options.cursorStyle &&\r\n                this._state.width === charData[Buffer_1.CHAR_DATA_WIDTH_INDEX]) {\r\n                return;\r\n            }\r\n            this._clearCursor();\r\n        }\r\n        this._ctx.save();\r\n        this._cursorRenderers[terminal.options.cursorStyle || 'block'](terminal, terminal.buffer.x, viewportRelativeCursorY, charData);\r\n        this._ctx.restore();\r\n        this._state.x = terminal.buffer.x;\r\n        this._state.y = viewportRelativeCursorY;\r\n        this._state.isFocused = false;\r\n        this._state.style = terminal.options.cursorStyle;\r\n        this._state.width = charData[Buffer_1.CHAR_DATA_WIDTH_INDEX];\r\n    };\r\n    CursorRenderLayer.prototype._clearCursor = function () {\r\n        if (this._state) {\r\n            this.clearCells(this._state.x, this._state.y, this._state.width, 1);\r\n            this._state = {\r\n                x: null,\r\n                y: null,\r\n                isFocused: null,\r\n                style: null,\r\n                width: null\r\n            };\r\n        }\r\n    };\r\n    CursorRenderLayer.prototype._renderBarCursor = function (terminal, x, y, charData) {\r\n        this._ctx.save();\r\n        this._ctx.fillStyle = this._colors.cursor.css;\r\n        this.fillLeftLineAtCell(x, y);\r\n        this._ctx.restore();\r\n    };\r\n    CursorRenderLayer.prototype._renderBlockCursor = function (terminal, x, y, charData) {\r\n        this._ctx.save();\r\n        this._ctx.fillStyle = this._colors.cursor.css;\r\n        this.fillCells(x, y, charData[Buffer_1.CHAR_DATA_WIDTH_INDEX], 1);\r\n        this._ctx.fillStyle = this._colors.cursorAccent.css;\r\n        this.fillCharTrueColor(terminal, charData, x, y);\r\n        this._ctx.restore();\r\n    };\r\n    CursorRenderLayer.prototype._renderUnderlineCursor = function (terminal, x, y, charData) {\r\n        this._ctx.save();\r\n        this._ctx.fillStyle = this._colors.cursor.css;\r\n        this.fillBottomLineAtCells(x, y);\r\n        this._ctx.restore();\r\n    };\r\n    CursorRenderLayer.prototype._renderBlurCursor = function (terminal, x, y, charData) {\r\n        this._ctx.save();\r\n        this._ctx.strokeStyle = this._colors.cursor.css;\r\n        this.strokeRectAtCell(x, y, charData[Buffer_1.CHAR_DATA_WIDTH_INDEX], 1);\r\n        this._ctx.restore();\r\n    };\r\n    return CursorRenderLayer;\r\n}(BaseRenderLayer_1.BaseRenderLayer));\r\nexports.CursorRenderLayer = CursorRenderLayer;\r\nvar CursorBlinkStateManager = (function () {\r\n    function CursorBlinkStateManager(terminal, _renderCallback) {\r\n        this._renderCallback = _renderCallback;\r\n        this.isCursorVisible = true;\r\n        if (terminal.isFocused) {\r\n            this._restartInterval();\r\n        }\r\n    }\r\n    Object.defineProperty(CursorBlinkStateManager.prototype, \"isPaused\", {\r\n        get: function () { return !(this._blinkStartTimeout || this._blinkInterval); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CursorBlinkStateManager.prototype.dispose = function () {\r\n        if (this._blinkInterval) {\r\n            window.clearInterval(this._blinkInterval);\r\n            this._blinkInterval = null;\r\n        }\r\n        if (this._blinkStartTimeout) {\r\n            window.clearTimeout(this._blinkStartTimeout);\r\n            this._blinkStartTimeout = null;\r\n        }\r\n        if (this._animationFrame) {\r\n            window.cancelAnimationFrame(this._animationFrame);\r\n            this._animationFrame = null;\r\n        }\r\n    };\r\n    CursorBlinkStateManager.prototype.restartBlinkAnimation = function (terminal) {\r\n        var _this = this;\r\n        if (this.isPaused) {\r\n            return;\r\n        }\r\n        this._animationTimeRestarted = Date.now();\r\n        this.isCursorVisible = true;\r\n        if (!this._animationFrame) {\r\n            this._animationFrame = window.requestAnimationFrame(function () {\r\n                _this._renderCallback();\r\n                _this._animationFrame = null;\r\n            });\r\n        }\r\n    };\r\n    CursorBlinkStateManager.prototype._restartInterval = function (timeToStart) {\r\n        var _this = this;\r\n        if (timeToStart === void 0) { timeToStart = BLINK_INTERVAL; }\r\n        if (this._blinkInterval) {\r\n            window.clearInterval(this._blinkInterval);\r\n        }\r\n        this._blinkStartTimeout = setTimeout(function () {\r\n            if (_this._animationTimeRestarted) {\r\n                var time = BLINK_INTERVAL - (Date.now() - _this._animationTimeRestarted);\r\n                _this._animationTimeRestarted = null;\r\n                if (time > 0) {\r\n                    _this._restartInterval(time);\r\n                    return;\r\n                }\r\n            }\r\n            _this.isCursorVisible = false;\r\n            _this._animationFrame = window.requestAnimationFrame(function () {\r\n                _this._renderCallback();\r\n                _this._animationFrame = null;\r\n            });\r\n            _this._blinkInterval = setInterval(function () {\r\n                if (_this._animationTimeRestarted) {\r\n                    var time = BLINK_INTERVAL - (Date.now() - _this._animationTimeRestarted);\r\n                    _this._animationTimeRestarted = null;\r\n                    _this._restartInterval(time);\r\n                    return;\r\n                }\r\n                _this.isCursorVisible = !_this.isCursorVisible;\r\n                _this._animationFrame = window.requestAnimationFrame(function () {\r\n                    _this._renderCallback();\r\n                    _this._animationFrame = null;\r\n                });\r\n            }, BLINK_INTERVAL);\r\n        }, timeToStart);\r\n    };\r\n    CursorBlinkStateManager.prototype.pause = function () {\r\n        this.isCursorVisible = true;\r\n        if (this._blinkInterval) {\r\n            window.clearInterval(this._blinkInterval);\r\n            this._blinkInterval = null;\r\n        }\r\n        if (this._blinkStartTimeout) {\r\n            window.clearTimeout(this._blinkStartTimeout);\r\n            this._blinkStartTimeout = null;\r\n        }\r\n        if (this._animationFrame) {\r\n            window.cancelAnimationFrame(this._animationFrame);\r\n            this._animationFrame = null;\r\n        }\r\n    };\r\n    CursorBlinkStateManager.prototype.resume = function (terminal) {\r\n        this._animationTimeRestarted = null;\r\n        this._restartInterval();\r\n        this.restartBlinkAnimation(terminal);\r\n    };\r\n    return CursorBlinkStateManager;\r\n}());\r\n\r\n\r\n\r\n},{\"../Buffer\":2,\"./BaseRenderLayer\":22}],25:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar GridCache = (function () {\r\n    function GridCache() {\r\n        this.cache = [];\r\n    }\r\n    GridCache.prototype.resize = function (width, height) {\r\n        for (var x = 0; x < width; x++) {\r\n            if (this.cache.length <= x) {\r\n                this.cache.push([]);\r\n            }\r\n            for (var y = this.cache[x].length; y < height; y++) {\r\n                this.cache[x].push(null);\r\n            }\r\n            this.cache[x].length = height;\r\n        }\r\n        this.cache.length = width;\r\n    };\r\n    GridCache.prototype.clear = function () {\r\n        for (var x = 0; x < this.cache.length; x++) {\r\n            for (var y = 0; y < this.cache[x].length; y++) {\r\n                this.cache[x][y] = null;\r\n            }\r\n        }\r\n    };\r\n    return GridCache;\r\n}());\r\nexports.GridCache = GridCache;\r\n\r\n\r\n\r\n},{}],26:[function(require,module,exports){\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Types_1 = require(\"../Types\");\r\nvar BaseRenderLayer_1 = require(\"./BaseRenderLayer\");\r\nvar LinkRenderLayer = (function (_super) {\r\n    __extends(LinkRenderLayer, _super);\r\n    function LinkRenderLayer(container, zIndex, colors, terminal) {\r\n        var _this = _super.call(this, container, 'link', zIndex, true, colors) || this;\r\n        _this._state = null;\r\n        terminal.linkifier.on(Types_1.LinkHoverEventTypes.HOVER, function (e) { return _this._onLinkHover(e); });\r\n        terminal.linkifier.on(Types_1.LinkHoverEventTypes.LEAVE, function (e) { return _this._onLinkLeave(e); });\r\n        return _this;\r\n    }\r\n    LinkRenderLayer.prototype.resize = function (terminal, dim) {\r\n        _super.prototype.resize.call(this, terminal, dim);\r\n        this._state = null;\r\n    };\r\n    LinkRenderLayer.prototype.reset = function (terminal) {\r\n        this._clearCurrentLink();\r\n    };\r\n    LinkRenderLayer.prototype._clearCurrentLink = function () {\r\n        if (this._state) {\r\n            this.clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\r\n            var middleRowCount = this._state.y2 - this._state.y1 - 1;\r\n            if (middleRowCount > 0) {\r\n                this.clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\r\n            }\r\n            this.clearCells(0, this._state.y2, this._state.x2, 1);\r\n            this._state = null;\r\n        }\r\n    };\r\n    LinkRenderLayer.prototype._onLinkHover = function (e) {\r\n        this._ctx.fillStyle = this._colors.foreground.css;\r\n        if (e.y1 === e.y2) {\r\n            this.fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\r\n        }\r\n        else {\r\n            this.fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\r\n            for (var y = e.y1 + 1; y < e.y2; y++) {\r\n                this.fillBottomLineAtCells(0, y, e.cols);\r\n            }\r\n            this.fillBottomLineAtCells(0, e.y2, e.x2);\r\n        }\r\n        this._state = e;\r\n    };\r\n    LinkRenderLayer.prototype._onLinkLeave = function (e) {\r\n        this._clearCurrentLink();\r\n    };\r\n    return LinkRenderLayer;\r\n}(BaseRenderLayer_1.BaseRenderLayer));\r\nexports.LinkRenderLayer = LinkRenderLayer;\r\n\r\n\r\n\r\n},{\"../Types\":17,\"./BaseRenderLayer\":22}],27:[function(require,module,exports){\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar TextRenderLayer_1 = require(\"./TextRenderLayer\");\r\nvar SelectionRenderLayer_1 = require(\"./SelectionRenderLayer\");\r\nvar CursorRenderLayer_1 = require(\"./CursorRenderLayer\");\r\nvar ColorManager_1 = require(\"./ColorManager\");\r\nvar LinkRenderLayer_1 = require(\"./LinkRenderLayer\");\r\nvar EventEmitter_1 = require(\"../EventEmitter\");\r\nvar RenderDebouncer_1 = require(\"../utils/RenderDebouncer\");\r\nvar ScreenDprMonitor_1 = require(\"../utils/ScreenDprMonitor\");\r\nvar Renderer = (function (_super) {\r\n    __extends(Renderer, _super);\r\n    function Renderer(_terminal, theme) {\r\n        var _this = _super.call(this) || this;\r\n        _this._terminal = _terminal;\r\n        _this._isPaused = false;\r\n        _this._needsFullRefresh = false;\r\n        var allowTransparency = _this._terminal.options.allowTransparency;\r\n        _this.colorManager = new ColorManager_1.ColorManager(document, allowTransparency);\r\n        if (theme) {\r\n            _this.colorManager.setTheme(theme);\r\n        }\r\n        _this._renderLayers = [\r\n            new TextRenderLayer_1.TextRenderLayer(_this._terminal.screenElement, 0, _this.colorManager.colors, allowTransparency),\r\n            new SelectionRenderLayer_1.SelectionRenderLayer(_this._terminal.screenElement, 1, _this.colorManager.colors),\r\n            new LinkRenderLayer_1.LinkRenderLayer(_this._terminal.screenElement, 2, _this.colorManager.colors, _this._terminal),\r\n            new CursorRenderLayer_1.CursorRenderLayer(_this._terminal.screenElement, 3, _this.colorManager.colors)\r\n        ];\r\n        _this.dimensions = {\r\n            scaledCharWidth: null,\r\n            scaledCharHeight: null,\r\n            scaledCellWidth: null,\r\n            scaledCellHeight: null,\r\n            scaledCharLeft: null,\r\n            scaledCharTop: null,\r\n            scaledCanvasWidth: null,\r\n            scaledCanvasHeight: null,\r\n            canvasWidth: null,\r\n            canvasHeight: null,\r\n            actualCellWidth: null,\r\n            actualCellHeight: null\r\n        };\r\n        _this._devicePixelRatio = window.devicePixelRatio;\r\n        _this._updateDimensions();\r\n        _this.onOptionsChanged();\r\n        _this._renderDebouncer = new RenderDebouncer_1.RenderDebouncer(_this._terminal, _this._renderRows.bind(_this));\r\n        _this._screenDprMonitor = new ScreenDprMonitor_1.ScreenDprMonitor();\r\n        _this._screenDprMonitor.setListener(function () { return _this.onWindowResize(window.devicePixelRatio); });\r\n        if ('IntersectionObserver' in window) {\r\n            var observer = new IntersectionObserver(function (e) { return _this.onIntersectionChange(e[0]); }, { threshold: 0 });\r\n            observer.observe(_this._terminal.element);\r\n        }\r\n        return _this;\r\n    }\r\n    Renderer.prototype.onIntersectionChange = function (entry) {\r\n        this._isPaused = entry.intersectionRatio === 0;\r\n        if (!this._isPaused && this._needsFullRefresh) {\r\n            this._terminal.refresh(0, this._terminal.rows - 1);\r\n        }\r\n    };\r\n    Renderer.prototype.onWindowResize = function (devicePixelRatio) {\r\n        if (this._devicePixelRatio !== devicePixelRatio) {\r\n            this._devicePixelRatio = devicePixelRatio;\r\n            this.onResize(this._terminal.cols, this._terminal.rows);\r\n        }\r\n    };\r\n    Renderer.prototype.setTheme = function (theme) {\r\n        var _this = this;\r\n        this.colorManager.setTheme(theme);\r\n        this._renderLayers.forEach(function (l) {\r\n            l.onThemeChanged(_this._terminal, _this.colorManager.colors);\r\n            l.reset(_this._terminal);\r\n        });\r\n        if (this._isPaused) {\r\n            this._needsFullRefresh = true;\r\n        }\r\n        else {\r\n            this._terminal.refresh(0, this._terminal.rows - 1);\r\n        }\r\n        return this.colorManager.colors;\r\n    };\r\n    Renderer.prototype.onResize = function (cols, rows) {\r\n        var _this = this;\r\n        this._updateDimensions();\r\n        this._renderLayers.forEach(function (l) { return l.resize(_this._terminal, _this.dimensions); });\r\n        if (this._isPaused) {\r\n            this._needsFullRefresh = true;\r\n        }\r\n        else {\r\n            this._terminal.refresh(0, this._terminal.rows - 1);\r\n        }\r\n        this._terminal.screenElement.style.width = this.dimensions.canvasWidth + \"px\";\r\n        this._terminal.screenElement.style.height = this.dimensions.canvasHeight + \"px\";\r\n        this.emit('resize', {\r\n            width: this.dimensions.canvasWidth,\r\n            height: this.dimensions.canvasHeight\r\n        });\r\n    };\r\n    Renderer.prototype.onCharSizeChanged = function () {\r\n        this.onResize(this._terminal.cols, this._terminal.rows);\r\n    };\r\n    Renderer.prototype.onBlur = function () {\r\n        var _this = this;\r\n        this._runOperation(function (l) { return l.onBlur(_this._terminal); });\r\n    };\r\n    Renderer.prototype.onFocus = function () {\r\n        var _this = this;\r\n        this._runOperation(function (l) { return l.onFocus(_this._terminal); });\r\n    };\r\n    Renderer.prototype.onSelectionChanged = function (start, end) {\r\n        var _this = this;\r\n        this._runOperation(function (l) { return l.onSelectionChanged(_this._terminal, start, end); });\r\n    };\r\n    Renderer.prototype.onCursorMove = function () {\r\n        var _this = this;\r\n        this._runOperation(function (l) { return l.onCursorMove(_this._terminal); });\r\n    };\r\n    Renderer.prototype.onOptionsChanged = function () {\r\n        var _this = this;\r\n        this._runOperation(function (l) { return l.onOptionsChanged(_this._terminal); });\r\n    };\r\n    Renderer.prototype.clear = function () {\r\n        var _this = this;\r\n        this._runOperation(function (l) { return l.reset(_this._terminal); });\r\n    };\r\n    Renderer.prototype._runOperation = function (operation) {\r\n        if (this._isPaused) {\r\n            this._needsFullRefresh = true;\r\n        }\r\n        else {\r\n            this._renderLayers.forEach(function (l) { return operation(l); });\r\n        }\r\n    };\r\n    Renderer.prototype.refreshRows = function (start, end) {\r\n        if (this._isPaused) {\r\n            this._needsFullRefresh = true;\r\n            return;\r\n        }\r\n        this._renderDebouncer.refresh(start, end);\r\n    };\r\n    Renderer.prototype._renderRows = function (start, end) {\r\n        var _this = this;\r\n        this._renderLayers.forEach(function (l) { return l.onGridChanged(_this._terminal, start, end); });\r\n        this._terminal.emit('refresh', { start: start, end: end });\r\n    };\r\n    Renderer.prototype._updateDimensions = function () {\r\n        if (!this._terminal.charMeasure.width || !this._terminal.charMeasure.height) {\r\n            return;\r\n        }\r\n        this.dimensions.scaledCharWidth = Math.floor(this._terminal.charMeasure.width * window.devicePixelRatio);\r\n        this.dimensions.scaledCharHeight = Math.ceil(this._terminal.charMeasure.height * window.devicePixelRatio);\r\n        this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._terminal.options.lineHeight);\r\n        this.dimensions.scaledCharTop = this._terminal.options.lineHeight === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\r\n        this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._terminal.options.letterSpacing);\r\n        this.dimensions.scaledCharLeft = Math.floor(this._terminal.options.letterSpacing / 2);\r\n        this.dimensions.scaledCanvasHeight = this._terminal.rows * this.dimensions.scaledCellHeight;\r\n        this.dimensions.scaledCanvasWidth = this._terminal.cols * this.dimensions.scaledCellWidth;\r\n        this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio);\r\n        this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio);\r\n        this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._terminal.rows;\r\n        this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._terminal.cols;\r\n    };\r\n    return Renderer;\r\n}(EventEmitter_1.EventEmitter));\r\nexports.Renderer = Renderer;\r\n\r\n\r\n\r\n},{\"../EventEmitter\":8,\"../utils/RenderDebouncer\":42,\"../utils/ScreenDprMonitor\":43,\"./ColorManager\":23,\"./CursorRenderLayer\":24,\"./LinkRenderLayer\":26,\"./SelectionRenderLayer\":28,\"./TextRenderLayer\":29}],28:[function(require,module,exports){\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar BaseRenderLayer_1 = require(\"./BaseRenderLayer\");\r\nvar SelectionRenderLayer = (function (_super) {\r\n    __extends(SelectionRenderLayer, _super);\r\n    function SelectionRenderLayer(container, zIndex, colors) {\r\n        var _this = _super.call(this, container, 'selection', zIndex, true, colors) || this;\r\n        _this._state = {\r\n            start: null,\r\n            end: null\r\n        };\r\n        return _this;\r\n    }\r\n    SelectionRenderLayer.prototype.resize = function (terminal, dim) {\r\n        _super.prototype.resize.call(this, terminal, dim);\r\n        this._state = {\r\n            start: null,\r\n            end: null\r\n        };\r\n    };\r\n    SelectionRenderLayer.prototype.reset = function (terminal) {\r\n        if (this._state.start && this._state.end) {\r\n            this._state = {\r\n                start: null,\r\n                end: null\r\n            };\r\n            this.clearAll();\r\n        }\r\n    };\r\n    SelectionRenderLayer.prototype.onSelectionChanged = function (terminal, start, end) {\r\n        if (this._state.start === start || this._state.end === end) {\r\n            return;\r\n        }\r\n        this.clearAll();\r\n        if (!start || !end) {\r\n            return;\r\n        }\r\n        var viewportStartRow = start[1] - terminal.buffer.ydisp;\r\n        var viewportEndRow = end[1] - terminal.buffer.ydisp;\r\n        var viewportCappedStartRow = Math.max(viewportStartRow, 0);\r\n        var viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\r\n        if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\r\n            return;\r\n        }\r\n        var startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\r\n        var startRowEndCol = viewportCappedStartRow === viewportCappedEndRow ? end[0] : terminal.cols;\r\n        this._ctx.fillStyle = this._colors.selection.css;\r\n        this.fillCells(startCol, viewportCappedStartRow, startRowEndCol - startCol, 1);\r\n        var middleRowsCount = Math.max(viewportCappedEndRow - viewportCappedStartRow - 1, 0);\r\n        this.fillCells(0, viewportCappedStartRow + 1, terminal.cols, middleRowsCount);\r\n        if (viewportCappedStartRow !== viewportCappedEndRow) {\r\n            var endCol = viewportEndRow === viewportCappedEndRow ? end[0] : terminal.cols;\r\n            this.fillCells(0, viewportCappedEndRow, endCol, 1);\r\n        }\r\n        this._state.start = [start[0], start[1]];\r\n        this._state.end = [end[0], end[1]];\r\n    };\r\n    return SelectionRenderLayer;\r\n}(BaseRenderLayer_1.BaseRenderLayer));\r\nexports.SelectionRenderLayer = SelectionRenderLayer;\r\n\r\n\r\n\r\n},{\"./BaseRenderLayer\":22}],29:[function(require,module,exports){\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Buffer_1 = require(\"../Buffer\");\r\nvar Types_1 = require(\"./Types\");\r\nvar Types_2 = require(\"./atlas/Types\");\r\nvar GridCache_1 = require(\"./GridCache\");\r\nvar BaseRenderLayer_1 = require(\"./BaseRenderLayer\");\r\nvar TextRenderLayer = (function (_super) {\r\n    __extends(TextRenderLayer, _super);\r\n    function TextRenderLayer(container, zIndex, colors, alpha) {\r\n        var _this = _super.call(this, container, 'text', zIndex, alpha, colors) || this;\r\n        _this._characterOverlapCache = {};\r\n        _this._state = new GridCache_1.GridCache();\r\n        return _this;\r\n    }\r\n    TextRenderLayer.prototype.resize = function (terminal, dim) {\r\n        _super.prototype.resize.call(this, terminal, dim);\r\n        var terminalFont = this._getFont(terminal, false);\r\n        if (this._characterWidth !== dim.scaledCharWidth || this._characterFont !== terminalFont) {\r\n            this._characterWidth = dim.scaledCharWidth;\r\n            this._characterFont = terminalFont;\r\n            this._characterOverlapCache = {};\r\n        }\r\n        this._state.clear();\r\n        this._state.resize(terminal.cols, terminal.rows);\r\n    };\r\n    TextRenderLayer.prototype.reset = function (terminal) {\r\n        this._state.clear();\r\n        this.clearAll();\r\n    };\r\n    TextRenderLayer.prototype.onGridChanged = function (terminal, startRow, endRow) {\r\n        if (this._state.cache.length === 0) {\r\n            return;\r\n        }\r\n        for (var y = startRow; y <= endRow; y++) {\r\n            var row = y + terminal.buffer.ydisp;\r\n            var line = terminal.buffer.lines.get(row);\r\n            this.clearCells(0, y, terminal.cols, 1);\r\n            for (var x = 0; x < terminal.cols; x++) {\r\n                var charData = line[x];\r\n                var code = charData[Buffer_1.CHAR_DATA_CODE_INDEX];\r\n                var char = charData[Buffer_1.CHAR_DATA_CHAR_INDEX];\r\n                var attr = charData[Buffer_1.CHAR_DATA_ATTR_INDEX];\r\n                var width = charData[Buffer_1.CHAR_DATA_WIDTH_INDEX];\r\n                if (width === 0) {\r\n                    continue;\r\n                }\r\n                if (code === 32) {\r\n                    if (x > 0) {\r\n                        var previousChar = line[x - 1];\r\n                        if (this._isOverlapping(previousChar)) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                }\r\n                var flags = attr >> 18;\r\n                var bg = attr & 0x1ff;\r\n                var isDefaultBackground = bg >= 256;\r\n                var isInvisible = flags & Types_1.FLAGS.INVISIBLE;\r\n                var isInverted = flags & Types_1.FLAGS.INVERSE;\r\n                if (!code || (code === 32 && isDefaultBackground && !isInverted) || isInvisible) {\r\n                    continue;\r\n                }\r\n                if (width !== 0 && this._isOverlapping(charData)) {\r\n                    if (x < line.length - 1 && line[x + 1][Buffer_1.CHAR_DATA_CODE_INDEX] === 32) {\r\n                        width = 2;\r\n                    }\r\n                }\r\n                var fg = (attr >> 9) & 0x1ff;\r\n                if (isInverted) {\r\n                    var temp = bg;\r\n                    bg = fg;\r\n                    fg = temp;\r\n                    if (fg === 256) {\r\n                        fg = Types_2.INVERTED_DEFAULT_COLOR;\r\n                    }\r\n                    if (bg === 257) {\r\n                        bg = Types_2.INVERTED_DEFAULT_COLOR;\r\n                    }\r\n                }\r\n                if (width === 2) {\r\n                }\r\n                if (bg < 256) {\r\n                    this._ctx.save();\r\n                    this._ctx.fillStyle = (bg === Types_2.INVERTED_DEFAULT_COLOR ? this._colors.foreground.css : this._colors.ansi[bg].css);\r\n                    this.fillCells(x, y, width, 1);\r\n                    this._ctx.restore();\r\n                }\r\n                this._ctx.save();\r\n                if (flags & Types_1.FLAGS.BOLD) {\r\n                    this._ctx.font = this._getFont(terminal, true);\r\n                    if (fg < 8) {\r\n                        fg += 8;\r\n                    }\r\n                }\r\n                if (flags & Types_1.FLAGS.UNDERLINE) {\r\n                    if (fg === Types_2.INVERTED_DEFAULT_COLOR) {\r\n                        this._ctx.fillStyle = this._colors.background.css;\r\n                    }\r\n                    else if (fg < 256) {\r\n                        this._ctx.fillStyle = this._colors.ansi[fg].css;\r\n                    }\r\n                    else {\r\n                        this._ctx.fillStyle = this._colors.foreground.css;\r\n                    }\r\n                    this.fillBottomLineAtCells(x, y);\r\n                }\r\n                this.drawChar(terminal, char, code, width, x, y, fg, bg, !!(flags & Types_1.FLAGS.BOLD), !!(flags & Types_1.FLAGS.DIM));\r\n                this._ctx.restore();\r\n            }\r\n        }\r\n    };\r\n    TextRenderLayer.prototype.onOptionsChanged = function (terminal) {\r\n        this.setTransparency(terminal, terminal.options.allowTransparency);\r\n    };\r\n    TextRenderLayer.prototype._isOverlapping = function (charData) {\r\n        if (charData[Buffer_1.CHAR_DATA_WIDTH_INDEX] !== 1) {\r\n            return false;\r\n        }\r\n        var code = charData[Buffer_1.CHAR_DATA_CODE_INDEX];\r\n        if (code < 256) {\r\n            return false;\r\n        }\r\n        var char = charData[Buffer_1.CHAR_DATA_CHAR_INDEX];\r\n        if (this._characterOverlapCache.hasOwnProperty(char)) {\r\n            return this._characterOverlapCache[char];\r\n        }\r\n        this._ctx.save();\r\n        this._ctx.font = this._characterFont;\r\n        var overlaps = Math.floor(this._ctx.measureText(char).width) > this._characterWidth;\r\n        this._ctx.restore();\r\n        this._characterOverlapCache[char] = overlaps;\r\n        return overlaps;\r\n    };\r\n    return TextRenderLayer;\r\n}(BaseRenderLayer_1.BaseRenderLayer));\r\nexports.TextRenderLayer = TextRenderLayer;\r\n\r\n\r\n\r\n},{\"../Buffer\":2,\"./BaseRenderLayer\":22,\"./GridCache\":25,\"./Types\":30,\"./atlas/Types\":33}],30:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar FLAGS;\r\n(function (FLAGS) {\r\n    FLAGS[FLAGS[\"BOLD\"] = 1] = \"BOLD\";\r\n    FLAGS[FLAGS[\"UNDERLINE\"] = 2] = \"UNDERLINE\";\r\n    FLAGS[FLAGS[\"BLINK\"] = 4] = \"BLINK\";\r\n    FLAGS[FLAGS[\"INVERSE\"] = 8] = \"INVERSE\";\r\n    FLAGS[FLAGS[\"INVISIBLE\"] = 16] = \"INVISIBLE\";\r\n    FLAGS[FLAGS[\"DIM\"] = 32] = \"DIM\";\r\n})(FLAGS = exports.FLAGS || (exports.FLAGS = {}));\r\n\r\n\r\n\r\n},{}],31:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CharAtlasGenerator_1 = require(\"../../shared/atlas/CharAtlasGenerator\");\r\nvar CharAtlasUtils_1 = require(\"./CharAtlasUtils\");\r\nvar charAtlasCache = [];\r\nfunction acquireCharAtlas(terminal, colors, scaledCharWidth, scaledCharHeight) {\r\n    var newConfig = CharAtlasUtils_1.generateConfig(scaledCharWidth, scaledCharHeight, terminal, colors);\r\n    for (var i = 0; i < charAtlasCache.length; i++) {\r\n        var entry = charAtlasCache[i];\r\n        var ownedByIndex = entry.ownedBy.indexOf(terminal);\r\n        if (ownedByIndex >= 0) {\r\n            if (CharAtlasUtils_1.configEquals(entry.config, newConfig)) {\r\n                return entry.bitmap;\r\n            }\r\n            else {\r\n                if (entry.ownedBy.length === 1) {\r\n                    charAtlasCache.splice(i, 1);\r\n                }\r\n                else {\r\n                    entry.ownedBy.splice(ownedByIndex, 1);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    for (var i = 0; i < charAtlasCache.length; i++) {\r\n        var entry = charAtlasCache[i];\r\n        if (CharAtlasUtils_1.configEquals(entry.config, newConfig)) {\r\n            entry.ownedBy.push(terminal);\r\n            return entry.bitmap;\r\n        }\r\n    }\r\n    var canvasFactory = function (width, height) {\r\n        var canvas = document.createElement('canvas');\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        return canvas;\r\n    };\r\n    var newEntry = {\r\n        bitmap: CharAtlasGenerator_1.generateCharAtlas(window, canvasFactory, newConfig),\r\n        config: newConfig,\r\n        ownedBy: [terminal]\r\n    };\r\n    charAtlasCache.push(newEntry);\r\n    return newEntry.bitmap;\r\n}\r\nexports.acquireCharAtlas = acquireCharAtlas;\r\n\r\n\r\n\r\n},{\"../../shared/atlas/CharAtlasGenerator\":34,\"./CharAtlasUtils\":32}],32:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction generateConfig(scaledCharWidth, scaledCharHeight, terminal, colors) {\r\n    var clonedColors = {\r\n        foreground: colors.foreground,\r\n        background: colors.background,\r\n        cursor: null,\r\n        cursorAccent: null,\r\n        selection: null,\r\n        ansi: colors.ansi.slice(0, 16)\r\n    };\r\n    return {\r\n        devicePixelRatio: window.devicePixelRatio,\r\n        scaledCharWidth: scaledCharWidth,\r\n        scaledCharHeight: scaledCharHeight,\r\n        fontFamily: terminal.options.fontFamily,\r\n        fontSize: terminal.options.fontSize,\r\n        fontWeight: terminal.options.fontWeight,\r\n        fontWeightBold: terminal.options.fontWeightBold,\r\n        allowTransparency: terminal.options.allowTransparency,\r\n        colors: clonedColors\r\n    };\r\n}\r\nexports.generateConfig = generateConfig;\r\nfunction configEquals(a, b) {\r\n    for (var i = 0; i < a.colors.ansi.length; i++) {\r\n        if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\r\n            return false;\r\n        }\r\n    }\r\n    return a.devicePixelRatio === b.devicePixelRatio &&\r\n        a.fontFamily === b.fontFamily &&\r\n        a.fontSize === b.fontSize &&\r\n        a.fontWeight === b.fontWeight &&\r\n        a.fontWeightBold === b.fontWeightBold &&\r\n        a.allowTransparency === b.allowTransparency &&\r\n        a.scaledCharWidth === b.scaledCharWidth &&\r\n        a.scaledCharHeight === b.scaledCharHeight &&\r\n        a.colors.foreground === b.colors.foreground &&\r\n        a.colors.background === b.colors.background;\r\n}\r\nexports.configEquals = configEquals;\r\n\r\n\r\n\r\n},{}],33:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.INVERTED_DEFAULT_COLOR = -1;\r\nexports.DIM_OPACITY = 0.5;\r\n\r\n\r\n\r\n},{}],34:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Types_1 = require(\"./Types\");\r\nvar Browser_1 = require(\"../utils/Browser\");\r\nfunction generateCharAtlas(context, canvasFactory, config) {\r\n    var cellWidth = config.scaledCharWidth + Types_1.CHAR_ATLAS_CELL_SPACING;\r\n    var cellHeight = config.scaledCharHeight + Types_1.CHAR_ATLAS_CELL_SPACING;\r\n    var canvas = canvasFactory(255 * cellWidth, (2 + 16) * cellHeight);\r\n    var ctx = canvas.getContext('2d', { alpha: config.allowTransparency });\r\n    ctx.fillStyle = config.colors.background.css;\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    ctx.save();\r\n    ctx.fillStyle = config.colors.foreground.css;\r\n    ctx.font = getFont(config.fontWeight, config);\r\n    ctx.textBaseline = 'top';\r\n    for (var i = 0; i < 256; i++) {\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.rect(i * cellWidth, 0, cellWidth, cellHeight);\r\n        ctx.clip();\r\n        ctx.fillText(String.fromCharCode(i), i * cellWidth, 0);\r\n        ctx.restore();\r\n    }\r\n    ctx.save();\r\n    ctx.font = getFont(config.fontWeightBold, config);\r\n    for (var i = 0; i < 256; i++) {\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.rect(i * cellWidth, cellHeight, cellWidth, cellHeight);\r\n        ctx.clip();\r\n        ctx.fillText(String.fromCharCode(i), i * cellWidth, cellHeight);\r\n        ctx.restore();\r\n    }\r\n    ctx.restore();\r\n    ctx.font = getFont(config.fontWeight, config);\r\n    for (var colorIndex = 0; colorIndex < 16; colorIndex++) {\r\n        if (colorIndex === 8) {\r\n            ctx.font = getFont(config.fontWeightBold, config);\r\n        }\r\n        var y = (colorIndex + 2) * cellHeight;\r\n        for (var i = 0; i < 256; i++) {\r\n            ctx.save();\r\n            ctx.beginPath();\r\n            ctx.rect(i * cellWidth, y, cellWidth, cellHeight);\r\n            ctx.clip();\r\n            ctx.fillStyle = config.colors.ansi[colorIndex].css;\r\n            ctx.fillText(String.fromCharCode(i), i * cellWidth, y);\r\n            ctx.restore();\r\n        }\r\n    }\r\n    ctx.restore();\r\n    if (!('createImageBitmap' in context) || Browser_1.isFirefox) {\r\n        if (canvas instanceof HTMLCanvasElement) {\r\n            return canvas;\r\n        }\r\n        else {\r\n            return new Promise(function (r) { return r(canvas.transferToImageBitmap()); });\r\n        }\r\n    }\r\n    var charAtlasImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n    var r = config.colors.background.rgba >>> 24;\r\n    var g = config.colors.background.rgba >>> 16 & 0xFF;\r\n    var b = config.colors.background.rgba >>> 8 & 0xFF;\r\n    clearColor(charAtlasImageData, r, g, b);\r\n    return context.createImageBitmap(charAtlasImageData);\r\n}\r\nexports.generateCharAtlas = generateCharAtlas;\r\nfunction clearColor(imageData, r, g, b) {\r\n    for (var offset = 0; offset < imageData.data.length; offset += 4) {\r\n        if (imageData.data[offset] === r &&\r\n            imageData.data[offset + 1] === g &&\r\n            imageData.data[offset + 2] === b) {\r\n            imageData.data[offset + 3] = 0;\r\n        }\r\n    }\r\n}\r\nfunction getFont(fontWeight, config) {\r\n    return fontWeight + \" \" + config.fontSize * config.devicePixelRatio + \"px \" + config.fontFamily;\r\n}\r\n\r\n\r\n\r\n},{\"../utils/Browser\":36,\"./Types\":35}],35:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CHAR_ATLAS_CELL_SPACING = 1;\r\n\r\n\r\n\r\n},{}],36:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar isNode = (typeof navigator === 'undefined') ? true : false;\r\nvar userAgent = (isNode) ? 'node' : navigator.userAgent;\r\nvar platform = (isNode) ? 'node' : navigator.platform;\r\nexports.isFirefox = !!~userAgent.indexOf('Firefox');\r\nexports.isMSIE = !!~userAgent.indexOf('MSIE') || !!~userAgent.indexOf('Trident');\r\nexports.isMac = contains(['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'], platform);\r\nexports.isIpad = platform === 'iPad';\r\nexports.isIphone = platform === 'iPhone';\r\nexports.isMSWindows = contains(['Windows', 'Win16', 'Win32', 'WinCE'], platform);\r\nexports.isLinux = platform.indexOf('Linux') >= 0;\r\nfunction contains(arr, el) {\r\n    return arr.indexOf(el) >= 0;\r\n}\r\n\r\n\r\n\r\n},{}],37:[function(require,module,exports){\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar EventEmitter_1 = require(\"../EventEmitter\");\r\nvar CharMeasure = (function (_super) {\r\n    __extends(CharMeasure, _super);\r\n    function CharMeasure(document, parentElement) {\r\n        var _this = _super.call(this) || this;\r\n        _this._document = document;\r\n        _this._parentElement = parentElement;\r\n        _this._measureElement = _this._document.createElement('span');\r\n        _this._measureElement.classList.add('xterm-char-measure-element');\r\n        _this._measureElement.textContent = 'W';\r\n        _this._measureElement.setAttribute('aria-hidden', 'true');\r\n        _this._parentElement.appendChild(_this._measureElement);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CharMeasure.prototype, \"width\", {\r\n        get: function () {\r\n            return this._width;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CharMeasure.prototype, \"height\", {\r\n        get: function () {\r\n            return this._height;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CharMeasure.prototype.measure = function (options) {\r\n        this._measureElement.style.fontFamily = options.fontFamily;\r\n        this._measureElement.style.fontSize = options.fontSize + \"px\";\r\n        var geometry = this._measureElement.getBoundingClientRect();\r\n        if (geometry.width === 0 || geometry.height === 0) {\r\n            return;\r\n        }\r\n        if (this._width !== geometry.width || this._height !== geometry.height) {\r\n            this._width = geometry.width;\r\n            this._height = Math.ceil(geometry.height);\r\n            this.emit('charsizechanged');\r\n        }\r\n    };\r\n    return CharMeasure;\r\n}(EventEmitter_1.EventEmitter));\r\nexports.CharMeasure = CharMeasure;\r\n\r\n\r\n\r\n},{\"../EventEmitter\":8}],38:[function(require,module,exports){\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar EventEmitter_1 = require(\"../EventEmitter\");\r\nvar CircularList = (function (_super) {\r\n    __extends(CircularList, _super);\r\n    function CircularList(_maxLength) {\r\n        var _this = _super.call(this) || this;\r\n        _this._maxLength = _maxLength;\r\n        _this._array = new Array(_this._maxLength);\r\n        _this._startIndex = 0;\r\n        _this._length = 0;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CircularList.prototype, \"maxLength\", {\r\n        get: function () {\r\n            return this._maxLength;\r\n        },\r\n        set: function (newMaxLength) {\r\n            if (this._maxLength === newMaxLength) {\r\n                return;\r\n            }\r\n            var newArray = new Array(newMaxLength);\r\n            for (var i = 0; i < Math.min(newMaxLength, this.length); i++) {\r\n                newArray[i] = this._array[this._getCyclicIndex(i)];\r\n            }\r\n            this._array = newArray;\r\n            this._maxLength = newMaxLength;\r\n            this._startIndex = 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CircularList.prototype, \"length\", {\r\n        get: function () {\r\n            return this._length;\r\n        },\r\n        set: function (newLength) {\r\n            if (newLength > this._length) {\r\n                for (var i = this._length; i < newLength; i++) {\r\n                    this._array[i] = undefined;\r\n                }\r\n            }\r\n            this._length = newLength;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CircularList.prototype.get = function (index) {\r\n        return this._array[this._getCyclicIndex(index)];\r\n    };\r\n    CircularList.prototype.set = function (index, value) {\r\n        this._array[this._getCyclicIndex(index)] = value;\r\n    };\r\n    CircularList.prototype.push = function (value) {\r\n        this._array[this._getCyclicIndex(this._length)] = value;\r\n        if (this._length === this._maxLength) {\r\n            this._startIndex++;\r\n            if (this._startIndex === this._maxLength) {\r\n                this._startIndex = 0;\r\n            }\r\n            this.emit('trim', 1);\r\n        }\r\n        else {\r\n            this._length++;\r\n        }\r\n    };\r\n    CircularList.prototype.pop = function () {\r\n        return this._array[this._getCyclicIndex(this._length-- - 1)];\r\n    };\r\n    CircularList.prototype.splice = function (start, deleteCount) {\r\n        var items = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            items[_i - 2] = arguments[_i];\r\n        }\r\n        if (deleteCount) {\r\n            for (var i = start; i < this._length - deleteCount; i++) {\r\n                this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\r\n            }\r\n            this._length -= deleteCount;\r\n        }\r\n        if (items && items.length) {\r\n            for (var i = this._length - 1; i >= start; i--) {\r\n                this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\r\n            }\r\n            for (var i = 0; i < items.length; i++) {\r\n                this._array[this._getCyclicIndex(start + i)] = items[i];\r\n            }\r\n            if (this._length + items.length > this.maxLength) {\r\n                var countToTrim = (this._length + items.length) - this.maxLength;\r\n                this._startIndex += countToTrim;\r\n                this._length = this.maxLength;\r\n                this.emit('trim', countToTrim);\r\n            }\r\n            else {\r\n                this._length += items.length;\r\n            }\r\n        }\r\n    };\r\n    CircularList.prototype.trimStart = function (count) {\r\n        if (count > this._length) {\r\n            count = this._length;\r\n        }\r\n        this._startIndex += count;\r\n        this._length -= count;\r\n        this.emit('trim', count);\r\n    };\r\n    CircularList.prototype.shiftElements = function (start, count, offset) {\r\n        if (count <= 0) {\r\n            return;\r\n        }\r\n        if (start < 0 || start >= this._length) {\r\n            throw new Error('start argument out of range');\r\n        }\r\n        if (start + offset < 0) {\r\n            throw new Error('Cannot shift elements in list beyond index 0');\r\n        }\r\n        if (offset > 0) {\r\n            for (var i = count - 1; i >= 0; i--) {\r\n                this.set(start + i + offset, this.get(start + i));\r\n            }\r\n            var expandListBy = (start + count + offset) - this._length;\r\n            if (expandListBy > 0) {\r\n                this._length += expandListBy;\r\n                while (this._length > this.maxLength) {\r\n                    this._length--;\r\n                    this._startIndex++;\r\n                    this.emit('trim', 1);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < count; i++) {\r\n                this.set(start + i + offset, this.get(start + i));\r\n            }\r\n        }\r\n    };\r\n    CircularList.prototype._getCyclicIndex = function (index) {\r\n        return (this._startIndex + index) % this.maxLength;\r\n    };\r\n    return CircularList;\r\n}(EventEmitter_1.EventEmitter));\r\nexports.CircularList = CircularList;\r\n\r\n\r\n\r\n},{\"../EventEmitter\":8}],39:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.clone = function (val, depth) {\r\n    if (depth === void 0) { depth = 5; }\r\n    if (typeof val !== 'object') {\r\n        return val;\r\n    }\r\n    if (val === null) {\r\n        return null;\r\n    }\r\n    var clonedObject = Array.isArray(val) ? [] : {};\r\n    for (var key in val) {\r\n        clonedObject[key] = depth <= 1 ? val[key] : exports.clone(val[key], depth - 1);\r\n    }\r\n    return clonedObject;\r\n};\r\n\r\n\r\n\r\n},{}],40:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction addDisposableListener(node, type, handler, useCapture) {\r\n    node.addEventListener(type, handler, useCapture);\r\n    return {\r\n        dispose: function () {\r\n            if (!handler) {\r\n                return;\r\n            }\r\n            node.removeEventListener(type, handler, useCapture);\r\n            node = null;\r\n            handler = null;\r\n        }\r\n    };\r\n}\r\nexports.addDisposableListener = addDisposableListener;\r\n\r\n\r\n\r\n},{}],41:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar MouseHelper = (function () {\r\n    function MouseHelper(_renderer) {\r\n        this._renderer = _renderer;\r\n    }\r\n    MouseHelper.getCoordsRelativeToElement = function (event, element) {\r\n        if (event.pageX == null) {\r\n            return null;\r\n        }\r\n        var originalElement = element;\r\n        var x = event.pageX;\r\n        var y = event.pageY;\r\n        while (element) {\r\n            x -= element.offsetLeft;\r\n            y -= element.offsetTop;\r\n            element = element.offsetParent;\r\n        }\r\n        element = originalElement;\r\n        while (element && element !== element.ownerDocument.body) {\r\n            x += element.scrollLeft;\r\n            y += element.scrollTop;\r\n            element = element.parentElement;\r\n        }\r\n        return [x, y];\r\n    };\r\n    MouseHelper.prototype.getCoords = function (event, element, charMeasure, lineHeight, colCount, rowCount, isSelection) {\r\n        if (!charMeasure.width || !charMeasure.height) {\r\n            return null;\r\n        }\r\n        var coords = MouseHelper.getCoordsRelativeToElement(event, element);\r\n        if (!coords) {\r\n            return null;\r\n        }\r\n        coords[0] = Math.ceil((coords[0] + (isSelection ? this._renderer.dimensions.actualCellWidth / 2 : 0)) / this._renderer.dimensions.actualCellWidth);\r\n        coords[1] = Math.ceil(coords[1] / this._renderer.dimensions.actualCellHeight);\r\n        coords[0] = Math.min(Math.max(coords[0], 1), colCount + (isSelection ? 1 : 0));\r\n        coords[1] = Math.min(Math.max(coords[1], 1), rowCount);\r\n        return coords;\r\n    };\r\n    MouseHelper.prototype.getRawByteCoords = function (event, element, charMeasure, lineHeight, colCount, rowCount) {\r\n        var coords = this.getCoords(event, element, charMeasure, lineHeight, colCount, rowCount);\r\n        var x = coords[0];\r\n        var y = coords[1];\r\n        x += 32;\r\n        y += 32;\r\n        return { x: x, y: y };\r\n    };\r\n    return MouseHelper;\r\n}());\r\nexports.MouseHelper = MouseHelper;\r\n\r\n\r\n\r\n},{}],42:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RenderDebouncer = (function () {\r\n    function RenderDebouncer(_terminal, _callback) {\r\n        this._terminal = _terminal;\r\n        this._callback = _callback;\r\n        this._animationFrame = null;\r\n    }\r\n    RenderDebouncer.prototype.dispose = function () {\r\n        if (this._animationFrame) {\r\n            window.cancelAnimationFrame(this._animationFrame);\r\n            this._animationFrame = null;\r\n        }\r\n    };\r\n    RenderDebouncer.prototype.refresh = function (rowStart, rowEnd) {\r\n        var _this = this;\r\n        rowStart = rowStart || 0;\r\n        rowEnd = rowEnd || this._terminal.rows - 1;\r\n        this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\r\n        this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\r\n        if (this._animationFrame) {\r\n            return;\r\n        }\r\n        this._animationFrame = window.requestAnimationFrame(function () { return _this._innerRefresh(); });\r\n    };\r\n    RenderDebouncer.prototype._innerRefresh = function () {\r\n        this._rowStart = Math.max(this._rowStart, 0);\r\n        this._rowEnd = Math.min(this._rowEnd, this._terminal.rows - 1);\r\n        this._callback(this._rowStart, this._rowEnd);\r\n        this._rowStart = null;\r\n        this._rowEnd = null;\r\n        this._animationFrame = null;\r\n    };\r\n    return RenderDebouncer;\r\n}());\r\nexports.RenderDebouncer = RenderDebouncer;\r\n\r\n\r\n\r\n},{}],43:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ScreenDprMonitor = (function () {\r\n    function ScreenDprMonitor() {\r\n    }\r\n    ScreenDprMonitor.prototype.setListener = function (listener) {\r\n        var _this = this;\r\n        if (this._listener) {\r\n            this.clearListener();\r\n        }\r\n        this._listener = listener;\r\n        this._outerListener = function () {\r\n            _this._listener(window.devicePixelRatio, _this._currentDevicePixelRatio);\r\n            _this._updateDpr();\r\n        };\r\n        this._updateDpr();\r\n    };\r\n    ScreenDprMonitor.prototype._updateDpr = function () {\r\n        if (this._resolutionMediaMatchList) {\r\n            this._resolutionMediaMatchList.removeListener(this._outerListener);\r\n        }\r\n        this._currentDevicePixelRatio = window.devicePixelRatio;\r\n        this._resolutionMediaMatchList = window.matchMedia(\"screen and (resolution: \" + window.devicePixelRatio + \"dppx)\");\r\n        this._resolutionMediaMatchList.addListener(this._outerListener);\r\n    };\r\n    ScreenDprMonitor.prototype.clearListener = function () {\r\n        if (!this._listener) {\r\n            return;\r\n        }\r\n        this._resolutionMediaMatchList.removeListener(this._outerListener);\r\n        this._listener = null;\r\n        this._outerListener = null;\r\n    };\r\n    return ScreenDprMonitor;\r\n}());\r\nexports.ScreenDprMonitor = ScreenDprMonitor;\r\n\r\n\r\n\r\n},{}],44:[function(require,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Terminal_1 = require(\"./Terminal\");\r\nmodule.exports = Terminal_1.Terminal;\r\n\r\n\r\n\r\n},{\"./Terminal\":16}]},{},[44])(44)\r\n});\r\n//# sourceMappingURL=xterm.js.map\r\n"),
	}
	filey := &embedded.EmbeddedFile{
		Filename:    "xterm.js.map",
		FileModTime: time.Unix(1532482412, 0),
		Content:     string("{\"version\":3,\"file\":\"xterm.js\",\"sources\":[\"../src/xterm.ts\",\"../src/utils/ScreenDprMonitor.ts\",\"../src/utils/RenderDebouncer.ts\",\"../src/utils/MouseHelper.ts\",\"../src/utils/Dom.ts\",\"../src/utils/Clone.ts\",\"../src/utils/CircularList.ts\",\"../src/utils/CharMeasure.ts\",\"../src/shared/utils/Browser.ts\",\"../src/shared/atlas/Types.ts\",\"../src/shared/atlas/CharAtlasGenerator.ts\",\"../src/renderer/atlas/Types.ts\",\"../src/renderer/atlas/CharAtlasUtils.ts\",\"../src/renderer/atlas/CharAtlas.ts\",\"../src/renderer/Types.ts\",\"../src/renderer/TextRenderLayer.ts\",\"../src/renderer/SelectionRenderLayer.ts\",\"../src/renderer/Renderer.ts\",\"../src/renderer/LinkRenderLayer.ts\",\"../src/renderer/GridCache.ts\",\"../src/renderer/CursorRenderLayer.ts\",\"../src/renderer/ColorManager.ts\",\"../src/renderer/BaseRenderLayer.ts\",\"../src/input/MouseZoneManager.ts\",\"../src/handlers/Clipboard.ts\",\"../src/handlers/AltClickHandler.ts\",\"../src/Viewport.ts\",\"../src/Types.ts\",\"../src/Terminal.ts\",\"../src/Strings.ts\",\"../src/SoundManager.ts\",\"../src/SelectionModel.ts\",\"../src/SelectionManager.ts\",\"../src/Parser.ts\",\"../src/Linkifier.ts\",\"../src/InputHandler.ts\",\"../src/EventEmitter.ts\",\"../src/EscapeSequences.ts\",\"../src/CompositionHelper.ts\",\"../src/Charsets.ts\",\"../src/CharWidth.ts\",\"../src/BufferSet.ts\",\"../src/Buffer.ts\",\"../src/AccessibilityManager.ts\",\"../node_modules/browser-pack/_prelude.js\"],\"sourcesContent\":[\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n *\\n * This file is the entry point for browserify.\\n */\\n\\nimport { Terminal } from './Terminal';\\n\\nmodule.exports = Terminal;\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nexport type ScreenDprListener = (newDevicePixelRatio?: number, oldDevicePixelRatio?: number) => void;\\n\\n/**\\n * The screen device pixel ratio monitor allows listening for when the\\n * window.devicePixelRatio value changes. This is done not with polling but with\\n * the use of window.matchMedia to watch media queries. When the event fires,\\n * the listener will be reattached using a different media query to ensure that\\n * any further changes will register.\\n *\\n * The listener should fire on both window zoom changes and switching to a\\n * monitor with a different DPI.\\n */\\nexport class ScreenDprMonitor {\\n  private _currentDevicePixelRatio: number;\\n  private _outerListener: MediaQueryListListener;\\n  private _listener: ScreenDprListener;\\n  private _resolutionMediaMatchList: MediaQueryList;\\n\\n  public setListener(listener: ScreenDprListener): void {\\n    if (this._listener) {\\n      this.clearListener();\\n    }\\n    this._listener = listener;\\n    this._outerListener = () => {\\n      this._listener(window.devicePixelRatio, this._currentDevicePixelRatio);\\n      this._updateDpr();\\n    };\\n    this._updateDpr();\\n  }\\n\\n  private _updateDpr(): void {\\n    // Clear listeners for old DPR\\n    if (this._resolutionMediaMatchList) {\\n      this._resolutionMediaMatchList.removeListener(this._outerListener);\\n    }\\n    // Add listeners for new DPR\\n    this._currentDevicePixelRatio = window.devicePixelRatio;\\n    this._resolutionMediaMatchList = window.matchMedia(`screen and (resolution: ${window.devicePixelRatio}dppx)`);\\n    this._resolutionMediaMatchList.addListener(this._outerListener);\\n  }\\n\\n  public clearListener(): void {\\n    if (!this._listener) {\\n      return;\\n    }\\n    this._resolutionMediaMatchList.removeListener(this._outerListener);\\n    this._listener = null;\\n    this._outerListener = null;\\n  }\\n}\\n\",\"import { ITerminal } from '../Types';\\nimport { IDisposable } from 'xterm';\\n\\n/**\\n * Debounces calls to render terminal rows using animation frames.\\n */\\nexport class RenderDebouncer implements IDisposable {\\n  private _rowStart: number;\\n  private _rowEnd: number;\\n  private _animationFrame: number = null;\\n\\n  constructor(\\n    private _terminal: ITerminal,\\n    private _callback: (start: number, end: number) => void\\n  ) {\\n  }\\n\\n  public dispose(): void {\\n    if (this._animationFrame) {\\n      window.cancelAnimationFrame(this._animationFrame);\\n      this._animationFrame = null;\\n    }\\n  }\\n\\n  public refresh(rowStart?: number, rowEnd?: number): void {\\n    rowStart = rowStart || 0;\\n    rowEnd = rowEnd || this._terminal.rows - 1;\\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\\n\\n    if (this._animationFrame) {\\n      return;\\n    }\\n\\n    this._animationFrame = window.requestAnimationFrame(() => this._innerRefresh());\\n  }\\n\\n  private _innerRefresh(): void {\\n    // Clamp values\\n    this._rowStart = Math.max(this._rowStart, 0);\\n    this._rowEnd = Math.min(this._rowEnd, this._terminal.rows - 1);\\n\\n    // Run render callback\\n    this._callback(this._rowStart, this._rowEnd);\\n\\n    // Reset debouncer\\n    this._rowStart = null;\\n    this._rowEnd = null;\\n    this._animationFrame = null;\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { ICharMeasure } from '../Types';\\nimport { IRenderer } from '../renderer/Types';\\n\\nexport class MouseHelper {\\n  constructor(private _renderer: IRenderer) {}\\n\\n  public static getCoordsRelativeToElement(event: {pageX: number, pageY: number}, element: HTMLElement): [number, number] {\\n    // Ignore browsers that don't support MouseEvent.pageX\\n    if (event.pageX == null) {\\n      return null;\\n    }\\n\\n    const originalElement = element;\\n    let x = event.pageX;\\n    let y = event.pageY;\\n\\n    // Converts the coordinates from being relative to the document to being\\n    // relative to the terminal.\\n    while (element) {\\n      x -= element.offsetLeft;\\n      y -= element.offsetTop;\\n      element = <HTMLElement>element.offsetParent;\\n    }\\n    element = originalElement;\\n    while (element && element !== element.ownerDocument.body) {\\n      x += element.scrollLeft;\\n      y += element.scrollTop;\\n      element = <HTMLElement>element.parentElement;\\n    }\\n    return [x, y];\\n  }\\n\\n  /**\\n   * Gets coordinates within the terminal for a particular mouse event. The result\\n   * is returned as an array in the form [x, y] instead of an object as it's a\\n   * little faster and this function is used in some low level code.\\n   * @param event The mouse event.\\n   * @param element The terminal's container element.\\n   * @param charMeasure The char measure object used to determine character sizes.\\n   * @param colCount The number of columns in the terminal.\\n   * @param rowCount The number of rows n the terminal.\\n   * @param isSelection Whether the request is for the selection or not. This will\\n   * apply an offset to the x value such that the left half of the cell will\\n   * select that cell and the right half will select the next cell.\\n   */\\n  public getCoords(event: {pageX: number, pageY: number}, element: HTMLElement, charMeasure: ICharMeasure, lineHeight: number, colCount: number, rowCount: number, isSelection?: boolean): [number, number] {\\n    // Coordinates cannot be measured if charMeasure has not been initialized\\n    if (!charMeasure.width || !charMeasure.height) {\\n      return null;\\n    }\\n\\n    const coords = MouseHelper.getCoordsRelativeToElement(event, element);\\n    if (!coords) {\\n      return null;\\n    }\\n\\n    coords[0] = Math.ceil((coords[0] + (isSelection ? this._renderer.dimensions.actualCellWidth / 2 : 0)) / this._renderer.dimensions.actualCellWidth);\\n    coords[1] = Math.ceil(coords[1] / this._renderer.dimensions.actualCellHeight);\\n\\n    // Ensure coordinates are within the terminal viewport. Note that selections\\n    // need an addition point of precision to cover the end point (as characters\\n    // cover half of one char and half of the next).\\n    coords[0] = Math.min(Math.max(coords[0], 1), colCount + (isSelection ? 1 : 0));\\n    coords[1] = Math.min(Math.max(coords[1], 1), rowCount);\\n\\n    return coords;\\n  }\\n\\n  /**\\n   * Gets coordinates within the terminal for a particular mouse event, wrapping\\n   * them to the bounds of the terminal and adding 32 to both the x and y values\\n   * as expected by xterm.\\n   * @param event The mouse event.\\n   * @param element The terminal's container element.\\n   * @param charMeasure The char measure object used to determine character sizes.\\n   * @param colCount The number of columns in the terminal.\\n   * @param rowCount The number of rows in the terminal.\\n   */\\n  public getRawByteCoords(event: MouseEvent, element: HTMLElement, charMeasure: ICharMeasure, lineHeight: number, colCount: number, rowCount: number): { x: number, y: number } {\\n    const coords = this.getCoords(event, element, charMeasure, lineHeight, colCount, rowCount);\\n    let x = coords[0];\\n    let y = coords[1];\\n\\n    // xterm sends raw bytes and starts at 32 (SP) for each.\\n    x += 32;\\n    y += 32;\\n\\n    return { x, y };\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { IDisposable } from 'xterm';\\n\\n/**\\n * Adds a disposabe listener to a node in the DOM, returning the disposable.\\n * @param type The event type.\\n * @param handler The handler for the listener.\\n */\\nexport function addDisposableListener(\\n  node: Element | Window | Document,\\n  type: string,\\n  handler: (e: any) => void,\\n  useCapture?: boolean\\n): IDisposable {\\n  node.addEventListener(type, handler, useCapture);\\n  return {\\n    dispose: () => {\\n      if (!handler) {\\n        // Already disposed\\n        return;\\n      }\\n      node.removeEventListener(type, handler, useCapture);\\n      node = null;\\n      handler = null;\\n    }\\n  };\\n}\\n\",\"/**\\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\n/*\\n * A simple utility for cloning values\\n */\\nexport const clone = <T>(val: T, depth: number = 5): T => {\\n  if (typeof val !== 'object') {\\n    return val;\\n  }\\n\\n  // cloning null always returns null\\n  if (val === null) {\\n    return null;\\n  }\\n\\n  // If we're cloning an array, use an array as the base, otherwise use an object\\n  const clonedObject: any = Array.isArray(val) ? [] : {};\\n\\n  for (const key in val) {\\n    // Recursively clone eack item unless we're at the maximum depth\\n    clonedObject[key] = depth <= 1 ? val[key] : clone(val[key], depth - 1);\\n  }\\n\\n  return clonedObject as T;\\n};\\n\",\"/**\\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { EventEmitter } from '../EventEmitter';\\nimport { ICircularList } from '../Types';\\n\\n/**\\n * Represents a circular list; a list with a maximum size that wraps around when push is called,\\n * overriding values at the start of the list.\\n */\\nexport class CircularList<T> extends EventEmitter implements ICircularList<T> {\\n  protected _array: T[];\\n  private _startIndex: number;\\n  private _length: number;\\n\\n  constructor(\\n    private _maxLength: number\\n  ) {\\n    super();\\n    this._array = new Array<T>(this._maxLength);\\n    this._startIndex = 0;\\n    this._length = 0;\\n  }\\n\\n  public get maxLength(): number {\\n    return this._maxLength;\\n  }\\n\\n  public set maxLength(newMaxLength: number) {\\n    // There was no change in maxLength, return early.\\n    if (this._maxLength === newMaxLength) {\\n      return;\\n    }\\n\\n    // Reconstruct array, starting at index 0. Only transfer values from the\\n    // indexes 0 to length.\\n    let newArray = new Array<T>(newMaxLength);\\n    for (let i = 0; i < Math.min(newMaxLength, this.length); i++) {\\n      newArray[i] = this._array[this._getCyclicIndex(i)];\\n    }\\n    this._array = newArray;\\n    this._maxLength = newMaxLength;\\n    this._startIndex = 0;\\n  }\\n\\n  public get length(): number {\\n    return this._length;\\n  }\\n\\n  public set length(newLength: number) {\\n    if (newLength > this._length) {\\n      for (let i = this._length; i < newLength; i++) {\\n        this._array[i] = undefined;\\n      }\\n    }\\n    this._length = newLength;\\n  }\\n\\n  /**\\n   * Gets the value at an index.\\n   *\\n   * Note that for performance reasons there is no bounds checking here, the index reference is\\n   * circular so this should always return a value and never throw.\\n   * @param index The index of the value to get.\\n   * @return The value corresponding to the index.\\n   */\\n  public get(index: number): T {\\n    return this._array[this._getCyclicIndex(index)];\\n  }\\n\\n  /**\\n   * Sets the value at an index.\\n   *\\n   * Note that for performance reasons there is no bounds checking here, the index reference is\\n   * circular so this should always return a value and never throw.\\n   * @param index The index to set.\\n   * @param value The value to set.\\n   */\\n  public set(index: number, value: T): void {\\n    this._array[this._getCyclicIndex(index)] = value;\\n  }\\n\\n  /**\\n   * Pushes a new value onto the list, wrapping around to the start of the array, overriding index 0\\n   * if the maximum length is reached.\\n   * @param value The value to push onto the list.\\n   */\\n  public push(value: T): void {\\n    this._array[this._getCyclicIndex(this._length)] = value;\\n    if (this._length === this._maxLength) {\\n      this._startIndex++;\\n      if (this._startIndex === this._maxLength) {\\n        this._startIndex = 0;\\n      }\\n      this.emit('trim', 1);\\n    } else {\\n      this._length++;\\n    }\\n  }\\n\\n  /**\\n   * Removes and returns the last value on the list.\\n   * @return The popped value.\\n   */\\n  public pop(): T {\\n    return this._array[this._getCyclicIndex(this._length-- - 1)];\\n  }\\n\\n  /**\\n   * Deletes and/or inserts items at a particular index (in that order). Unlike\\n   * Array.prototype.splice, this operation does not return the deleted items as a new array in\\n   * order to save creating a new array. Note that this operation may shift all values in the list\\n   * in the worst case.\\n   * @param start The index to delete and/or insert.\\n   * @param deleteCount The number of elements to delete.\\n   * @param items The items to insert.\\n   */\\n  public splice(start: number, deleteCount: number, ...items: T[]): void {\\n    // Delete items\\n    if (deleteCount) {\\n      for (let i = start; i < this._length - deleteCount; i++) {\\n        this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\\n      }\\n      this._length -= deleteCount;\\n    }\\n\\n    if (items && items.length) {\\n      // Add items\\n      for (let i = this._length - 1; i >= start; i--) {\\n        this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\\n      }\\n      for (let i = 0; i < items.length; i++) {\\n        this._array[this._getCyclicIndex(start + i)] = items[i];\\n      }\\n\\n      // Adjust length as needed\\n      if (this._length + items.length > this.maxLength) {\\n        const countToTrim = (this._length + items.length) - this.maxLength;\\n        this._startIndex += countToTrim;\\n        this._length = this.maxLength;\\n        this.emit('trim', countToTrim);\\n      } else {\\n        this._length += items.length;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Trims a number of items from the start of the list.\\n   * @param count The number of items to remove.\\n   */\\n  public trimStart(count: number): void {\\n    if (count > this._length) {\\n      count = this._length;\\n    }\\n    this._startIndex += count;\\n    this._length -= count;\\n    this.emit('trim', count);\\n  }\\n\\n  public shiftElements(start: number, count: number, offset: number): void {\\n    if (count <= 0) {\\n      return;\\n    }\\n    if (start < 0 || start >= this._length) {\\n      throw new Error('start argument out of range');\\n    }\\n    if (start + offset < 0) {\\n      throw new Error('Cannot shift elements in list beyond index 0');\\n    }\\n\\n    if (offset > 0) {\\n      for (let i = count - 1; i >= 0; i--) {\\n        this.set(start + i + offset, this.get(start + i));\\n      }\\n      const expandListBy = (start + count + offset) - this._length;\\n      if (expandListBy > 0) {\\n        this._length += expandListBy;\\n        while (this._length > this.maxLength) {\\n          this._length--;\\n          this._startIndex++;\\n          this.emit('trim', 1);\\n        }\\n      }\\n    } else {\\n      for (let i = 0; i < count; i++) {\\n        this.set(start + i + offset, this.get(start + i));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Gets the cyclic index for the specified regular index. The cyclic index can then be used on the\\n   * backing array to get the element associated with the regular index.\\n   * @param index The regular index.\\n   * @returns The cyclic index.\\n   */\\n  private _getCyclicIndex(index: number): number {\\n    return (this._startIndex + index) % this.maxLength;\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { ICharMeasure, ITerminalOptions } from '../Types';\\nimport { EventEmitter } from '../EventEmitter';\\n\\n/**\\n * Utility class that measures the size of a character. Measurements are done in\\n * the DOM rather than with a canvas context because support for extracting the\\n * height of characters is patchy across browsers.\\n */\\nexport class CharMeasure extends EventEmitter implements ICharMeasure {\\n  private _document: Document;\\n  private _parentElement: HTMLElement;\\n  private _measureElement: HTMLElement;\\n  private _width: number;\\n  private _height: number;\\n\\n  constructor(document: Document, parentElement: HTMLElement) {\\n    super();\\n    this._document = document;\\n    this._parentElement = parentElement;\\n    this._measureElement = this._document.createElement('span');\\n    this._measureElement.classList.add('xterm-char-measure-element');\\n    this._measureElement.textContent = 'W';\\n    this._measureElement.setAttribute('aria-hidden', 'true');\\n    this._parentElement.appendChild(this._measureElement);\\n  }\\n\\n  public get width(): number {\\n    return this._width;\\n  }\\n\\n  public get height(): number {\\n    return this._height;\\n  }\\n\\n  public measure(options: ITerminalOptions): void {\\n  this._measureElement.style.fontFamily = options.fontFamily;\\n    this._measureElement.style.fontSize = `${options.fontSize}px`;\\n    const geometry = this._measureElement.getBoundingClientRect();\\n    // The element is likely currently display:none, we should retain the\\n    // previous value.\\n    if (geometry.width === 0 || geometry.height === 0) {\\n      return;\\n    }\\n    if (this._width !== geometry.width || this._height !== geometry.height) {\\n      this._width = geometry.width;\\n      this._height = Math.ceil(geometry.height);\\n      this.emit('charsizechanged');\\n    }\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nconst isNode = (typeof navigator === 'undefined') ? true : false;\\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\\nconst platform = (isNode) ? 'node' : navigator.platform;\\n\\nexport const isFirefox = !!~userAgent.indexOf('Firefox');\\nexport const isMSIE = !!~userAgent.indexOf('MSIE') || !!~userAgent.indexOf('Trident');\\n\\n// Find the users platform. We use this to interpret the meta key\\n// and ISO third level shifts.\\n// http://stackoverflow.com/q/19877924/577598\\nexport const isMac = contains(['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'], platform);\\nexport const isIpad = platform === 'iPad';\\nexport const isIphone = platform === 'iPhone';\\nexport const isMSWindows = contains(['Windows', 'Win16', 'Win32', 'WinCE'], platform);\\nexport const isLinux = platform.indexOf('Linux') >= 0;\\n\\n/**\\n * Return if the given array contains the given element\\n * @param {Array} array The array to search for the given element.\\n * @param {Object} el The element to look for into the array\\n */\\nfunction contains(arr: any[], el: any): boolean {\\n  return arr.indexOf(el) >= 0;\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { FontWeight } from 'xterm';\\nimport { IColorSet } from '../Types';\\n\\nexport const CHAR_ATLAS_CELL_SPACING = 1;\\n\\nexport interface ICharAtlasConfig {\\n  devicePixelRatio: number;\\n  fontSize: number;\\n  fontFamily: string;\\n  fontWeight: FontWeight;\\n  fontWeightBold: FontWeight;\\n  scaledCharWidth: number;\\n  scaledCharHeight: number;\\n  allowTransparency: boolean;\\n  colors: IColorSet;\\n}\\n\",\"/**\\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { FontWeight } from 'xterm';\\nimport { CHAR_ATLAS_CELL_SPACING, ICharAtlasConfig } from './Types';\\nimport { isFirefox } from '../utils/Browser';\\n\\ndeclare const Promise: any;\\n\\nexport interface IOffscreenCanvas {\\n  width: number;\\n  height: number;\\n  getContext(type: '2d', config?: Canvas2DContextAttributes): CanvasRenderingContext2D;\\n  transferToImageBitmap(): ImageBitmap;\\n}\\n\\n/**\\n * Generates a char atlas.\\n * @param context The window or worker context.\\n * @param canvasFactory A function to generate a canvas with a width or height.\\n * @param request The config for the new char atlas.\\n */\\nexport function generateCharAtlas(context: Window, canvasFactory: (width: number, height: number) => HTMLCanvasElement | IOffscreenCanvas, config: ICharAtlasConfig): HTMLCanvasElement | Promise<ImageBitmap> {\\n  const cellWidth = config.scaledCharWidth + CHAR_ATLAS_CELL_SPACING;\\n  const cellHeight = config.scaledCharHeight + CHAR_ATLAS_CELL_SPACING;\\n  const canvas = canvasFactory(\\n    /*255 ascii chars*/255 * cellWidth,\\n    (/*default+default bold*/2 + /*0-15*/16) * cellHeight\\n  );\\n  const ctx = canvas.getContext('2d', {alpha: config.allowTransparency});\\n\\n  ctx.fillStyle = config.colors.background.css;\\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\\n\\n  ctx.save();\\n  ctx.fillStyle = config.colors.foreground.css;\\n  ctx.font = getFont(config.fontWeight, config);\\n  ctx.textBaseline = 'top';\\n\\n  // Default color\\n  for (let i = 0; i < 256; i++) {\\n    ctx.save();\\n    ctx.beginPath();\\n    ctx.rect(i * cellWidth, 0, cellWidth, cellHeight);\\n    ctx.clip();\\n    ctx.fillText(String.fromCharCode(i), i * cellWidth, 0);\\n    ctx.restore();\\n  }\\n  // Default color bold\\n  ctx.save();\\n  ctx.font = getFont(config.fontWeightBold, config);\\n  for (let i = 0; i < 256; i++) {\\n    ctx.save();\\n    ctx.beginPath();\\n    ctx.rect(i * cellWidth, cellHeight, cellWidth, cellHeight);\\n    ctx.clip();\\n    ctx.fillText(String.fromCharCode(i), i * cellWidth, cellHeight);\\n    ctx.restore();\\n  }\\n  ctx.restore();\\n\\n  // Colors 0-15\\n  ctx.font = getFont(config.fontWeight, config);\\n  for (let colorIndex = 0; colorIndex < 16; colorIndex++) {\\n    // colors 8-15 are bold\\n    if (colorIndex === 8) {\\n      ctx.font = getFont(config.fontWeightBold, config);\\n    }\\n    const y = (colorIndex + 2) * cellHeight;\\n    // Draw ascii characters\\n    for (let i = 0; i < 256; i++) {\\n      ctx.save();\\n      ctx.beginPath();\\n      ctx.rect(i * cellWidth, y, cellWidth, cellHeight);\\n      ctx.clip();\\n      ctx.fillStyle = config.colors.ansi[colorIndex].css;\\n      ctx.fillText(String.fromCharCode(i), i * cellWidth, y);\\n      ctx.restore();\\n    }\\n  }\\n  ctx.restore();\\n\\n  // Support is patchy for createImageBitmap at the moment, pass a canvas back\\n  // if support is lacking as drawImage works there too. Firefox is also\\n  // included here as ImageBitmap appears both buggy and has horrible\\n  // performance (tested on v55).\\n  if (!('createImageBitmap' in context) || isFirefox) {\\n    // Don't attempt to clear background colors if createImageBitmap is not supported\\n    if (canvas instanceof HTMLCanvasElement) {\\n      // Just return the HTMLCanvas if it's a HTMLCanvasElement\\n      return canvas;\\n    } else {\\n      // Transfer to an ImageBitmap is this is an OffscreenCanvas\\n      return new Promise(r => r(canvas.transferToImageBitmap()));\\n    }\\n  }\\n\\n  const charAtlasImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\\n\\n  // Remove the background color from the image so characters may overlap\\n  const r = config.colors.background.rgba >>> 24;\\n  const g = config.colors.background.rgba >>> 16 & 0xFF;\\n  const b = config.colors.background.rgba >>> 8 & 0xFF;\\n  clearColor(charAtlasImageData, r, g, b);\\n\\n  return context.createImageBitmap(charAtlasImageData);\\n}\\n\\n/**\\n * Makes a partiicular rgb color in an ImageData completely transparent.\\n */\\nfunction clearColor(imageData: ImageData, r: number, g: number, b: number): void {\\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\\n    if (imageData.data[offset] === r &&\\n        imageData.data[offset + 1] === g &&\\n        imageData.data[offset + 2] === b) {\\n      imageData.data[offset + 3] = 0;\\n    }\\n  }\\n}\\n\\nfunction getFont(fontWeight: FontWeight, config: ICharAtlasConfig): string {\\n  return `${fontWeight} ${config.fontSize * config.devicePixelRatio}px ${config.fontFamily}`;\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nexport const INVERTED_DEFAULT_COLOR = -1;\\nexport const DIM_OPACITY = 0.5;\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { ITerminal } from '../../Types';\\nimport { IColorSet } from '../Types';\\nimport { ICharAtlasConfig } from '../../shared/atlas/Types';\\n\\nexport function generateConfig(scaledCharWidth: number, scaledCharHeight: number, terminal: ITerminal, colors: IColorSet): ICharAtlasConfig {\\n  const clonedColors = {\\n    foreground: colors.foreground,\\n    background: colors.background,\\n    cursor: null,\\n    cursorAccent: null,\\n    selection: null,\\n    ansi: colors.ansi.slice(0, 16)\\n  };\\n  return {\\n    devicePixelRatio: window.devicePixelRatio,\\n    scaledCharWidth,\\n    scaledCharHeight,\\n    fontFamily: terminal.options.fontFamily,\\n    fontSize: terminal.options.fontSize,\\n    fontWeight: terminal.options.fontWeight,\\n    fontWeightBold: terminal.options.fontWeightBold,\\n    allowTransparency: terminal.options.allowTransparency,\\n    colors: clonedColors\\n  };\\n}\\n\\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\\n  for (let i = 0; i < a.colors.ansi.length; i++) {\\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\\n      return false;\\n    }\\n  }\\n  return a.devicePixelRatio === b.devicePixelRatio &&\\n      a.fontFamily === b.fontFamily &&\\n      a.fontSize === b.fontSize &&\\n      a.fontWeight === b.fontWeight &&\\n      a.fontWeightBold === b.fontWeightBold &&\\n      a.allowTransparency === b.allowTransparency &&\\n      a.scaledCharWidth === b.scaledCharWidth &&\\n      a.scaledCharHeight === b.scaledCharHeight &&\\n      a.colors.foreground === b.colors.foreground &&\\n      a.colors.background === b.colors.background;\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { ITerminal } from '../../Types';\\nimport { IColorSet } from '../Types';\\nimport { ICharAtlasConfig } from '../../shared/atlas/Types';\\nimport { generateCharAtlas } from '../../shared/atlas/CharAtlasGenerator';\\nimport { generateConfig, configEquals } from './CharAtlasUtils';\\n\\ninterface ICharAtlasCacheEntry {\\n  bitmap: HTMLCanvasElement | Promise<ImageBitmap>;\\n  config: ICharAtlasConfig;\\n  ownedBy: ITerminal[];\\n}\\n\\nlet charAtlasCache: ICharAtlasCacheEntry[] = [];\\n\\n/**\\n * Acquires a char atlas, either generating a new one or returning an existing\\n * one that is in use by another terminal.\\n * @param terminal The terminal.\\n * @param colors The colors to use.\\n */\\nexport function acquireCharAtlas(terminal: ITerminal, colors: IColorSet, scaledCharWidth: number, scaledCharHeight: number): HTMLCanvasElement | Promise<ImageBitmap> {\\n  const newConfig = generateConfig(scaledCharWidth, scaledCharHeight, terminal, colors);\\n\\n  // Check to see if the terminal already owns this config\\n  for (let i = 0; i < charAtlasCache.length; i++) {\\n    const entry = charAtlasCache[i];\\n    const ownedByIndex = entry.ownedBy.indexOf(terminal);\\n    if (ownedByIndex >= 0) {\\n      if (configEquals(entry.config, newConfig)) {\\n        return entry.bitmap;\\n      } else {\\n        // The configs differ, release the terminal from the entry\\n        if (entry.ownedBy.length === 1) {\\n          charAtlasCache.splice(i, 1);\\n        } else {\\n          entry.ownedBy.splice(ownedByIndex, 1);\\n        }\\n        break;\\n      }\\n    }\\n  }\\n\\n  // Try match a char atlas from the cache\\n  for (let i = 0; i < charAtlasCache.length; i++) {\\n    const entry = charAtlasCache[i];\\n    if (configEquals(entry.config, newConfig)) {\\n      // Add the terminal to the cache entry and return\\n      entry.ownedBy.push(terminal);\\n      return entry.bitmap;\\n    }\\n  }\\n\\n  const canvasFactory = (width: number, height: number) => {\\n    const canvas = document.createElement('canvas');\\n    canvas.width = width;\\n    canvas.height = height;\\n    return canvas;\\n  };\\n\\n  const newEntry: ICharAtlasCacheEntry = {\\n    bitmap: generateCharAtlas(window, canvasFactory, newConfig),\\n    config: newConfig,\\n    ownedBy: [terminal]\\n  };\\n  charAtlasCache.push(newEntry);\\n  return newEntry.bitmap;\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { ITerminal } from '../Types';\\nimport { IEventEmitter, ITheme } from 'xterm';\\nimport { IColorSet } from '../shared/Types';\\n\\n/**\\n * Flags used to render terminal text properly.\\n */\\nexport enum FLAGS {\\n  BOLD = 1,\\n  UNDERLINE = 2,\\n  BLINK = 4,\\n  INVERSE = 8,\\n  INVISIBLE = 16,\\n  DIM = 32\\n}\\n\\nexport interface IRenderer extends IEventEmitter {\\n  dimensions: IRenderDimensions;\\n  colorManager: IColorManager;\\n\\n  setTheme(theme: ITheme): IColorSet;\\n  onWindowResize(devicePixelRatio: number): void;\\n  onResize(cols: number, rows: number): void;\\n  onCharSizeChanged(): void;\\n  onBlur(): void;\\n  onFocus(): void;\\n  onSelectionChanged(start: [number, number], end: [number, number]): void;\\n  onCursorMove(): void;\\n  onOptionsChanged(): void;\\n  clear(): void;\\n  refreshRows(start: number, end: number): void;\\n}\\n\\nexport interface IColorManager {\\n  colors: IColorSet;\\n}\\n\\n// TODO: We should probably rewrite the imports for IColorSet, but there's a lot of them\\nexport { IColorSet };\\n\\nexport interface IRenderDimensions {\\n  scaledCharWidth: number;\\n  scaledCharHeight: number;\\n  scaledCellWidth: number;\\n  scaledCellHeight: number;\\n  scaledCharLeft: number;\\n  scaledCharTop: number;\\n  scaledCanvasWidth: number;\\n  scaledCanvasHeight: number;\\n  canvasWidth: number;\\n  canvasHeight: number;\\n  actualCellWidth: number;\\n  actualCellHeight: number;\\n}\\n\\nexport interface IRenderLayer {\\n  /**\\n   * Called when the terminal loses focus.\\n   */\\n  onBlur(terminal: ITerminal): void;\\n\\n  /**\\n   * * Called when the terminal gets focus.\\n   */\\n  onFocus(terminal: ITerminal): void;\\n\\n  /**\\n   * Called when the cursor is moved.\\n   */\\n  onCursorMove(terminal: ITerminal): void;\\n\\n  /**\\n   * Called when options change.\\n   */\\n  onOptionsChanged(terminal: ITerminal): void;\\n\\n  /**\\n   * Called when the theme changes.\\n   */\\n  onThemeChanged(terminal: ITerminal, colorSet: IColorSet): void;\\n\\n  /**\\n   * Called when the data in the grid has changed (or needs to be rendered\\n   * again).\\n   */\\n  onGridChanged(terminal: ITerminal, startRow: number, endRow: number): void;\\n\\n  /**\\n   * Calls when the selection changes.\\n   */\\n  onSelectionChanged(terminal: ITerminal, start: [number, number], end: [number, number]): void;\\n\\n  /**\\n   * Resize the render layer.\\n   */\\n  resize(terminal: ITerminal, dim: IRenderDimensions): void;\\n\\n  /**\\n   * Clear the state of the render layer.\\n   */\\n  reset(terminal: ITerminal): void;\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { CHAR_DATA_ATTR_INDEX, CHAR_DATA_CODE_INDEX, CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX } from '../Buffer';\\nimport { FLAGS, IColorSet, IRenderDimensions } from './Types';\\nimport { CharData, ITerminal } from '../Types';\\nimport { INVERTED_DEFAULT_COLOR } from './atlas/Types';\\nimport { GridCache } from './GridCache';\\nimport { BaseRenderLayer } from './BaseRenderLayer';\\n\\n/**\\n * This CharData looks like a null character, which will forc a clear and render\\n * when the character changes (a regular space ' ' character may not as it's\\n * drawn state is a cleared cell).\\n */\\n// const OVERLAP_OWNED_CHAR_DATA: CharData = [null, '', 0, -1];\\n\\nexport class TextRenderLayer extends BaseRenderLayer {\\n  private _state: GridCache<CharData>;\\n  private _characterWidth: number;\\n  private _characterFont: string;\\n  private _characterOverlapCache: { [key: string]: boolean } = {};\\n\\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet, alpha: boolean) {\\n    super(container, 'text', zIndex, alpha, colors);\\n    this._state = new GridCache<CharData>();\\n  }\\n\\n  public resize(terminal: ITerminal, dim: IRenderDimensions): void {\\n    super.resize(terminal, dim);\\n\\n    // Clear the character width cache if the font or width has changed\\n    const terminalFont = this._getFont(terminal, false);\\n    if (this._characterWidth !== dim.scaledCharWidth || this._characterFont !== terminalFont) {\\n      this._characterWidth = dim.scaledCharWidth;\\n      this._characterFont = terminalFont;\\n      this._characterOverlapCache = {};\\n    }\\n    // Resizing the canvas discards the contents of the canvas so clear state\\n    this._state.clear();\\n    this._state.resize(terminal.cols, terminal.rows);\\n  }\\n\\n  public reset(terminal: ITerminal): void {\\n    this._state.clear();\\n    this.clearAll();\\n  }\\n\\n  public onGridChanged(terminal: ITerminal, startRow: number, endRow: number): void {\\n    // Resize has not been called yet\\n    if (this._state.cache.length === 0) {\\n      return;\\n    }\\n\\n    for (let y = startRow; y <= endRow; y++) {\\n      const row = y + terminal.buffer.ydisp;\\n      const line = terminal.buffer.lines.get(row);\\n\\n      this.clearCells(0, y, terminal.cols, 1);\\n      // for (let x = 0; x < terminal.cols; x++) {\\n      //   this._state.cache[x][y] = null;\\n      // }\\n\\n      for (let x = 0; x < terminal.cols; x++) {\\n        const charData = line[x];\\n        const code: number = <number>charData[CHAR_DATA_CODE_INDEX];\\n        const char: string = charData[CHAR_DATA_CHAR_INDEX];\\n        const attr: number = charData[CHAR_DATA_ATTR_INDEX];\\n        let width: number = charData[CHAR_DATA_WIDTH_INDEX];\\n\\n        // The character to the left is a wide character, drawing is owned by\\n        // the char at x-1\\n        if (width === 0) {\\n          // this._state.cache[x][y] = null;\\n          continue;\\n        }\\n\\n        // If the character is a space and the character to the left is an\\n        // overlapping character, skip the character and allow the overlapping\\n        // char to take full control over this character's cell.\\n        if (code === 32 /*' '*/) {\\n          if (x > 0) {\\n            const previousChar: CharData = line[x - 1];\\n            if (this._isOverlapping(previousChar)) {\\n              continue;\\n            }\\n          }\\n        }\\n\\n        // Skip rendering if the character is identical\\n        // const state = this._state.cache[x][y];\\n        // if (state && state[CHAR_DATA_CHAR_INDEX] === char && state[CHAR_DATA_ATTR_INDEX] === attr) {\\n        //   // Skip render, contents are identical\\n        //   this._state.cache[x][y] = charData;\\n        //   continue;\\n        // }\\n\\n        // Clear the old character was not a space with the default background\\n        // const wasInverted = !!(state && state[CHAR_DATA_ATTR_INDEX] && state[CHAR_DATA_ATTR_INDEX] >> 18 & FLAGS.INVERSE);\\n        // if (state && !(state[CHAR_DATA_CODE_INDEX] === 32 /*' '*/ && (state[CHAR_DATA_ATTR_INDEX] & 0x1ff) >= 256 && !wasInverted)) {\\n        //   this._clearChar(x, y);\\n        // }\\n        // this._state.cache[x][y] = charData;\\n\\n        const flags = attr >> 18;\\n        let bg = attr & 0x1ff;\\n\\n        // Skip rendering if the character is invisible\\n        const isDefaultBackground = bg >= 256;\\n        const isInvisible = flags & FLAGS.INVISIBLE;\\n        const isInverted = flags & FLAGS.INVERSE;\\n        if (!code || (code === 32 /*' '*/ && isDefaultBackground && !isInverted) || isInvisible) {\\n          continue;\\n        }\\n\\n        // If the character is an overlapping char and the character to the right is a\\n        // space, take ownership of the cell to the right.\\n        if (width !== 0 && this._isOverlapping(charData)) {\\n          // If the character is overlapping, we want to force a re-render on every\\n          // frame. This is specifically to work around the case where two\\n          // overlaping chars `a` and `b` are adjacent, the cursor is moved to b and a\\n          // space is added. Without this, the first half of `b` would never\\n          // get removed, and `a` would not re-render because it thinks it's\\n          // already in the correct state.\\n          // this._state.cache[x][y] = OVERLAP_OWNED_CHAR_DATA;\\n          if (x < line.length - 1 && line[x + 1][CHAR_DATA_CODE_INDEX] === 32 /*' '*/) {\\n            width = 2;\\n            // this._clearChar(x + 1, y);\\n            // The overlapping char's char data will force a clear and render when the\\n            // overlapping char is no longer to the left of the character and also when\\n            // the space changes to another character.\\n            // this._state.cache[x + 1][y] = OVERLAP_OWNED_CHAR_DATA;\\n          }\\n        }\\n\\n        let fg = (attr >> 9) & 0x1ff;\\n\\n        // If inverse flag is on, the foreground should become the background.\\n        if (isInverted) {\\n          const temp = bg;\\n          bg = fg;\\n          fg = temp;\\n          if (fg === 256) {\\n            fg = INVERTED_DEFAULT_COLOR;\\n          }\\n          if (bg === 257) {\\n            bg = INVERTED_DEFAULT_COLOR;\\n          }\\n        }\\n\\n        // Clear the cell next to this character if it's wide\\n        if (width === 2) {\\n          // this.clearCells(x + 1, y, 1, 1);\\n        }\\n\\n        // Draw background\\n        if (bg < 256) {\\n          this._ctx.save();\\n          this._ctx.fillStyle = (bg === INVERTED_DEFAULT_COLOR ? this._colors.foreground.css : this._colors.ansi[bg].css);\\n          this.fillCells(x, y, width, 1);\\n          this._ctx.restore();\\n        }\\n\\n        this._ctx.save();\\n        if (flags & FLAGS.BOLD) {\\n          this._ctx.font = this._getFont(terminal, true);\\n          // Convert the FG color to the bold variant\\n          if (fg < 8) {\\n            fg += 8;\\n          }\\n        }\\n\\n        if (flags & FLAGS.UNDERLINE) {\\n          if (fg === INVERTED_DEFAULT_COLOR) {\\n            this._ctx.fillStyle = this._colors.background.css;\\n          } else if (fg < 256) {\\n            // 256 color support\\n            this._ctx.fillStyle = this._colors.ansi[fg].css;\\n          } else {\\n            this._ctx.fillStyle = this._colors.foreground.css;\\n          }\\n          this.fillBottomLineAtCells(x, y);\\n        }\\n\\n        this.drawChar(terminal, char, code, width, x, y, fg, bg, !!(flags & FLAGS.BOLD), !!(flags & FLAGS.DIM));\\n\\n        this._ctx.restore();\\n      }\\n    }\\n  }\\n\\n  public onOptionsChanged(terminal: ITerminal): void {\\n    this.setTransparency(terminal, terminal.options.allowTransparency);\\n  }\\n\\n  /**\\n   * Whether a character is overlapping to the next cell.\\n   */\\n  private _isOverlapping(charData: CharData): boolean {\\n    // Only single cell characters can be overlapping, rendering issues can\\n    // occur without this check\\n    if (charData[CHAR_DATA_WIDTH_INDEX] !== 1) {\\n      return false;\\n    }\\n\\n    // We assume that any ascii character will not overlap\\n    const code = charData[CHAR_DATA_CODE_INDEX];\\n    if (code < 256) {\\n      return false;\\n    }\\n\\n    // Deliver from cache if available\\n    const char = charData[CHAR_DATA_CHAR_INDEX];\\n    if (this._characterOverlapCache.hasOwnProperty(char)) {\\n      return this._characterOverlapCache[char];\\n    }\\n\\n    // Setup the font\\n    this._ctx.save();\\n    this._ctx.font = this._characterFont;\\n\\n    // Measure the width of the character, but Math.floor it\\n    // because that is what the renderer does when it calculates\\n    // the character dimensions we are comparing against\\n    const overlaps = Math.floor(this._ctx.measureText(char).width) > this._characterWidth;\\n\\n    // Restore the original context\\n    this._ctx.restore();\\n\\n    // Cache and return\\n    this._characterOverlapCache[char] = overlaps;\\n    return overlaps;\\n  }\\n\\n  /**\\n   * Clear the charcater at the cell specified.\\n   * @param x The column of the char.\\n   * @param y The row of the char.\\n   */\\n  // private _clearChar(x: number, y: number): void {\\n  //   let colsToClear = 1;\\n  //   // Clear the adjacent character if it was wide\\n  //   const state = this._state.cache[x][y];\\n  //   if (state && state[CHAR_DATA_WIDTH_INDEX] === 2) {\\n  //     colsToClear = 2;\\n  //   }\\n  //   this.clearCells(x, y, colsToClear, 1);\\n  // }\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { ITerminal } from '../Types';\\nimport { IColorSet, IRenderDimensions } from './Types';\\nimport { BaseRenderLayer } from './BaseRenderLayer';\\n\\nexport class SelectionRenderLayer extends BaseRenderLayer {\\n  private _state: {start: [number, number], end: [number, number]};\\n\\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet) {\\n    super(container, 'selection', zIndex, true, colors);\\n    this._state = {\\n      start: null,\\n      end: null\\n    };\\n  }\\n\\n  public resize(terminal: ITerminal, dim: IRenderDimensions): void {\\n    super.resize(terminal, dim);\\n    // Resizing the canvas discards the contents of the canvas so clear state\\n    this._state = {\\n      start: null,\\n      end: null\\n    };\\n  }\\n\\n  public reset(terminal: ITerminal): void {\\n    if (this._state.start && this._state.end) {\\n      this._state = {\\n        start: null,\\n        end: null\\n      };\\n      this.clearAll();\\n    }\\n  }\\n\\n  public onSelectionChanged(terminal: ITerminal, start: [number, number], end: [number, number]): void {\\n    // Selection has not changed\\n    if (this._state.start === start || this._state.end === end) {\\n      return;\\n    }\\n\\n    // Remove all selections\\n    this.clearAll();\\n\\n    // Selection does not exist\\n    if (!start || !end) {\\n      return;\\n    }\\n\\n    // Translate from buffer position to viewport position\\n    const viewportStartRow = start[1] - terminal.buffer.ydisp;\\n    const viewportEndRow = end[1] - terminal.buffer.ydisp;\\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\\n    const viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\\n\\n    // No need to draw the selection\\n    if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\\n      return;\\n    }\\n\\n    // Draw first row\\n    const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\\n    const startRowEndCol = viewportCappedStartRow === viewportCappedEndRow ? end[0] : terminal.cols;\\n    this._ctx.fillStyle = this._colors.selection.css;\\n    this.fillCells(startCol, viewportCappedStartRow, startRowEndCol - startCol, 1);\\n\\n    // Draw middle rows\\n    const middleRowsCount = Math.max(viewportCappedEndRow - viewportCappedStartRow - 1, 0);\\n    this.fillCells(0, viewportCappedStartRow + 1, terminal.cols, middleRowsCount);\\n\\n    // Draw final row\\n    if (viewportCappedStartRow !== viewportCappedEndRow) {\\n      // Only draw viewportEndRow if it's not the same as viewportStartRow\\n      const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : terminal.cols;\\n      this.fillCells(0, viewportCappedEndRow, endCol, 1);\\n    }\\n\\n    // Save state for next render\\n    this._state.start = [start[0], start[1]];\\n    this._state.end = [end[0], end[1]];\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { TextRenderLayer } from './TextRenderLayer';\\nimport { SelectionRenderLayer } from './SelectionRenderLayer';\\nimport { CursorRenderLayer } from './CursorRenderLayer';\\nimport { ColorManager } from './ColorManager';\\nimport { IRenderLayer, IColorSet, IRenderer, IRenderDimensions } from './Types';\\nimport { ITerminal } from '../Types';\\nimport { LinkRenderLayer } from './LinkRenderLayer';\\nimport { EventEmitter } from '../EventEmitter';\\nimport { RenderDebouncer } from '../utils/RenderDebouncer';\\nimport { ScreenDprMonitor } from '../utils/ScreenDprMonitor';\\nimport { ITheme } from 'xterm';\\n\\nexport class Renderer extends EventEmitter implements IRenderer {\\n  private _renderDebouncer: RenderDebouncer;\\n\\n  private _renderLayers: IRenderLayer[];\\n  private _devicePixelRatio: number;\\n  private _screenDprMonitor: ScreenDprMonitor;\\n  private _isPaused: boolean = false;\\n  private _needsFullRefresh: boolean = false;\\n\\n  public colorManager: ColorManager;\\n  public dimensions: IRenderDimensions;\\n\\n  constructor(private _terminal: ITerminal, theme: ITheme) {\\n    super();\\n    const allowTransparency = this._terminal.options.allowTransparency;\\n    this.colorManager = new ColorManager(document, allowTransparency);\\n    if (theme) {\\n      this.colorManager.setTheme(theme);\\n    }\\n\\n    this._renderLayers = [\\n      new TextRenderLayer(this._terminal.screenElement, 0, this.colorManager.colors, allowTransparency),\\n      new SelectionRenderLayer(this._terminal.screenElement, 1, this.colorManager.colors),\\n      new LinkRenderLayer(this._terminal.screenElement, 2, this.colorManager.colors, this._terminal),\\n      new CursorRenderLayer(this._terminal.screenElement, 3, this.colorManager.colors)\\n    ];\\n    this.dimensions = {\\n      scaledCharWidth: null,\\n      scaledCharHeight: null,\\n      scaledCellWidth: null,\\n      scaledCellHeight: null,\\n      scaledCharLeft: null,\\n      scaledCharTop: null,\\n      scaledCanvasWidth: null,\\n      scaledCanvasHeight: null,\\n      canvasWidth: null,\\n      canvasHeight: null,\\n      actualCellWidth: null,\\n      actualCellHeight: null\\n    };\\n    this._devicePixelRatio = window.devicePixelRatio;\\n    this._updateDimensions();\\n    this.onOptionsChanged();\\n\\n    this._renderDebouncer = new RenderDebouncer(this._terminal, this._renderRows.bind(this));\\n    this._screenDprMonitor = new ScreenDprMonitor();\\n    this._screenDprMonitor.setListener(() => this.onWindowResize(window.devicePixelRatio));\\n\\n    // Detect whether IntersectionObserver is detected and enable renderer pause\\n    // and resume based on terminal visibility if so\\n    if ('IntersectionObserver' in window) {\\n      const observer = new IntersectionObserver(e => this.onIntersectionChange(e[0]), {threshold: 0});\\n      observer.observe(this._terminal.element);\\n    }\\n  }\\n\\n  public onIntersectionChange(entry: IntersectionObserverEntry): void {\\n    this._isPaused = entry.intersectionRatio === 0;\\n    if (!this._isPaused && this._needsFullRefresh) {\\n      this._terminal.refresh(0, this._terminal.rows - 1);\\n    }\\n  }\\n\\n  public onWindowResize(devicePixelRatio: number): void {\\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\\n    // and the terminal needs to refreshed\\n    if (this._devicePixelRatio !== devicePixelRatio) {\\n      this._devicePixelRatio = devicePixelRatio;\\n      this.onResize(this._terminal.cols, this._terminal.rows);\\n    }\\n  }\\n\\n  public setTheme(theme: ITheme): IColorSet {\\n    this.colorManager.setTheme(theme);\\n\\n    // Clear layers and force a full render\\n    this._renderLayers.forEach(l => {\\n      l.onThemeChanged(this._terminal, this.colorManager.colors);\\n      l.reset(this._terminal);\\n    });\\n\\n    if (this._isPaused) {\\n      this._needsFullRefresh = true;\\n    } else {\\n      this._terminal.refresh(0, this._terminal.rows - 1);\\n    }\\n\\n    return this.colorManager.colors;\\n  }\\n\\n  public onResize(cols: number, rows: number): void {\\n    // Update character and canvas dimensions\\n    this._updateDimensions();\\n\\n    // Resize all render layers\\n    this._renderLayers.forEach(l => l.resize(this._terminal, this.dimensions));\\n\\n    // Force a refresh\\n    if (this._isPaused) {\\n      this._needsFullRefresh = true;\\n    } else {\\n      this._terminal.refresh(0, this._terminal.rows - 1);\\n    }\\n\\n    // Resize the screen\\n    this._terminal.screenElement.style.width = `${this.dimensions.canvasWidth}px`;\\n    this._terminal.screenElement.style.height = `${this.dimensions.canvasHeight}px`;\\n\\n    this.emit('resize', {\\n      width: this.dimensions.canvasWidth,\\n      height: this.dimensions.canvasHeight\\n    });\\n  }\\n\\n  public onCharSizeChanged(): void {\\n    this.onResize(this._terminal.cols, this._terminal.rows);\\n  }\\n\\n  public onBlur(): void {\\n    this._runOperation(l => l.onBlur(this._terminal));\\n  }\\n\\n  public onFocus(): void {\\n    this._runOperation(l => l.onFocus(this._terminal));\\n  }\\n\\n  public onSelectionChanged(start: [number, number], end: [number, number]): void {\\n    this._runOperation(l => l.onSelectionChanged(this._terminal, start, end));\\n  }\\n\\n  public onCursorMove(): void {\\n    this._runOperation(l => l.onCursorMove(this._terminal));\\n  }\\n\\n  public onOptionsChanged(): void {\\n    this._runOperation(l => l.onOptionsChanged(this._terminal));\\n  }\\n\\n  public clear(): void {\\n    this._runOperation(l => l.reset(this._terminal));\\n  }\\n\\n  private _runOperation(operation: (layer: IRenderLayer) => void): void {\\n    if (this._isPaused) {\\n      this._needsFullRefresh = true;\\n    } else {\\n      this._renderLayers.forEach(l => operation(l));\\n    }\\n  }\\n\\n  /**\\n   * Queues a refresh between two rows (inclusive), to be done on next animation\\n   * frame.\\n   * @param {number} start The start row.\\n   * @param {number} end The end row.\\n   */\\n  public refreshRows(start: number, end: number): void {\\n    if (this._isPaused) {\\n      this._needsFullRefresh = true;\\n      return;\\n    }\\n    this._renderDebouncer.refresh(start, end);\\n  }\\n\\n  /**\\n   * Performs the refresh loop callback, calling refresh only if a refresh is\\n   * necessary before queueing up the next one.\\n   */\\n  private _renderRows(start: number, end: number): void {\\n    this._renderLayers.forEach(l => l.onGridChanged(this._terminal, start, end));\\n    this._terminal.emit('refresh', {start, end});\\n  }\\n\\n  /**\\n   * Recalculates the character and canvas dimensions.\\n   */\\n  private _updateDimensions(): void {\\n    // Perform a new measure if the CharMeasure dimensions are not yet available\\n    if (!this._terminal.charMeasure.width || !this._terminal.charMeasure.height) {\\n      return;\\n    }\\n\\n    // Calculate the scaled character width. Width is floored as it must be\\n    // drawn to an integer grid in order for the CharAtlas \\\"stamps\\\" to not be\\n    // blurry. When text is drawn to the grid not using the CharAtlas, it is\\n    // clipped to ensure there is no overlap with the next cell.\\n    this.dimensions.scaledCharWidth = Math.floor(this._terminal.charMeasure.width * window.devicePixelRatio);\\n\\n    // Calculate the scaled character height. Height is ceiled in case\\n    // devicePixelRatio is a floating point number in order to ensure there is\\n    // enough space to draw the character to the cell.\\n    this.dimensions.scaledCharHeight = Math.ceil(this._terminal.charMeasure.height * window.devicePixelRatio);\\n\\n    // Calculate the scaled cell height, if lineHeight is not 1 then the value\\n    // will be floored because since lineHeight can never be lower then 1, there\\n    // is a guarentee that the scaled line height will always be larger than\\n    // scaled char height.\\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._terminal.options.lineHeight);\\n\\n    // Calculate the y coordinate within a cell that text should draw from in\\n    // order to draw in the center of a cell.\\n    this.dimensions.scaledCharTop = this._terminal.options.lineHeight === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\\n\\n    // Calculate the scaled cell width, taking the letterSpacing into account.\\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._terminal.options.letterSpacing);\\n\\n    // Calculate the x coordinate with a cell that text should draw from in\\n    // order to draw in the center of a cell.\\n    this.dimensions.scaledCharLeft = Math.floor(this._terminal.options.letterSpacing / 2);\\n\\n    // Recalculate the canvas dimensions; scaled* define the actual number of\\n    // pixel in the canvas\\n    this.dimensions.scaledCanvasHeight = this._terminal.rows * this.dimensions.scaledCellHeight;\\n    this.dimensions.scaledCanvasWidth = this._terminal.cols * this.dimensions.scaledCellWidth;\\n\\n    // The the size of the canvas on the page. It's very important that this\\n    // rounds to nearest integer and not ceils as browsers often set\\n    // window.devicePixelRatio as something like 1.100000023841858, when it's\\n    // actually 1.1. Ceiling causes blurriness as the backing canvas image is 1\\n    // pixel too large for the canvas element size.\\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio);\\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio);\\n\\n    // Get the _actual_ dimensions of an individual cell. This needs to be\\n    // derived from the canvasWidth/Height calculated above which takes into\\n    // account window.devicePixelRatio. CharMeasure.width/height by itself is\\n    // insufficient when the page is not at 100% zoom level as CharMeasure is\\n    // measured in CSS pixels, but the actual char size on the canvas can\\n    // differ.\\n    this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._terminal.rows;\\n    this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._terminal.cols;\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { ILinkHoverEvent, ITerminal, ILinkifierAccessor, LinkHoverEventTypes } from '../Types';\\nimport { IColorSet, IRenderDimensions } from './Types';\\nimport { BaseRenderLayer } from './BaseRenderLayer';\\n\\nexport class LinkRenderLayer extends BaseRenderLayer {\\n  private _state: ILinkHoverEvent = null;\\n\\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet, terminal: ILinkifierAccessor) {\\n    super(container, 'link', zIndex, true, colors);\\n    terminal.linkifier.on(LinkHoverEventTypes.HOVER, (e: ILinkHoverEvent) => this._onLinkHover(e));\\n    terminal.linkifier.on(LinkHoverEventTypes.LEAVE, (e: ILinkHoverEvent) => this._onLinkLeave(e));\\n  }\\n\\n  public resize(terminal: ITerminal, dim: IRenderDimensions): void {\\n    super.resize(terminal, dim);\\n    // Resizing the canvas discards the contents of the canvas so clear state\\n    this._state = null;\\n  }\\n\\n  public reset(terminal: ITerminal): void {\\n    this._clearCurrentLink();\\n  }\\n\\n  private _clearCurrentLink(): void {\\n    if (this._state) {\\n      this.clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\\n      if (middleRowCount > 0) {\\n        this.clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\\n      }\\n      this.clearCells(0, this._state.y2, this._state.x2, 1);\\n      this._state = null;\\n    }\\n  }\\n\\n  private _onLinkHover(e: ILinkHoverEvent): void {\\n    this._ctx.fillStyle = this._colors.foreground.css;\\n    if (e.y1 === e.y2) {\\n      // Single line link\\n      this.fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\\n    } else {\\n      // Multi-line link\\n      this.fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\\n      for (let y = e.y1 + 1; y < e.y2; y++) {\\n        this.fillBottomLineAtCells(0, y, e.cols);\\n      }\\n      this.fillBottomLineAtCells(0, e.y2, e.x2);\\n    }\\n    this._state = e;\\n  }\\n\\n  private _onLinkLeave(e: ILinkHoverEvent): void {\\n    this._clearCurrentLink();\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nexport class GridCache<T> {\\n  public cache: T[][];\\n\\n  public constructor() {\\n    this.cache = [];\\n  }\\n\\n  public resize(width: number, height: number): void {\\n    for (let x = 0; x < width; x++) {\\n      if (this.cache.length <= x) {\\n        this.cache.push([]);\\n      }\\n      for (let y = this.cache[x].length; y < height; y++) {\\n        this.cache[x].push(null);\\n      }\\n      this.cache[x].length = height;\\n    }\\n    this.cache.length = width;\\n  }\\n\\n  public clear(): void {\\n    for (let x = 0; x < this.cache.length; x++) {\\n      for (let y = 0; y < this.cache[x].length; y++) {\\n        this.cache[x][y] = null;\\n      }\\n    }\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { CHAR_DATA_WIDTH_INDEX } from '../Buffer';\\nimport { IColorSet, IRenderDimensions } from './Types';\\nimport { BaseRenderLayer } from './BaseRenderLayer';\\nimport { CharData, ITerminal } from '../Types';\\n\\ninterface ICursorState {\\n  x: number;\\n  y: number;\\n  isFocused: boolean;\\n  style: string;\\n  width: number;\\n}\\n\\n/**\\n * The time between cursor blinks.\\n */\\nconst BLINK_INTERVAL = 600;\\n\\nexport class CursorRenderLayer extends BaseRenderLayer {\\n  private _state: ICursorState;\\n  private _cursorRenderers: {[key: string]: (terminal: ITerminal, x: number, y: number, charData: CharData) => void};\\n  private _cursorBlinkStateManager: CursorBlinkStateManager;\\n\\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet) {\\n    super(container, 'cursor', zIndex, true, colors);\\n    this._state = {\\n      x: null,\\n      y: null,\\n      isFocused: null,\\n      style: null,\\n      width: null\\n    };\\n    this._cursorRenderers = {\\n      'bar': this._renderBarCursor.bind(this),\\n      'block': this._renderBlockCursor.bind(this),\\n      'underline': this._renderUnderlineCursor.bind(this)\\n    };\\n    // TODO: Consider initial options? Maybe onOptionsChanged should be called at the end of open?\\n  }\\n\\n  public resize(terminal: ITerminal, dim: IRenderDimensions): void {\\n    super.resize(terminal, dim);\\n    // Resizing the canvas discards the contents of the canvas so clear state\\n    this._state = {\\n      x: null,\\n      y: null,\\n      isFocused: null,\\n      style: null,\\n      width: null\\n    };\\n  }\\n\\n  public reset(terminal: ITerminal): void {\\n    this._clearCursor();\\n    if (this._cursorBlinkStateManager) {\\n      this._cursorBlinkStateManager.dispose();\\n      this._cursorBlinkStateManager = null;\\n      this.onOptionsChanged(terminal);\\n    }\\n  }\\n\\n  public onBlur(terminal: ITerminal): void {\\n    if (this._cursorBlinkStateManager) {\\n      this._cursorBlinkStateManager.pause();\\n    }\\n    terminal.refresh(terminal.buffer.y, terminal.buffer.y);\\n  }\\n\\n  public onFocus(terminal: ITerminal): void {\\n    if (this._cursorBlinkStateManager) {\\n      this._cursorBlinkStateManager.resume(terminal);\\n    } else {\\n      terminal.refresh(terminal.buffer.y, terminal.buffer.y);\\n    }\\n  }\\n\\n  public onOptionsChanged(terminal: ITerminal): void {\\n    if (terminal.options.cursorBlink) {\\n      if (!this._cursorBlinkStateManager) {\\n        this._cursorBlinkStateManager = new CursorBlinkStateManager(terminal, () => {\\n          this._render(terminal, true);\\n        });\\n      }\\n    } else {\\n      if (this._cursorBlinkStateManager) {\\n        this._cursorBlinkStateManager.dispose();\\n        this._cursorBlinkStateManager = null;\\n      }\\n      // Request a refresh from the terminal as management of rendering is being\\n      // moved back to the terminal\\n      terminal.refresh(terminal.buffer.y, terminal.buffer.y);\\n    }\\n  }\\n\\n  public onCursorMove(terminal: ITerminal): void {\\n    if (this._cursorBlinkStateManager) {\\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\\n    }\\n  }\\n\\n  public onGridChanged(terminal: ITerminal, startRow: number, endRow: number): void {\\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\\n      this._render(terminal, false);\\n    } else {\\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\\n    }\\n  }\\n\\n  private _render(terminal: ITerminal, triggeredByAnimationFrame: boolean): void {\\n    // Don't draw the cursor if it's hidden\\n    if (!terminal.cursorState || terminal.cursorHidden) {\\n      this._clearCursor();\\n      return;\\n    }\\n\\n    const cursorY = terminal.buffer.ybase + terminal.buffer.y;\\n    const viewportRelativeCursorY = cursorY - terminal.buffer.ydisp;\\n\\n    // Don't draw the cursor if it's off-screen\\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= terminal.rows) {\\n      this._clearCursor();\\n      return;\\n    }\\n\\n    const charData = terminal.buffer.lines.get(cursorY)[terminal.buffer.x];\\n    if (!charData) {\\n      return;\\n    }\\n\\n    if (!terminal.isFocused) {\\n      this._clearCursor();\\n      this._ctx.save();\\n      this._ctx.fillStyle = this._colors.cursor.css;\\n      this._renderBlurCursor(terminal, terminal.buffer.x, viewportRelativeCursorY, charData);\\n      this._ctx.restore();\\n      this._state.x = terminal.buffer.x;\\n      this._state.y = viewportRelativeCursorY;\\n      this._state.isFocused = false;\\n      this._state.style = terminal.options.cursorStyle;\\n      this._state.width = charData[CHAR_DATA_WIDTH_INDEX];\\n      return;\\n    }\\n\\n    // Don't draw the cursor if it's blinking\\n    if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\\n      this._clearCursor();\\n      return;\\n    }\\n\\n    if (this._state) {\\n      // The cursor is already in the correct spot, don't redraw\\n      if (this._state.x === terminal.buffer.x &&\\n          this._state.y === viewportRelativeCursorY &&\\n          this._state.isFocused === terminal.isFocused &&\\n          this._state.style === terminal.options.cursorStyle &&\\n          this._state.width === charData[CHAR_DATA_WIDTH_INDEX]) {\\n        return;\\n      }\\n      this._clearCursor();\\n    }\\n\\n    this._ctx.save();\\n    this._cursorRenderers[terminal.options.cursorStyle || 'block'](terminal, terminal.buffer.x, viewportRelativeCursorY, charData);\\n    this._ctx.restore();\\n\\n    this._state.x = terminal.buffer.x;\\n    this._state.y = viewportRelativeCursorY;\\n    this._state.isFocused = false;\\n    this._state.style = terminal.options.cursorStyle;\\n    this._state.width = charData[CHAR_DATA_WIDTH_INDEX];\\n  }\\n\\n  private _clearCursor(): void {\\n    if (this._state) {\\n      this.clearCells(this._state.x, this._state.y, this._state.width, 1);\\n      this._state = {\\n        x: null,\\n        y: null,\\n        isFocused: null,\\n        style: null,\\n        width: null\\n      };\\n    }\\n  }\\n\\n  private _renderBarCursor(terminal: ITerminal, x: number, y: number, charData: CharData): void {\\n    this._ctx.save();\\n    this._ctx.fillStyle = this._colors.cursor.css;\\n    this.fillLeftLineAtCell(x, y);\\n    this._ctx.restore();\\n  }\\n\\n  private _renderBlockCursor(terminal: ITerminal, x: number, y: number, charData: CharData): void {\\n    this._ctx.save();\\n    this._ctx.fillStyle = this._colors.cursor.css;\\n    this.fillCells(x, y, charData[CHAR_DATA_WIDTH_INDEX], 1);\\n    this._ctx.fillStyle = this._colors.cursorAccent.css;\\n    this.fillCharTrueColor(terminal, charData, x, y);\\n    this._ctx.restore();\\n  }\\n\\n  private _renderUnderlineCursor(terminal: ITerminal, x: number, y: number, charData: CharData): void {\\n    this._ctx.save();\\n    this._ctx.fillStyle = this._colors.cursor.css;\\n    this.fillBottomLineAtCells(x, y);\\n    this._ctx.restore();\\n  }\\n\\n  private _renderBlurCursor(terminal: ITerminal, x: number, y: number, charData: CharData): void {\\n    this._ctx.save();\\n    this._ctx.strokeStyle = this._colors.cursor.css;\\n    this.strokeRectAtCell(x, y, charData[CHAR_DATA_WIDTH_INDEX], 1);\\n    this._ctx.restore();\\n  }\\n}\\n\\nclass CursorBlinkStateManager {\\n  public isCursorVisible: boolean;\\n\\n  private _animationFrame: number;\\n  private _blinkStartTimeout: number;\\n  private _blinkInterval: number;\\n\\n  /**\\n   * The time at which the animation frame was restarted, this is used on the\\n   * next render to restart the timers so they don't need to restart the timers\\n   * multiple times over a short period.\\n   */\\n  private _animationTimeRestarted: number;\\n\\n  constructor(\\n    terminal: ITerminal,\\n    private _renderCallback: () => void\\n  ) {\\n    this.isCursorVisible = true;\\n    if (terminal.isFocused) {\\n      this._restartInterval();\\n    }\\n  }\\n\\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\\n\\n  public dispose(): void {\\n    if (this._blinkInterval) {\\n      window.clearInterval(this._blinkInterval);\\n      this._blinkInterval = null;\\n    }\\n    if (this._blinkStartTimeout) {\\n      window.clearTimeout(this._blinkStartTimeout);\\n      this._blinkStartTimeout = null;\\n    }\\n    if (this._animationFrame) {\\n      window.cancelAnimationFrame(this._animationFrame);\\n      this._animationFrame = null;\\n    }\\n  }\\n\\n  public restartBlinkAnimation(terminal: ITerminal): void {\\n    if (this.isPaused) {\\n      return;\\n    }\\n    // Save a timestamp so that the restart can be done on the next interval\\n    this._animationTimeRestarted = Date.now();\\n    // Force a cursor render to ensure it's visible and in the correct position\\n    this.isCursorVisible = true;\\n    if (!this._animationFrame) {\\n      this._animationFrame = window.requestAnimationFrame(() => {\\n        this._renderCallback();\\n        this._animationFrame = null;\\n      });\\n    }\\n  }\\n\\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\\n    // Clear any existing interval\\n    if (this._blinkInterval) {\\n      window.clearInterval(this._blinkInterval);\\n    }\\n\\n    // Setup the initial timeout which will hide the cursor, this is done before\\n    // the regular interval is setup in order to support restarting the blink\\n    // animation in a lightweight way (without thrashing clearInterval and\\n    // setInterval).\\n    this._blinkStartTimeout = <number><any>setTimeout(() => {\\n      // Check if another animation restart was requested while this was being\\n      // started\\n      if (this._animationTimeRestarted) {\\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\\n        this._animationTimeRestarted = null;\\n        if (time > 0) {\\n          this._restartInterval(time);\\n          return;\\n        }\\n      }\\n\\n      // Hide the cursor\\n      this.isCursorVisible = false;\\n      this._animationFrame = window.requestAnimationFrame(() => {\\n        this._renderCallback();\\n        this._animationFrame = null;\\n      });\\n\\n      // Setup the blink interval\\n      this._blinkInterval = <number><any>setInterval(() => {\\n        // Adjust the animation time if it was restarted\\n        if (this._animationTimeRestarted) {\\n          // calc time diff\\n          // Make restart interval do a setTimeout initially?\\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\\n          this._animationTimeRestarted = null;\\n          this._restartInterval(time);\\n          return;\\n        }\\n\\n        // Invert visibility and render\\n        this.isCursorVisible = !this.isCursorVisible;\\n        this._animationFrame = window.requestAnimationFrame(() => {\\n          this._renderCallback();\\n          this._animationFrame = null;\\n        });\\n      }, BLINK_INTERVAL);\\n    }, timeToStart);\\n  }\\n\\n  public pause(): void {\\n    this.isCursorVisible = true;\\n    if (this._blinkInterval) {\\n      window.clearInterval(this._blinkInterval);\\n      this._blinkInterval = null;\\n    }\\n    if (this._blinkStartTimeout) {\\n      window.clearTimeout(this._blinkStartTimeout);\\n      this._blinkStartTimeout = null;\\n    }\\n    if (this._animationFrame) {\\n      window.cancelAnimationFrame(this._animationFrame);\\n      this._animationFrame = null;\\n    }\\n  }\\n\\n  public resume(terminal: ITerminal): void {\\n    this._animationTimeRestarted = null;\\n    this._restartInterval();\\n    this.restartBlinkAnimation(terminal);\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { IColorManager } from './Types';\\nimport { IColor, IColorSet } from '../shared/Types';\\nimport { ITheme } from 'xterm';\\n\\nconst DEFAULT_FOREGROUND = fromHex('#ffffff');\\nconst DEFAULT_BACKGROUND = fromHex('#000000');\\nconst DEFAULT_CURSOR = fromHex('#ffffff');\\nconst DEFAULT_CURSOR_ACCENT = fromHex('#000000');\\nconst DEFAULT_SELECTION = {\\n  css: 'rgba(255, 255, 255, 0.3)',\\n  rgba: 0xFFFFFF77\\n};\\n\\n// An IIFE to generate DEFAULT_ANSI_COLORS. Do not mutate DEFAULT_ANSI_COLORS, instead make a copy\\n// and mutate that.\\nexport const DEFAULT_ANSI_COLORS = (() => {\\n  const colors = [\\n    // dark:\\n    fromHex('#2e3436'),\\n    fromHex('#cc0000'),\\n    fromHex('#4e9a06'),\\n    fromHex('#c4a000'),\\n    fromHex('#3465a4'),\\n    fromHex('#75507b'),\\n    fromHex('#06989a'),\\n    fromHex('#d3d7cf'),\\n    // bright:\\n    fromHex('#555753'),\\n    fromHex('#ef2929'),\\n    fromHex('#8ae234'),\\n    fromHex('#fce94f'),\\n    fromHex('#729fcf'),\\n    fromHex('#ad7fa8'),\\n    fromHex('#34e2e2'),\\n    fromHex('#eeeeec')\\n  ];\\n\\n  // Fill in the remaining 240 ANSI colors.\\n  // Generate colors (16-231)\\n  let v = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];\\n  for (let i = 0; i < 216; i++) {\\n    const r = v[(i / 36) % 6 | 0];\\n    const g = v[(i / 6) % 6 | 0];\\n    const b = v[i % 6];\\n    colors.push({\\n      css: `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`,\\n      // Use >>> 0 to force a conversion to an unsigned int\\n      rgba: ((r << 24) | (g << 16) | (b << 8) | 0xFF) >>> 0\\n    });\\n  }\\n\\n  // Generate greys (232-255)\\n  for (let i = 0; i < 24; i++) {\\n    const c = 8 + i * 10;\\n    const ch = toPaddedHex(c);\\n    colors.push({\\n      css: `#${ch}${ch}${ch}`,\\n      rgba: ((c << 24) | (c << 16) | (c << 8) | 0xFF) >>> 0\\n    });\\n  }\\n\\n  return colors;\\n})();\\n\\nfunction fromHex(css: string): IColor {\\n  return {\\n    css,\\n    rgba: parseInt(css.slice(1), 16) << 8 | 0xFF\\n  };\\n}\\n\\nfunction toPaddedHex(c: number): string {\\n  let s = c.toString(16);\\n  return s.length < 2 ? '0' + s : s;\\n}\\n\\n/**\\n * Manages the source of truth for a terminal's colors.\\n */\\nexport class ColorManager implements IColorManager {\\n  public colors: IColorSet;\\n  private _ctx: CanvasRenderingContext2D;\\n  private _litmusColor: CanvasGradient;\\n\\n  constructor(document: Document, public allowTransparency: boolean) {\\n    const canvas = document.createElement('canvas');\\n    canvas.width = 1;\\n    canvas.height = 1;\\n    this._ctx = canvas.getContext('2d');\\n    this._ctx.globalCompositeOperation = 'copy';\\n    this._litmusColor = this._ctx.createLinearGradient(0, 0, 1, 1);\\n    this.colors = {\\n      foreground: DEFAULT_FOREGROUND,\\n      background: DEFAULT_BACKGROUND,\\n      cursor: DEFAULT_CURSOR,\\n      cursorAccent: DEFAULT_CURSOR_ACCENT,\\n      selection: DEFAULT_SELECTION,\\n      ansi: DEFAULT_ANSI_COLORS.slice()\\n    };\\n  }\\n\\n  /**\\n   * Sets the terminal's theme.\\n   * @param theme The  theme to use. If a partial theme is provided then default\\n   * colors will be used where colors are not defined.\\n   */\\n  public setTheme(theme: ITheme): void {\\n    this.colors.foreground = this._parseColor(theme.foreground, DEFAULT_FOREGROUND);\\n    this.colors.background = this._parseColor(theme.background, DEFAULT_BACKGROUND);\\n    this.colors.cursor = this._parseColor(theme.cursor, DEFAULT_CURSOR, true);\\n    this.colors.cursorAccent = this._parseColor(theme.cursorAccent, DEFAULT_CURSOR_ACCENT, true);\\n    this.colors.selection = this._parseColor(theme.selection, DEFAULT_SELECTION, true);\\n    this.colors.ansi[0] = this._parseColor(theme.black, DEFAULT_ANSI_COLORS[0]);\\n    this.colors.ansi[1] = this._parseColor(theme.red, DEFAULT_ANSI_COLORS[1]);\\n    this.colors.ansi[2] = this._parseColor(theme.green, DEFAULT_ANSI_COLORS[2]);\\n    this.colors.ansi[3] = this._parseColor(theme.yellow, DEFAULT_ANSI_COLORS[3]);\\n    this.colors.ansi[4] = this._parseColor(theme.blue, DEFAULT_ANSI_COLORS[4]);\\n    this.colors.ansi[5] = this._parseColor(theme.magenta, DEFAULT_ANSI_COLORS[5]);\\n    this.colors.ansi[6] = this._parseColor(theme.cyan, DEFAULT_ANSI_COLORS[6]);\\n    this.colors.ansi[7] = this._parseColor(theme.white, DEFAULT_ANSI_COLORS[7]);\\n    this.colors.ansi[8] = this._parseColor(theme.brightBlack, DEFAULT_ANSI_COLORS[8]);\\n    this.colors.ansi[9] = this._parseColor(theme.brightRed, DEFAULT_ANSI_COLORS[9]);\\n    this.colors.ansi[10] = this._parseColor(theme.brightGreen, DEFAULT_ANSI_COLORS[10]);\\n    this.colors.ansi[11] = this._parseColor(theme.brightYellow, DEFAULT_ANSI_COLORS[11]);\\n    this.colors.ansi[12] = this._parseColor(theme.brightBlue, DEFAULT_ANSI_COLORS[12]);\\n    this.colors.ansi[13] = this._parseColor(theme.brightMagenta, DEFAULT_ANSI_COLORS[13]);\\n    this.colors.ansi[14] = this._parseColor(theme.brightCyan, DEFAULT_ANSI_COLORS[14]);\\n    this.colors.ansi[15] = this._parseColor(theme.brightWhite, DEFAULT_ANSI_COLORS[15]);\\n  }\\n\\n  private _parseColor(\\n    css: string,\\n    fallback: IColor,\\n    allowTransparency: boolean = this.allowTransparency\\n  ): IColor {\\n    if (!css) {\\n      return fallback;\\n    }\\n\\n    // If parsing the value results in failure, then it must be ignored, and the attribute must\\n    // retain its previous value.\\n    // -- https://html.spec.whatwg.org/multipage/canvas.html#fill-and-stroke-styles\\n    this._ctx.fillStyle = this._litmusColor;\\n    this._ctx.fillStyle = css;\\n    if (typeof this._ctx.fillStyle !== 'string') {\\n      console.warn(`Color: ${css} is invalid using fallback ${fallback.css}`);\\n      return fallback;\\n    }\\n\\n    this._ctx.fillRect(0, 0, 1, 1);\\n    const data = this._ctx.getImageData(0, 0, 1, 1).data;\\n\\n    if (!allowTransparency && data[3] !== 0xFF) {\\n      // Ideally we'd just ignore the alpha channel, but...\\n      //\\n      // Browsers may not give back exactly the same RGB values we put in, because most/all\\n      // convert the color to a pre-multiplied representation. getImageData converts that back to\\n      // a un-premultipled representation, but the precision loss may make the RGB channels unuable\\n      // on their own.\\n      //\\n      // E.g. In Chrome #12345610 turns into #10305010, and in the extreme case, 0xFFFFFF00 turns\\n      // into 0x00000000.\\n      //\\n      // \\\"Note: Due to the lossy nature of converting to and from premultiplied alpha color values,\\n      // pixels that have just been set using putImageData() might be returned to an equivalent\\n      // getImageData() as different values.\\\"\\n      // -- https://html.spec.whatwg.org/multipage/canvas.html#pixel-manipulation\\n      //\\n      // So let's just use the fallback color in this case instead.\\n      console.warn(\\n        `Color: ${css} is using transparency, but allowTransparency is false. ` +\\n        `Using fallback ${fallback.css}.`\\n      );\\n      return fallback;\\n    }\\n\\n    return {\\n      css,\\n      rgba: (data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3]) >>> 0\\n    };\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { IRenderLayer, IColorSet, IRenderDimensions } from './Types';\\nimport { CharData, ITerminal } from '../Types';\\nimport { DIM_OPACITY, INVERTED_DEFAULT_COLOR } from './atlas/Types';\\nimport { CHAR_ATLAS_CELL_SPACING } from '../shared/atlas/Types';\\nimport { acquireCharAtlas } from './atlas/CharAtlas';\\nimport { CHAR_DATA_CHAR_INDEX } from '../Buffer';\\n\\nexport abstract class BaseRenderLayer implements IRenderLayer {\\n  private _canvas: HTMLCanvasElement;\\n  protected _ctx: CanvasRenderingContext2D;\\n  private _scaledCharWidth: number = 0;\\n  private _scaledCharHeight: number = 0;\\n  private _scaledCellWidth: number = 0;\\n  private _scaledCellHeight: number = 0;\\n  private _scaledCharLeft: number = 0;\\n  private _scaledCharTop: number = 0;\\n\\n  private _charAtlas: HTMLCanvasElement | ImageBitmap;\\n\\n  constructor(\\n    private _container: HTMLElement,\\n    id: string,\\n    zIndex: number,\\n    private _alpha: boolean,\\n    protected _colors: IColorSet\\n  ) {\\n    this._canvas = document.createElement('canvas');\\n    this._canvas.classList.add(`xterm-${id}-layer`);\\n    this._canvas.style.zIndex = zIndex.toString();\\n    this._initCanvas();\\n    this._container.appendChild(this._canvas);\\n  }\\n\\n  private _initCanvas(): void {\\n    this._ctx = this._canvas.getContext('2d', {alpha: this._alpha});\\n    // Draw the background if this is an opaque layer\\n    if (!this._alpha) {\\n      this.clearAll();\\n    }\\n  }\\n\\n  public onOptionsChanged(terminal: ITerminal): void {}\\n  public onBlur(terminal: ITerminal): void {}\\n  public onFocus(terminal: ITerminal): void {}\\n  public onCursorMove(terminal: ITerminal): void {}\\n  public onGridChanged(terminal: ITerminal, startRow: number, endRow: number): void {}\\n  public onSelectionChanged(terminal: ITerminal, start: [number, number], end: [number, number]): void {}\\n\\n  public onThemeChanged(terminal: ITerminal, colorSet: IColorSet): void {\\n    this._refreshCharAtlas(terminal, colorSet);\\n  }\\n\\n  protected setTransparency(terminal: ITerminal, alpha: boolean): void {\\n    // Do nothing when alpha doesn't change\\n    if (alpha === this._alpha) {\\n      return;\\n    }\\n\\n    // Create new canvas and replace old one\\n    const oldCanvas = this._canvas;\\n    this._alpha = alpha;\\n    // Cloning preserves properties\\n    this._canvas = <HTMLCanvasElement>this._canvas.cloneNode();\\n    this._initCanvas();\\n    this._container.replaceChild(this._canvas, oldCanvas);\\n\\n    // Regenerate char atlas and force a full redraw\\n    this._refreshCharAtlas(terminal, this._colors);\\n    this.onGridChanged(terminal, 0, terminal.rows - 1);\\n  }\\n\\n  /**\\n   * Refreshes the char atlas, aquiring a new one if necessary.\\n   * @param terminal The terminal.\\n   * @param colorSet The color set to use for the char atlas.\\n   */\\n  private _refreshCharAtlas(terminal: ITerminal, colorSet: IColorSet): void {\\n    if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\\n      return;\\n    }\\n    this._charAtlas = null;\\n    const result = acquireCharAtlas(terminal, colorSet, this._scaledCharWidth, this._scaledCharHeight);\\n    if (result instanceof HTMLCanvasElement) {\\n      this._charAtlas = result;\\n    } else {\\n      result.then(bitmap => this._charAtlas = bitmap);\\n    }\\n  }\\n\\n  public resize(terminal: ITerminal, dim: IRenderDimensions): void {\\n    this._scaledCellWidth = dim.scaledCellWidth;\\n    this._scaledCellHeight = dim.scaledCellHeight;\\n    this._scaledCharWidth = dim.scaledCharWidth;\\n    this._scaledCharHeight = dim.scaledCharHeight;\\n    this._scaledCharLeft = dim.scaledCharLeft;\\n    this._scaledCharTop = dim.scaledCharTop;\\n    this._canvas.width = dim.scaledCanvasWidth;\\n    this._canvas.height = dim.scaledCanvasHeight;\\n    this._canvas.style.width = `${dim.canvasWidth}px`;\\n    this._canvas.style.height = `${dim.canvasHeight}px`;\\n\\n    // Draw the background if this is an opaque layer\\n    if (!this._alpha) {\\n      this.clearAll();\\n    }\\n\\n    this._refreshCharAtlas(terminal, this._colors);\\n  }\\n\\n  public abstract reset(terminal: ITerminal): void;\\n\\n  /**\\n   * Fills 1+ cells completely. This uses the existing fillStyle on the context.\\n   * @param x The column to start at.\\n   * @param y The row to start at\\n   * @param width The number of columns to fill.\\n   * @param height The number of rows to fill.\\n   */\\n  protected fillCells(x: number, y: number, width: number, height: number): void {\\n    this._ctx.fillRect(\\n        x * this._scaledCellWidth,\\n        y * this._scaledCellHeight,\\n        width * this._scaledCellWidth,\\n        height * this._scaledCellHeight);\\n  }\\n\\n  /**\\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\\n   * existing fillStyle on the context.\\n   * @param x The column to fill.\\n   * @param y The row to fill.\\n   */\\n  protected fillBottomLineAtCells(x: number, y: number, width: number = 1): void {\\n    this._ctx.fillRect(\\n        x * this._scaledCellWidth,\\n        (y + 1) * this._scaledCellHeight - window.devicePixelRatio - 1 /* Ensure it's drawn within the cell */,\\n        width * this._scaledCellWidth,\\n        window.devicePixelRatio);\\n  }\\n\\n  /**\\n   * Fills a 1px line (2px on HDPI) at the left of the cell. This uses the\\n   * existing fillStyle on the context.\\n   * @param x The column to fill.\\n   * @param y The row to fill.\\n   */\\n  protected fillLeftLineAtCell(x: number, y: number): void {\\n    this._ctx.fillRect(\\n        x * this._scaledCellWidth,\\n        y * this._scaledCellHeight,\\n        window.devicePixelRatio,\\n        this._scaledCellHeight);\\n  }\\n\\n  /**\\n   * Strokes a 1px rectangle (2px on HDPI) around a cell. This uses the existing\\n   * strokeStyle on the context.\\n   * @param x The column to fill.\\n   * @param y The row to fill.\\n   */\\n  protected strokeRectAtCell(x: number, y: number, width: number, height: number): void {\\n    this._ctx.lineWidth = window.devicePixelRatio;\\n    this._ctx.strokeRect(\\n        x * this._scaledCellWidth + window.devicePixelRatio / 2,\\n        y * this._scaledCellHeight + (window.devicePixelRatio / 2),\\n        width * this._scaledCellWidth - window.devicePixelRatio,\\n        (height * this._scaledCellHeight) - window.devicePixelRatio);\\n  }\\n\\n  /**\\n   * Clears the entire canvas.\\n   */\\n  protected clearAll(): void {\\n    if (this._alpha) {\\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\\n    } else {\\n      this._ctx.fillStyle = this._colors.background.css;\\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\\n    }\\n  }\\n\\n  /**\\n   * Clears 1+ cells completely.\\n   * @param x The column to start at.\\n   * @param y The row to start at.\\n   * @param width The number of columns to clear.\\n   * @param height The number of rows to clear.\\n   */\\n  protected clearCells(x: number, y: number, width: number, height: number): void {\\n    if (this._alpha) {\\n      this._ctx.clearRect(\\n          x * this._scaledCellWidth,\\n          y * this._scaledCellHeight,\\n          width * this._scaledCellWidth,\\n          height * this._scaledCellHeight);\\n    } else {\\n      this._ctx.fillStyle = this._colors.background.css;\\n      this._ctx.fillRect(\\n          x * this._scaledCellWidth,\\n          y * this._scaledCellHeight,\\n          width * this._scaledCellWidth,\\n          height * this._scaledCellHeight);\\n    }\\n  }\\n\\n  /**\\n   * Draws a truecolor character at the cell. The character will be clipped to\\n   * ensure that it fits with the cell, including the cell to the right if it's\\n   * a wide character. This uses the existing fillStyle on the context.\\n   * @param terminal The terminal.\\n   * @param charData The char data for the character to draw.\\n   * @param x The column to draw at.\\n   * @param y The row to draw at.\\n   * @param color The color of the character.\\n   */\\n  protected fillCharTrueColor(terminal: ITerminal, charData: CharData, x: number, y: number): void {\\n    this._ctx.font = this._getFont(terminal, false);\\n    this._ctx.textBaseline = 'top';\\n    this._clipRow(terminal, y);\\n    this._ctx.fillText(\\n        charData[CHAR_DATA_CHAR_INDEX],\\n        x * this._scaledCellWidth + this._scaledCharLeft,\\n        y * this._scaledCellHeight + this._scaledCharTop);\\n  }\\n\\n  /**\\n   * Draws a character at a cell. If possible this will draw using the character\\n   * atlas to reduce draw time.\\n   * @param terminal The terminal.\\n   * @param char The character.\\n   * @param code The character code.\\n   * @param width The width of the character.\\n   * @param x The column to draw at.\\n   * @param y The row to draw at.\\n   * @param fg The foreground color, in the format stored within the attributes.\\n   * @param bg The background color, in the format stored within the attributes.\\n   * This is used to validate whether a cached image can be used.\\n   * @param bold Whether the text is bold.\\n   */\\n  protected drawChar(terminal: ITerminal, char: string, code: number, width: number, x: number, y: number, fg: number, bg: number, bold: boolean, dim: boolean): void {\\n    let colorIndex = 0;\\n    if (fg < 256) {\\n      colorIndex = fg + 2;\\n    } else {\\n      // If default color and bold\\n      if (bold && terminal.options.enableBold) {\\n        colorIndex = 1;\\n      }\\n    }\\n    const isAscii = code < 256;\\n    // A color is basic if it is one of the standard normal or bold weight\\n    // colors of the characters held in the char atlas. Note that this excludes\\n    // the normal weight _light_ color characters.\\n    const isBasicColor = (colorIndex > 1 && fg < 16) && (fg < 8 || bold);\\n    const isDefaultColor = fg >= 256;\\n    const isDefaultBackground = bg >= 256;\\n    if (this._charAtlas && isAscii && (isBasicColor || isDefaultColor) && isDefaultBackground) {\\n      // ImageBitmap's draw about twice as fast as from a canvas\\n      const charAtlasCellWidth = this._scaledCharWidth + CHAR_ATLAS_CELL_SPACING;\\n      const charAtlasCellHeight = this._scaledCharHeight + CHAR_ATLAS_CELL_SPACING;\\n\\n      // Apply alpha to dim the character\\n      if (dim) {\\n        this._ctx.globalAlpha = DIM_OPACITY;\\n      }\\n\\n      // Draw the non-bold version of the same color if bold is not enabled\\n      if (bold && !terminal.options.enableBold) {\\n        // Ignore default color as it's not touched above\\n        if (colorIndex > 1) {\\n          colorIndex -= 8;\\n        }\\n      }\\n\\n      this._ctx.drawImage(this._charAtlas,\\n          code * charAtlasCellWidth,\\n          colorIndex * charAtlasCellHeight,\\n          charAtlasCellWidth,\\n          this._scaledCharHeight,\\n          x * this._scaledCellWidth + this._scaledCharLeft,\\n          y * this._scaledCellHeight + this._scaledCharTop,\\n          charAtlasCellWidth,\\n          this._scaledCharHeight);\\n    } else {\\n      this._drawUncachedChar(terminal, char, width, fg, x, y, bold && terminal.options.enableBold, dim);\\n    }\\n    // This draws the atlas (for debugging purposes)\\n    // this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\\n    // this._ctx.drawImage(this._charAtlas, 0, 0);\\n  }\\n\\n  /**\\n   * Draws a character at a cell. The character will be clipped to\\n   * ensure that it fits with the cell, including the cell to the right if it's\\n   * a wide character.\\n   * @param terminal The terminal.\\n   * @param char The character.\\n   * @param width The width of the character.\\n   * @param fg The foreground color, in the format stored within the attributes.\\n   * @param x The column to draw at.\\n   * @param y The row to draw at.\\n   */\\n  private _drawUncachedChar(terminal: ITerminal, char: string, width: number, fg: number, x: number, y: number, bold: boolean, dim: boolean): void {\\n    this._ctx.save();\\n    this._ctx.font = this._getFont(terminal, bold);\\n    this._ctx.textBaseline = 'top';\\n\\n    if (fg === INVERTED_DEFAULT_COLOR) {\\n      this._ctx.fillStyle = this._colors.background.css;\\n    } else if (fg < 256) {\\n      // 256 color support\\n      this._ctx.fillStyle = this._colors.ansi[fg].css;\\n    } else {\\n      this._ctx.fillStyle = this._colors.foreground.css;\\n    }\\n\\n    this._clipRow(terminal, y);\\n\\n    // Apply alpha to dim the character\\n    if (dim) {\\n      this._ctx.globalAlpha = DIM_OPACITY;\\n    }\\n    // Draw the character\\n    this._ctx.fillText(\\n        char,\\n        x * this._scaledCellWidth + this._scaledCharLeft,\\n        y * this._scaledCellHeight + this._scaledCharTop);\\n    this._ctx.restore();\\n  }\\n\\n  /**\\n   * Clips a row to ensure no pixels will be drawn outside the cells in the row.\\n   * @param terminal The terminal.\\n   * @param y The row to clip.\\n   */\\n  private _clipRow(terminal: ITerminal, y: number): void {\\n    this._ctx.beginPath();\\n    this._ctx.rect(\\n        0,\\n        y * this._scaledCellHeight,\\n        terminal.cols * this._scaledCellWidth,\\n        this._scaledCellHeight);\\n    this._ctx.clip();\\n  }\\n\\n  /**\\n   * Gets the current font.\\n   * @param terminal The terminal.\\n   * @param isBold If we should use the bold fontWeight.\\n   */\\n  protected _getFont(terminal: ITerminal, isBold: boolean): string {\\n    const fontWeight = isBold ? terminal.options.fontWeightBold : terminal.options.fontWeight;\\n\\n    return `${fontWeight} ${terminal.options.fontSize * window.devicePixelRatio}px ${terminal.options.fontFamily}`;\\n  }\\n}\\n\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { ITerminal } from '../Types';\\nimport { IMouseZoneManager, IMouseZone } from './Types';\\n\\nconst HOVER_DURATION = 500;\\n\\n/**\\n * The MouseZoneManager allows components to register zones within the terminal\\n * that trigger hover and click callbacks.\\n *\\n * This class was intentionally made not so robust initially as the only case it\\n * needed to support was single-line links which never overlap. Improvements can\\n * be made in the future.\\n */\\nexport class MouseZoneManager implements IMouseZoneManager {\\n  private _zones: IMouseZone[] = [];\\n\\n  private _areZonesActive: boolean = false;\\n  private _mouseMoveListener: (e: MouseEvent) => any;\\n  private _clickListener: (e: MouseEvent) => any;\\n\\n  private _tooltipTimeout: number = null;\\n  private _currentZone: IMouseZone = null;\\n  private _lastHoverCoords: [number, number] = [null, null];\\n\\n  constructor(\\n    private _terminal: ITerminal\\n  ) {\\n    this._terminal.element.addEventListener('mousedown', e => this._onMouseDown(e));\\n\\n    // These events are expensive, only listen to it when mouse zones are active\\n    this._mouseMoveListener = e => this._onMouseMove(e);\\n    this._clickListener = e => this._onClick(e);\\n  }\\n\\n  public add(zone: IMouseZone): void {\\n    this._zones.push(zone);\\n    if (this._zones.length === 1) {\\n      this._activate();\\n    }\\n  }\\n\\n  public clearAll(start?: number, end?: number): void {\\n    // Exit if there's nothing to clear\\n    if (this._zones.length === 0) {\\n      return;\\n    }\\n\\n    // Clear all if start/end weren't set\\n    if (!end) {\\n      start = 0;\\n      end = this._terminal.rows - 1;\\n    }\\n\\n    // Iterate through zones and clear them out if they're within the range\\n    for (let i = 0; i < this._zones.length; i++) {\\n      const zone = this._zones[i];\\n      if ((zone.y1 > start && zone.y1 <= end + 1) ||\\n          (zone.y2 > start && zone.y2 <= end + 1) ||\\n          (zone.y1 < start && zone.y2 > end + 1)) {\\n        if (this._currentZone && this._currentZone === zone) {\\n          this._currentZone.leaveCallback();\\n          this._currentZone = null;\\n        }\\n        this._zones.splice(i--, 1);\\n      }\\n    }\\n\\n    // Deactivate the mouse zone manager if all the zones have been removed\\n    if (this._zones.length === 0) {\\n      this._deactivate();\\n    }\\n  }\\n\\n  private _activate(): void {\\n    if (!this._areZonesActive) {\\n      this._areZonesActive = true;\\n      this._terminal.element.addEventListener('mousemove', this._mouseMoveListener);\\n      this._terminal.element.addEventListener('click', this._clickListener);\\n    }\\n  }\\n\\n  private _deactivate(): void {\\n    if (this._areZonesActive) {\\n      this._areZonesActive = false;\\n      this._terminal.element.removeEventListener('mousemove', this._mouseMoveListener);\\n      this._terminal.element.removeEventListener('click', this._clickListener);\\n    }\\n  }\\n\\n  private _onMouseMove(e: MouseEvent): void {\\n    // TODO: Ideally this would only clear the hover state when the mouse moves\\n    // outside of the mouse zone\\n    if (this._lastHoverCoords[0] !== e.pageX || this._lastHoverCoords[1] !== e.pageY) {\\n      this._onHover(e);\\n      // Record the current coordinates\\n      this._lastHoverCoords = [e.pageX, e.pageY];\\n    }\\n  }\\n\\n  private _onHover(e: MouseEvent): void {\\n    const zone = this._findZoneEventAt(e);\\n\\n    // Do nothing if the zone is the same\\n    if (zone === this._currentZone) {\\n      return;\\n    }\\n\\n    // Fire the hover end callback and cancel any existing timer if a new zone\\n    // is being hovered\\n    if (this._currentZone) {\\n      this._currentZone.leaveCallback();\\n      this._currentZone = null;\\n      if (this._tooltipTimeout) {\\n        clearTimeout(this._tooltipTimeout);\\n      }\\n    }\\n\\n    // Exit if there is not zone\\n    if (!zone) {\\n      return;\\n    }\\n    this._currentZone = zone;\\n\\n    // Trigger the hover callback\\n    if (zone.hoverCallback) {\\n      zone.hoverCallback(e);\\n    }\\n\\n    // Restart the tooltip timeout\\n    this._tooltipTimeout = <number><any>setTimeout(() => this._onTooltip(e), HOVER_DURATION);\\n  }\\n\\n  private _onTooltip(e: MouseEvent): void {\\n    this._tooltipTimeout = null;\\n    const zone = this._findZoneEventAt(e);\\n    if (zone && zone.tooltipCallback) {\\n      zone.tooltipCallback(e);\\n    }\\n  }\\n\\n  private _onMouseDown(e: MouseEvent): void {\\n    // Ignore the event if there are no zones active\\n    if (!this._areZonesActive) {\\n      return;\\n    }\\n\\n    // Find the active zone, prevent event propagation if found to prevent other\\n    // components from handling the mouse event.\\n    const zone = this._findZoneEventAt(e);\\n    if (zone) {\\n      if (zone.willLinkActivate(e)) {\\n        e.preventDefault();\\n        e.stopImmediatePropagation();\\n      }\\n    }\\n  }\\n\\n  private _onClick(e: MouseEvent): void {\\n    // Find the active zone and click it if found\\n    const zone = this._findZoneEventAt(e);\\n    if (zone) {\\n      zone.clickCallback(e);\\n      e.preventDefault();\\n      e.stopImmediatePropagation();\\n    }\\n  }\\n\\n  private _findZoneEventAt(e: MouseEvent): IMouseZone {\\n    const coords = this._terminal.mouseHelper.getCoords(e, this._terminal.screenElement, this._terminal.charMeasure, this._terminal.options.lineHeight, this._terminal.cols, this._terminal.rows);\\n    if (!coords) {\\n      return null;\\n    }\\n    const x = coords[0];\\n    const y = coords[1];\\n    for (let i = 0; i < this._zones.length; i++) {\\n      const zone = this._zones[i];\\n      if (zone.y1 === zone.y2) {\\n        // Single line link\\n        if (y === zone.y1 && x >= zone.x1 && x < zone.x2) {\\n          return zone;\\n        }\\n      } else {\\n        // Multi-line link\\n        if ((y === zone.y1 && x >= zone.x1) ||\\n            (y === zone.y2 && x < zone.x2) ||\\n            (y > zone.y1 && y < zone.y2)) {\\n          return zone;\\n        }\\n      }\\n    }\\n    return null;\\n  }\\n}\\n\\nexport class MouseZone implements IMouseZone {\\n  constructor(\\n    public x1: number,\\n    public y1: number,\\n    public x2: number,\\n    public y2: number,\\n    public clickCallback: (e: MouseEvent) => any,\\n    public hoverCallback: (e: MouseEvent) => any,\\n    public tooltipCallback: (e: MouseEvent) => any,\\n    public leaveCallback: () => void,\\n    public willLinkActivate: (e: MouseEvent) => boolean\\n  ) {\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { ITerminal, ISelectionManager } from '../Types';\\n\\ninterface IWindow extends Window {\\n  clipboardData?: {\\n    getData(format: string): string;\\n    setData(format: string, data: string): void;\\n  };\\n}\\n\\ndeclare var window: IWindow;\\n\\n/**\\n * Prepares text to be pasted into the terminal by normalizing the line endings\\n * @param text The pasted text that needs processing before inserting into the terminal\\n */\\nexport function prepareTextForTerminal(text: string): string {\\n  return text.replace(/\\\\r?\\\\n/g, '\\\\r');\\n}\\n\\n/**\\n * Bracket text for paste, if necessary, as per https://cirw.in/blog/bracketed-paste\\n * @param text The pasted text to bracket\\n */\\nexport function bracketTextForPaste(text: string, bracketedPasteMode: boolean): string {\\n  if (bracketedPasteMode) {\\n    return '\\\\x1b[200~' + text + '\\\\x1b[201~';\\n  }\\n  return text;\\n}\\n\\n/**\\n * Binds copy functionality to the given terminal.\\n * @param {ClipboardEvent} ev The original copy event to be handled\\n */\\nexport function copyHandler(ev: ClipboardEvent, term: ITerminal, selectionManager: ISelectionManager): void {\\n  if (term.browser.isMSIE) {\\n    window.clipboardData.setData('Text', selectionManager.selectionText);\\n  } else {\\n    ev.clipboardData.setData('text/plain', selectionManager.selectionText);\\n  }\\n\\n  // Prevent or the original text will be copied.\\n  ev.preventDefault();\\n}\\n\\n/**\\n * Redirect the clipboard's data to the terminal's input handler.\\n * @param {ClipboardEvent} ev The original paste event to be handled\\n * @param {Terminal} term The terminal on which to apply the handled paste event\\n */\\nexport function pasteHandler(ev: ClipboardEvent, term: ITerminal): void {\\n  ev.stopPropagation();\\n\\n  let text: string;\\n\\n  let dispatchPaste = function(text: string): void {\\n    text = prepareTextForTerminal(text);\\n    text = bracketTextForPaste(text, term.bracketedPasteMode);\\n    term.handler(text);\\n    term.textarea.value = '';\\n    term.emit('paste', text);\\n    term.cancel(ev);\\n  };\\n\\n  if (term.browser.isMSIE) {\\n    if (window.clipboardData) {\\n      text = window.clipboardData.getData('Text');\\n      dispatchPaste(text);\\n    }\\n  } else {\\n    if (ev.clipboardData) {\\n      text = ev.clipboardData.getData('text/plain');\\n      dispatchPaste(text);\\n    }\\n  }\\n}\\n\\n/**\\n * Moves the textarea under the mouse cursor and focuses it.\\n * @param ev The original right click event to be handled.\\n * @param textarea The terminal's textarea.\\n */\\nexport function moveTextAreaUnderMouseCursor(ev: MouseEvent, textarea: HTMLTextAreaElement): void {\\n  // Bring textarea at the cursor position\\n  textarea.style.position = 'fixed';\\n  textarea.style.width = '20px';\\n  textarea.style.height = '20px';\\n  textarea.style.left = (ev.clientX - 10) + 'px';\\n  textarea.style.top = (ev.clientY - 10) + 'px';\\n  textarea.style.zIndex = '1000';\\n\\n  textarea.focus();\\n\\n  // Reset the terminal textarea's styling\\n  // Timeout needs to be long enough for click event to be handled.\\n  setTimeout(() => {\\n    textarea.style.position = null;\\n    textarea.style.width = null;\\n    textarea.style.height = null;\\n    textarea.style.left = null;\\n    textarea.style.top = null;\\n    textarea.style.zIndex = null;\\n  }, 200);\\n}\\n\\n/**\\n * Bind to right-click event and allow right-click copy and paste.\\n * @param ev The original right click event to be handled.\\n * @param textarea The terminal's textarea.\\n * @param selectionManager The terminal's selection manager.\\n * @param shouldSelectWord If true and there is no selection the current word will be selected\\n */\\nexport function rightClickHandler(ev: MouseEvent, textarea: HTMLTextAreaElement, selectionManager: ISelectionManager, shouldSelectWord: boolean): void {\\n  moveTextAreaUnderMouseCursor(ev, textarea);\\n\\n  if (shouldSelectWord && !selectionManager.isClickInSelection(ev)) {\\n    selectionManager.selectWordAtCursor(ev);\\n  }\\n\\n  // Get textarea ready to copy from the context menu\\n  textarea.value = selectionManager.selectionText;\\n  textarea.select();\\n}\\n\",\"/**\\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { ITerminal, ICircularList, LineData } from '../Types';\\nimport { C0 } from '../EscapeSequences';\\n\\nenum Direction {\\n  Up = 'A',\\n  Down = 'B',\\n  Right = 'C',\\n  Left = 'D'\\n}\\n\\nexport class AltClickHandler {\\n  private _startRow: number;\\n  private _startCol: number;\\n  private _endRow: number;\\n  private _endCol: number;\\n  private _lines: ICircularList<LineData>;\\n\\n  constructor(\\n    private _mouseEvent: MouseEvent,\\n    private _terminal: ITerminal\\n  ) {\\n    this._lines = this._terminal.buffer.lines;\\n    this._startCol = this._terminal.buffer.x;\\n    this._startRow = this._terminal.buffer.y;\\n\\n    [this._endCol, this._endRow] = this._terminal.mouseHelper.getCoords(\\n      this._mouseEvent,\\n      this._terminal.element,\\n      this._terminal.charMeasure,\\n      this._terminal.options.lineHeight,\\n      this._terminal.cols,\\n      this._terminal.rows,\\n      false\\n    ).map((coordinate: number) => {\\n      return coordinate - 1;\\n    });\\n  }\\n\\n  /**\\n   * Writes the escape sequences of arrows to the terminal\\n   */\\n  public move(): void {\\n    if (this._mouseEvent.altKey) {\\n      this._terminal.send(this._arrowSequences());\\n    }\\n  }\\n\\n  /**\\n   * Concatenates all the arrow sequences together.\\n   * Resets the starting row to an unwrapped row, moves to the requested row,\\n   * then moves to requested col.\\n   */\\n  private _arrowSequences(): string {\\n    // The alt buffer should try to navigate between rows\\n    if (!this._terminal.buffer.hasScrollback) {\\n      return this._resetStartingRow() + this._moveToRequestedRow() + this._moveToRequestedCol();\\n    }\\n\\n    // Only move horizontally for the normal buffer\\n    return this._moveHorizontallyOnly();\\n  }\\n\\n  /**\\n   * If the initial position of the cursor is on a row that is wrapped, move the\\n   * cursor up to the first row that is not wrapped to have accurate vertical\\n   * positioning.\\n   */\\n  private _resetStartingRow(): string {\\n    if (this._moveToRequestedRow().length === 0) {\\n      return '';\\n    } else {\\n      return repeat(this._bufferLine(\\n        this._startCol, this._startRow, this._startCol,\\n        this._startRow - this._wrappedRowsForRow(this._startRow), false\\n      ).length, this._sequence(Direction.Left));\\n    }\\n  }\\n\\n  /**\\n   * Using the reset starting and ending row, move to the requested row,\\n   * ignoring wrapped rows\\n   */\\n  private _moveToRequestedRow(): string {\\n    let startRow = this._startRow - this._wrappedRowsForRow(this._startRow);\\n    let endRow = this._endRow - this._wrappedRowsForRow(this._endRow);\\n\\n    let rowsToMove = Math.abs(startRow - endRow) - this._wrappedRowsCount();\\n\\n    return repeat(rowsToMove, this._sequence(this._verticalDirection()));\\n  }\\n\\n  /**\\n   * Move to the requested col on the ending row\\n   */\\n  private _moveToRequestedCol(): string {\\n    let startRow;\\n    if (this._moveToRequestedRow().length > 0) {\\n      startRow = this._endRow - this._wrappedRowsForRow(this._endRow);\\n    } else {\\n      startRow = this._startRow;\\n    }\\n\\n    let endRow = this._endRow;\\n    let direction = this._horizontalDirection();\\n\\n    return repeat(this._bufferLine(\\n      this._startCol, startRow, this._endCol, endRow,\\n      direction === Direction.Right\\n    ).length, this._sequence(direction));\\n  }\\n\\n  private _moveHorizontallyOnly(): string {\\n    let direction = this._horizontalDirection();\\n    return repeat(Math.abs(this._startCol - this._endCol), this._sequence(direction));\\n  }\\n\\n  /**\\n   * Utility functions\\n   */\\n\\n  /**\\n   * Calculates the number of wrapped rows between the unwrapped starting and\\n   * ending rows. These rows need to ignored since the cursor skips over them.\\n   */\\n  private _wrappedRowsCount(): number {\\n    let wrappedRows = 0;\\n    let startRow = this._startRow - this._wrappedRowsForRow(this._startRow);\\n    let endRow = this._endRow - this._wrappedRowsForRow(this._endRow);\\n\\n    for (let i = 0; i < Math.abs(startRow - endRow); i++) {\\n      let direction = this._verticalDirection() === Direction.Up ? -1 : 1;\\n\\n      if ((<any>this._lines.get(startRow + (direction * i))).isWrapped) {\\n        wrappedRows++;\\n      }\\n    }\\n\\n    return wrappedRows;\\n  }\\n\\n  /**\\n   * Calculates the number of wrapped rows that make up a given row.\\n   * @param currentRow The row to determine how many wrapped rows make it up\\n   */\\n  private _wrappedRowsForRow(currentRow: number): number {\\n    let rowCount = 0;\\n    let lineWraps = (<any>this._lines.get(currentRow)).isWrapped;\\n\\n    while (lineWraps && currentRow >= 0 && currentRow < this._terminal.rows) {\\n      rowCount++;\\n      currentRow--;\\n      lineWraps = (<any>this._lines.get(currentRow)).isWrapped;\\n    }\\n\\n    return rowCount;\\n  }\\n\\n  /**\\n   * Direction determiners\\n   */\\n\\n  /**\\n   * Determines if the right or left arrow is needed\\n   */\\n  private _horizontalDirection(): Direction {\\n    let startRow;\\n    if (this._moveToRequestedRow().length > 0) {\\n      startRow = this._endRow - this._wrappedRowsForRow(this._endRow);\\n    } else {\\n      startRow = this._startRow;\\n    }\\n\\n    if ((this._startCol < this._endCol &&\\n      startRow <= this._endRow) || // down/right or same y/right\\n      (this._startCol >= this._endCol &&\\n      startRow < this._endRow)) {  // down/left or same y/left\\n      return Direction.Right;\\n    } else {\\n      return Direction.Left;\\n    }\\n  }\\n\\n  /**\\n   * Determines if the up or down arrow is needed\\n   */\\n  private _verticalDirection(): Direction {\\n    if (this._startRow > this._endRow) {\\n      return Direction.Up;\\n    } else {\\n      return Direction.Down;\\n    }\\n  }\\n\\n  /**\\n   * Constructs the string of chars in the buffer from a starting row and col\\n   * to an ending row and col\\n   * @param startCol The starting column position\\n   * @param startRow The starting row position\\n   * @param endCol The ending column position\\n   * @param endRow The ending row position\\n   * @param forward Direction to move\\n   */\\n  private _bufferLine(\\n    startCol: number,\\n    startRow: number,\\n    endCol: number,\\n    endRow: number,\\n    forward: boolean\\n  ): string {\\n    let currentCol = startCol;\\n    let currentRow = startRow;\\n    let bufferStr = '';\\n\\n    while (currentCol !== endCol || currentRow !== endRow) {\\n      currentCol += forward ? 1 : -1;\\n\\n      if (forward && currentCol > this._terminal.cols - 1) {\\n        bufferStr += this._terminal.buffer.translateBufferLineToString(\\n          currentRow, false, startCol, currentCol\\n        );\\n        currentCol = 0;\\n        startCol = 0;\\n        currentRow++;\\n      } else if (!forward && currentCol < 0) {\\n        bufferStr += this._terminal.buffer.translateBufferLineToString(\\n          currentRow, false, 0, startCol + 1\\n        );\\n        currentCol = this._terminal.cols - 1;\\n        startCol = currentCol;\\n        currentRow--;\\n      }\\n    }\\n\\n    return bufferStr + this._terminal.buffer.translateBufferLineToString(\\n      currentRow, false, startCol, currentCol\\n    );\\n  }\\n\\n  /**\\n   * Constructs the escape sequence for clicking an arrow\\n   * @param direction The direction to move\\n   */\\n  private _sequence(direction: Direction): string {\\n    const mod = this._terminal.applicationCursor ? 'O' : '[';\\n    return C0.ESC + mod + direction;\\n  }\\n}\\n\\n/**\\n * Returns a string repeated a given number of times\\n * Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\\n * @param count The number of times to repeat the string\\n * @param string The string that is to be repeated\\n */\\nfunction repeat(count: number, str: string): string {\\n  count = Math.floor(count);\\n  let rpt = '';\\n  for (let i = 0; i < count; i++) {\\n    rpt += str;\\n  }\\n  return rpt;\\n}\\n\",\"/**\\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { IColorSet } from './renderer/Types';\\nimport { ITerminal, IViewport } from './Types';\\nimport { CharMeasure } from './utils/CharMeasure';\\n\\nconst FALLBACK_SCROLL_BAR_WIDTH = 15;\\n\\n/**\\n * Represents the viewport of a terminal, the visible area within the larger buffer of output.\\n * Logic for the virtual scroll bar is included in this object.\\n */\\nexport class Viewport implements IViewport {\\n  public scrollBarWidth: number = 0;\\n  private _currentRowHeight: number = 0;\\n  private _lastRecordedBufferLength: number = 0;\\n  private _lastRecordedViewportHeight: number = 0;\\n  private _lastRecordedBufferHeight: number = 0;\\n  private _lastTouchY: number;\\n\\n  // Stores a partial line amount when scrolling, this is used to keep track of how much of a line\\n  // is scrolled so we can \\\"scroll\\\" over partial lines and feel natural on touchpads. This is a\\n  // quick fix and could have a more robust solution in place that reset the value when needed.\\n  private _wheelPartialScroll: number = 0;\\n\\n  /**\\n   * Creates a new Viewport.\\n   * @param _terminal The terminal this viewport belongs to.\\n   * @param _viewportElement The DOM element acting as the viewport.\\n   * @param _scrollArea The DOM element acting as the scroll area.\\n   * @param _charMeasure A DOM element used to measure the character size of. the terminal.\\n   */\\n  constructor(\\n    private _terminal: ITerminal,\\n    private _viewportElement: HTMLElement,\\n    private _scrollArea: HTMLElement,\\n    private _charMeasure: CharMeasure\\n  ) {\\n    // Measure the width of the scrollbar. If it is 0 we can assume it's an OSX overlay scrollbar.\\n    // Unfortunately the overlay scrollbar would be hidden underneath the screen element in that case,\\n    // therefore we account for a standard amount to make it visible\\n    this.scrollBarWidth = (this._viewportElement.offsetWidth - this._scrollArea.offsetWidth) || FALLBACK_SCROLL_BAR_WIDTH;\\n    this._viewportElement.addEventListener('scroll', this._onScroll.bind(this));\\n\\n    // Perform this async to ensure the CharMeasure is ready.\\n    setTimeout(() => this.syncScrollArea(), 0);\\n  }\\n\\n  public onThemeChanged(colors: IColorSet): void {\\n    this._viewportElement.style.backgroundColor = colors.background.css;\\n  }\\n\\n  /**\\n   * Refreshes row height, setting line-height, viewport height and scroll area height if\\n   * necessary.\\n   */\\n  private _refresh(): void {\\n    if (this._charMeasure.height > 0) {\\n      this._currentRowHeight = this._terminal.renderer.dimensions.scaledCellHeight / window.devicePixelRatio;\\n      this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;\\n      const newBufferHeight = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._terminal.renderer.dimensions.canvasHeight);\\n      if (this._lastRecordedBufferHeight !== newBufferHeight) {\\n        this._lastRecordedBufferHeight = newBufferHeight;\\n        this._scrollArea.style.height = this._lastRecordedBufferHeight + 'px';\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Updates dimensions and synchronizes the scroll area if necessary.\\n   */\\n  public syncScrollArea(): void {\\n    if (this._lastRecordedBufferLength !== this._terminal.buffer.lines.length) {\\n      // If buffer height changed\\n      this._lastRecordedBufferLength = this._terminal.buffer.lines.length;\\n      this._refresh();\\n    } else if (this._lastRecordedViewportHeight !== (<any>this._terminal).renderer.dimensions.canvasHeight) {\\n      // If viewport height changed\\n      this._refresh();\\n    } else {\\n      // If size has changed, refresh viewport\\n      if (this._terminal.renderer.dimensions.scaledCellHeight / window.devicePixelRatio !== this._currentRowHeight) {\\n        this._refresh();\\n      }\\n    }\\n\\n    // Sync scrollTop\\n    const scrollTop = this._terminal.buffer.ydisp * this._currentRowHeight;\\n    if (this._viewportElement.scrollTop !== scrollTop) {\\n      this._viewportElement.scrollTop = scrollTop;\\n    }\\n  }\\n\\n  /**\\n   * Handles scroll events on the viewport, calculating the new viewport and requesting the\\n   * terminal to scroll to it.\\n   * @param ev The scroll event.\\n   */\\n  private _onScroll(ev: Event): void {\\n    // Don't attempt to scroll if the element is not visible, otherwise scrollTop will be corrupt\\n    // which causes the terminal to scroll the buffer to the top\\n    if (!this._viewportElement.offsetParent) {\\n      return;\\n    }\\n\\n    const newRow = Math.round(this._viewportElement.scrollTop / this._currentRowHeight);\\n    const diff = newRow - this._terminal.buffer.ydisp;\\n    this._terminal.scrollLines(diff, true);\\n  }\\n\\n  /**\\n   * Handles mouse wheel events by adjusting the viewport's scrollTop and delegating the actual\\n   * scrolling to `onScroll`, this event needs to be attached manually by the consumer of\\n   * `Viewport`.\\n   * @param ev The mouse wheel event.\\n   */\\n  public onWheel(ev: WheelEvent): void {\\n    const amount = this._getPixelsScrolled(ev);\\n    if (amount === 0) {\\n      return;\\n    }\\n    this._viewportElement.scrollTop += amount;\\n    // Prevent the page from scrolling when the terminal scrolls\\n    ev.preventDefault();\\n  }\\n\\n  private _getPixelsScrolled(ev: WheelEvent): number {\\n    // Do nothing if it's not a vertical scroll event\\n    if (ev.deltaY === 0) {\\n      return 0;\\n    }\\n\\n    // Fallback to WheelEvent.DOM_DELTA_PIXEL\\n    let amount = ev.deltaY;\\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\\n      amount *= this._currentRowHeight;\\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\\n      amount *= this._currentRowHeight * this._terminal.rows;\\n    }\\n    return amount;\\n  }\\n\\n  /**\\n   * Gets the number of pixels scrolled by the mouse event taking into account what type of delta\\n   * is being used.\\n   * @param ev The mouse wheel event.\\n   */\\n  public getLinesScrolled(ev: WheelEvent): number {\\n    // Do nothing if it's not a vertical scroll event\\n    if (ev.deltaY === 0) {\\n      return 0;\\n    }\\n\\n    // Fallback to WheelEvent.DOM_DELTA_LINE\\n    let amount = ev.deltaY;\\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {\\n      amount /= this._currentRowHeight + 0.0; // Prevent integer division\\n      this._wheelPartialScroll += amount;\\n      amount = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1);\\n      this._wheelPartialScroll %= 1;\\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\\n      amount *= this._terminal.rows;\\n    }\\n    return amount;\\n  }\\n\\n  /**\\n   * Handles the touchstart event, recording the touch occurred.\\n   * @param ev The touch event.\\n   */\\n  public onTouchStart(ev: TouchEvent): void {\\n    this._lastTouchY = ev.touches[0].pageY;\\n  }\\n\\n  /**\\n   * Handles the touchmove event, scrolling the viewport if the position shifted.\\n   * @param ev The touch event.\\n   */\\n  public onTouchMove(ev: TouchEvent): void {\\n    let deltaY = this._lastTouchY - ev.touches[0].pageY;\\n    this._lastTouchY = ev.touches[0].pageY;\\n    if (deltaY === 0) {\\n      return;\\n    }\\n    this._viewportElement.scrollTop += deltaY;\\n    ev.preventDefault();\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { Terminal as PublicTerminal, ITerminalOptions as IPublicTerminalOptions, IEventEmitter } from 'xterm';\\nimport { IColorSet, IRenderer } from './renderer/Types';\\nimport { IMouseZoneManager } from './input/Types';\\n\\nexport type CustomKeyEventHandler = (event: KeyboardEvent) => boolean;\\n\\nexport type XtermListener = (...args: any[]) => void;\\n\\nexport type CharData = [number, string, number, number];\\nexport type LineData = CharData[];\\n\\nexport type LinkMatcherHandler = (event: MouseEvent, uri: string) => void;\\nexport type LinkMatcherValidationCallback = (uri: string, callback: (isValid: boolean) => void) => void;\\n\\nexport enum LinkHoverEventTypes {\\n  HOVER = 'linkhover',\\n  TOOLTIP = 'linktooltip',\\n  LEAVE = 'linkleave'\\n}\\n\\n/**\\n * This interface encapsulates everything needed from the Terminal by the\\n * InputHandler. This cleanly separates the large amount of methods needed by\\n * InputHandler cleanly from the ITerminal interface.\\n */\\nexport interface IInputHandlingTerminal extends IEventEmitter {\\n  element: HTMLElement;\\n  options: ITerminalOptions;\\n  cols: number;\\n  rows: number;\\n  charset: ICharset;\\n  gcharset: number;\\n  glevel: number;\\n  charsets: ICharset[];\\n  applicationKeypad: boolean;\\n  applicationCursor: boolean;\\n  originMode: boolean;\\n  insertMode: boolean;\\n  wraparoundMode: boolean;\\n  bracketedPasteMode: boolean;\\n  defAttr: number;\\n  curAttr: number;\\n  prefix: string;\\n  savedCols: number;\\n  x10Mouse: boolean;\\n  vt200Mouse: boolean;\\n  normalMouse: boolean;\\n  mouseEvents: boolean;\\n  sendFocus: boolean;\\n  utfMouse: boolean;\\n  sgrMouse: boolean;\\n  urxvtMouse: boolean;\\n  cursorHidden: boolean;\\n\\n  buffers: IBufferSet;\\n  buffer: IBuffer;\\n  viewport: IViewport;\\n  selectionManager: ISelectionManager;\\n\\n  bell(): void;\\n  focus(): void;\\n  convertEol: boolean;\\n  updateRange(y: number): void;\\n  scroll(isWrapped?: boolean): void;\\n  setgLevel(g: number): void;\\n  eraseAttr(): number;\\n  eraseRight(x: number, y: number): void;\\n  eraseLine(y: number): void;\\n  eraseLeft(x: number, y: number): void;\\n  blankLine(cur?: boolean, isWrapped?: boolean): LineData;\\n  is(term: string): boolean;\\n  send(data: string): void;\\n  setgCharset(g: number, charset: ICharset): void;\\n  resize(x: number, y: number): void;\\n  log(text: string, data?: any): void;\\n  reset(): void;\\n  showCursor(): void;\\n  refresh(start: number, end: number): void;\\n  matchColor(r1: number, g1: number, b1: number): number;\\n  error(text: string, data?: any): void;\\n  setOption(key: string, value: any): void;\\n  tabSet(): void;\\n}\\n\\nexport interface IViewport {\\n  scrollBarWidth: number;\\n  syncScrollArea(): void;\\n  getLinesScrolled(ev: WheelEvent): number;\\n  onWheel(ev: WheelEvent): void;\\n  onTouchStart(ev: TouchEvent): void;\\n  onTouchMove(ev: TouchEvent): void;\\n  onThemeChanged(colors: IColorSet): void;\\n}\\n\\nexport interface ICompositionHelper {\\n  compositionstart(): void;\\n  compositionupdate(ev: CompositionEvent): void;\\n  compositionend(): void;\\n  updateCompositionElements(dontRecurse?: boolean): void;\\n  keydown(ev: KeyboardEvent): boolean;\\n}\\n\\n/**\\n * Handles actions generated by the parser.\\n */\\nexport interface IInputHandler {\\n  addChar(char: string, code: number): void;\\n\\n  /** C0 BEL */ bell(): void;\\n  /** C0 LF */ lineFeed(): void;\\n  /** C0 CR */ carriageReturn(): void;\\n  /** C0 BS */ backspace(): void;\\n  /** C0 HT */ tab(): void;\\n  /** C0 SO */ shiftOut(): void;\\n  /** C0 SI */ shiftIn(): void;\\n\\n  /** CSI @ */ insertChars(params?: number[]): void;\\n  /** CSI A */ cursorUp(params?: number[]): void;\\n  /** CSI B */ cursorDown(params?: number[]): void;\\n  /** CSI C */ cursorForward(params?: number[]): void;\\n  /** CSI D */ cursorBackward(params?: number[]): void;\\n  /** CSI E */ cursorNextLine(params?: number[]): void;\\n  /** CSI F */ cursorPrecedingLine(params?: number[]): void;\\n  /** CSI G */ cursorCharAbsolute(params?: number[]): void;\\n  /** CSI H */ cursorPosition(params?: number[]): void;\\n  /** CSI I */ cursorForwardTab(params?: number[]): void;\\n  /** CSI J */ eraseInDisplay(params?: number[]): void;\\n  /** CSI K */ eraseInLine(params?: number[]): void;\\n  /** CSI L */ insertLines(params?: number[]): void;\\n  /** CSI M */ deleteLines(params?: number[]): void;\\n  /** CSI P */ deleteChars(params?: number[]): void;\\n  /** CSI S */ scrollUp(params?: number[]): void;\\n  /** CSI T */ scrollDown(params?: number[]): void;\\n  /** CSI X */ eraseChars(params?: number[]): void;\\n  /** CSI Z */ cursorBackwardTab(params?: number[]): void;\\n  /** CSI ` */ charPosAbsolute(params?: number[]): void;\\n  /** CSI a */ HPositionRelative(params?: number[]): void;\\n  /** CSI b */ repeatPrecedingCharacter(params?: number[]): void;\\n  /** CSI c */ sendDeviceAttributes(params?: number[]): void;\\n  /** CSI d */ linePosAbsolute(params?: number[]): void;\\n  /** CSI e */ VPositionRelative(params?: number[]): void;\\n  /** CSI f */ HVPosition(params?: number[]): void;\\n  /** CSI g */ tabClear(params?: number[]): void;\\n  /** CSI h */ setMode(params?: number[]): void;\\n  /** CSI l */ resetMode(params?: number[]): void;\\n  /** CSI m */ charAttributes(params?: number[]): void;\\n  /** CSI n */ deviceStatus(params?: number[]): void;\\n  /** CSI p */ softReset(params?: number[]): void;\\n  /** CSI q */ setCursorStyle(params?: number[]): void;\\n  /** CSI r */ setScrollRegion(params?: number[]): void;\\n  /** CSI s */ saveCursor(params?: number[]): void;\\n  /** CSI u */ restoreCursor(params?: number[]): void;\\n}\\n\\nexport interface ILinkMatcher {\\n  id: number;\\n  regex: RegExp;\\n  handler: LinkMatcherHandler;\\n  hoverTooltipCallback?: LinkMatcherHandler;\\n  hoverLeaveCallback?: () => void;\\n  matchIndex?: number;\\n  validationCallback?: LinkMatcherValidationCallback;\\n  priority?: number;\\n  willLinkActivate?: (event: MouseEvent, uri: string) => boolean;\\n}\\n\\nexport interface ICharset {\\n  [key: string]: string;\\n}\\n\\nexport interface ILinkHoverEvent {\\n  x1: number;\\n  y1: number;\\n  x2: number;\\n  y2: number;\\n  cols: number;\\n}\\n\\nexport interface ITerminal extends PublicTerminal, IElementAccessor, IBufferAccessor, ILinkifierAccessor {\\n  screenElement: HTMLElement;\\n  selectionManager: ISelectionManager;\\n  charMeasure: ICharMeasure;\\n  renderer: IRenderer;\\n  browser: IBrowser;\\n  writeBuffer: string[];\\n  cursorHidden: boolean;\\n  cursorState: number;\\n  defAttr: number;\\n  options: ITerminalOptions;\\n  buffer: IBuffer;\\n  buffers: IBufferSet;\\n  isFocused: boolean;\\n  mouseHelper: IMouseHelper;\\n  viewport: IViewport;\\n  bracketedPasteMode: boolean;\\n  applicationCursor: boolean;\\n\\n  /**\\n   * Emit the 'data' event and populate the given data.\\n   * @param data The data to populate in the event.\\n   */\\n  handler(data: string): void;\\n  send(data: string): void;\\n  scrollLines(disp: number, suppressScrollEvent?: boolean): void;\\n  cancel(ev: Event, force?: boolean): boolean | void;\\n  log(text: string): void;\\n  showCursor(): void;\\n  blankLine(cur?: boolean, isWrapped?: boolean, cols?: number): LineData;\\n}\\n\\nexport interface IBufferAccessor {\\n  buffer: IBuffer;\\n}\\n\\nexport interface IElementAccessor {\\n  element: HTMLElement;\\n}\\n\\nexport interface ILinkifierAccessor {\\n  linkifier: ILinkifier;\\n}\\n\\nexport interface IMouseHelper {\\n  getCoords(event: {pageX: number, pageY: number}, element: HTMLElement, charMeasure: ICharMeasure, lineHeight: number, colCount: number, rowCount: number, isSelection?: boolean): [number, number];\\n  getRawByteCoords(event: MouseEvent, element: HTMLElement, charMeasure: ICharMeasure, lineHeight: number, colCount: number, rowCount: number): { x: number, y: number };\\n}\\n\\nexport interface ICharMeasure {\\n  width: number;\\n  height: number;\\n  measure(options: ITerminalOptions): void;\\n}\\n\\n// TODO: The options that are not in the public API should be reviewed\\nexport interface ITerminalOptions extends IPublicTerminalOptions {\\n  cancelEvents?: boolean;\\n  convertEol?: boolean;\\n  debug?: boolean;\\n  handler?: (data: string) => void;\\n  screenKeys?: boolean;\\n  termName?: string;\\n  useFlowControl?: boolean;\\n}\\n\\nexport interface IBuffer {\\n  lines: ICircularList<LineData>;\\n  ydisp: number;\\n  ybase: number;\\n  y: number;\\n  x: number;\\n  tabs: any;\\n  scrollBottom: number;\\n  scrollTop: number;\\n  hasScrollback: boolean;\\n  savedY: number;\\n  savedX: number;\\n  isCursorInViewport: boolean;\\n  translateBufferLineToString(lineIndex: number, trimRight: boolean, startCol?: number, endCol?: number): string;\\n  nextStop(x?: number): number;\\n  prevStop(x?: number): number;\\n}\\n\\nexport interface IBufferSet extends IEventEmitter {\\n  alt: IBuffer;\\n  normal: IBuffer;\\n  active: IBuffer;\\n\\n  activateNormalBuffer(): void;\\n  activateAltBuffer(): void;\\n}\\n\\nexport interface ICircularList<T> extends IEventEmitter {\\n  length: number;\\n  maxLength: number;\\n\\n  get(index: number): T;\\n  set(index: number, value: T): void;\\n  push(value: T): void;\\n  pop(): T;\\n  splice(start: number, deleteCount: number, ...items: T[]): void;\\n  trimStart(count: number): void;\\n  shiftElements(start: number, count: number, offset: number): void;\\n}\\n\\nexport interface ISelectionManager {\\n  selectionText: string;\\n  selectionStart: [number, number];\\n  selectionEnd: [number, number];\\n\\n  disable(): void;\\n  enable(): void;\\n  setSelection(row: number, col: number, length: number): void;\\n  isClickInSelection(event: MouseEvent): boolean;\\n  selectWordAtCursor(event: MouseEvent): void;\\n}\\n\\nexport interface ILinkifier extends IEventEmitter {\\n  attachToDom(mouseZoneManager: IMouseZoneManager): void;\\n  linkifyRows(start: number, end: number): void;\\n  registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options?: ILinkMatcherOptions): number;\\n  deregisterLinkMatcher(matcherId: number): boolean;\\n}\\n\\nexport interface ILinkMatcherOptions {\\n  /**\\n   * The index of the link from the regex.match(text) call. This defaults to 0\\n   * (for regular expressions without capture groups).\\n   */\\n  matchIndex?: number;\\n  /**\\n   * A callback that validates an individual link, returning true if valid and\\n   * false if invalid.\\n   */\\n  validationCallback?: LinkMatcherValidationCallback;\\n  /**\\n   * A callback that fires when the mouse hovers over a link.\\n   */\\n  tooltipCallback?: LinkMatcherHandler;\\n  /**\\n   * A callback that fires when the mouse leaves a link that was hovered.\\n   */\\n  leaveCallback?: () => void;\\n  /**\\n   * The priority of the link matcher, this defines the order in which the link\\n   * matcher is evaluated relative to others, from highest to lowest. The\\n   * default value is 0.\\n   */\\n  priority?: number;\\n  /**\\n   * A callback that fires when the mousedown and click events occur that\\n   * determines whether a link will be activated upon click. This enables\\n   * only activating a link when a certain modifier is held down, if not the\\n   * mouse event will continue propagation (eg. double click to select word).\\n   */\\n  willLinkActivate?: (event: MouseEvent, uri: string) => boolean;\\n}\\n\\nexport interface IBrowser {\\n  isNode: boolean;\\n  userAgent: string;\\n  platform: string;\\n  isFirefox: boolean;\\n  isMSIE: boolean;\\n  isMac: boolean;\\n  isIpad: boolean;\\n  isIphone: boolean;\\n  isMSWindows: boolean;\\n}\\n\\nexport interface ISoundManager {\\n  playBellSound(): void;\\n}\\n\",\"/**\\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\\n * @license MIT\\n *\\n * Originally forked from (with the author's permission):\\n *   Fabrice Bellard's javascript vt100 for jslinux:\\n *   http://bellard.org/jslinux/\\n *   Copyright (c) 2011 Fabrice Bellard\\n *   The original design remains. The terminal itself\\n *   has been extended to include xterm CSI codes, among\\n *   other features.\\n *\\n * Terminal Emulation References:\\n *   http://vt100.net/\\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\\n *   http://invisible-island.net/vttest/\\n *   http://www.inwap.com/pdp10/ansicode.txt\\n *   http://linux.die.net/man/4/console_codes\\n *   http://linux.die.net/man/7/urxvt\\n */\\n\\nimport { ICharset, IInputHandlingTerminal, IViewport, ICompositionHelper, ITerminalOptions, ITerminal, IBrowser, ILinkifier, ILinkMatcherOptions, CustomKeyEventHandler, LinkMatcherHandler, CharData, LineData } from './Types';\\nimport { IMouseZoneManager } from './input/Types';\\nimport { IRenderer } from './renderer/Types';\\nimport { BufferSet } from './BufferSet';\\nimport { Buffer, MAX_BUFFER_SIZE } from './Buffer';\\nimport { CompositionHelper } from './CompositionHelper';\\nimport { EventEmitter } from './EventEmitter';\\nimport { Viewport } from './Viewport';\\nimport { rightClickHandler, moveTextAreaUnderMouseCursor, pasteHandler, copyHandler } from './handlers/Clipboard';\\nimport { C0 } from './EscapeSequences';\\nimport { InputHandler } from './InputHandler';\\nimport { Parser } from './Parser';\\nimport { Renderer } from './renderer/Renderer';\\nimport { Linkifier } from './Linkifier';\\nimport { SelectionManager } from './SelectionManager';\\nimport { CharMeasure } from './utils/CharMeasure';\\nimport * as Browser from './shared/utils/Browser';\\nimport * as Strings from './Strings';\\nimport { MouseHelper } from './utils/MouseHelper';\\nimport { clone } from './utils/Clone';\\nimport { DEFAULT_BELL_SOUND, SoundManager } from './SoundManager';\\nimport { DEFAULT_ANSI_COLORS } from './renderer/ColorManager';\\nimport { MouseZoneManager } from './input/MouseZoneManager';\\nimport { AccessibilityManager } from './AccessibilityManager';\\nimport { ScreenDprMonitor } from './utils/ScreenDprMonitor';\\nimport { ITheme, ILocalizableStrings, IMarker } from 'xterm';\\n\\n// reg + shift key mappings for digits and special chars\\nconst KEYCODE_KEY_MAPPINGS = {\\n  // digits 0-9\\n  48: ['0', ')'],\\n  49: ['1', '!'],\\n  50: ['2', '@'],\\n  51: ['3', '#'],\\n  52: ['4', '$'],\\n  53: ['5', '%'],\\n  54: ['6', '^'],\\n  55: ['7', '&'],\\n  56: ['8', '*'],\\n  57: ['9', '('],\\n\\n  // special chars\\n  186: [';', ':'],\\n  187: ['=', '+'],\\n  188: [',', '<'],\\n  189: ['-', '_'],\\n  190: ['.', '>'],\\n  191: ['/', '?'],\\n  192: ['`', '~'],\\n  219: ['[', '{'],\\n  220: ['\\\\\\\\', '|'],\\n  221: [']', '}'],\\n  222: ['\\\\'', '\\\"']\\n};\\n\\n// Let it work inside Node.js for automated testing purposes.\\nconst document = (typeof window !== 'undefined') ? window.document : null;\\n\\n/**\\n * The amount of write requests to queue before sending an XOFF signal to the\\n * pty process. This number must be small in order for ^C and similar sequences\\n * to be responsive.\\n */\\nconst WRITE_BUFFER_PAUSE_THRESHOLD = 5;\\n\\n/**\\n * The number of writes to perform in a single batch before allowing the\\n * renderer to catch up with a 0ms setTimeout.\\n */\\nconst WRITE_BATCH_SIZE = 300;\\n\\nconst DEFAULT_OPTIONS: ITerminalOptions = {\\n  cols: 80,\\n  rows: 24,\\n  convertEol: false,\\n  termName: 'xterm',\\n  cursorBlink: false,\\n  cursorStyle: 'block',\\n  bellSound: DEFAULT_BELL_SOUND,\\n  bellStyle: 'none',\\n  enableBold: true,\\n  fontFamily: 'courier-new, courier, monospace',\\n  fontSize: 15,\\n  fontWeight: 'normal',\\n  fontWeightBold: 'bold',\\n  lineHeight: 1.0,\\n  letterSpacing: 0,\\n  scrollback: 1000,\\n  screenKeys: false,\\n  screenReaderMode: false,\\n  debug: false,\\n  macOptionIsMeta: false,\\n  cancelEvents: false,\\n  disableStdin: false,\\n  useFlowControl: false,\\n  allowTransparency: false,\\n  tabStopWidth: 8,\\n  theme: null,\\n  rightClickSelectsWord: Browser.isMac\\n  // programFeatures: false,\\n  // focusKeys: false,\\n};\\n\\nexport class Terminal extends EventEmitter implements ITerminal, IInputHandlingTerminal {\\n  public textarea: HTMLTextAreaElement;\\n  public element: HTMLElement;\\n  public screenElement: HTMLElement;\\n\\n  /**\\n   * The HTMLElement that the terminal is created in, set by Terminal.open.\\n   */\\n  private _parent: HTMLElement;\\n  private _context: Window;\\n  private _document: Document;\\n  private _viewportScrollArea: HTMLElement;\\n  private _viewportElement: HTMLElement;\\n  private _helperContainer: HTMLElement;\\n  private _compositionView: HTMLElement;\\n\\n  private _visualBellTimer: number;\\n\\n  public browser: IBrowser = <any>Browser;\\n\\n  public options: ITerminalOptions;\\n\\n  // TODO: This can be changed to an enum or boolean, 0 and 1 seem to be the only options\\n  public cursorState: number;\\n  public cursorHidden: boolean;\\n  public convertEol: boolean;\\n\\n  private _sendDataQueue: string;\\n  private _customKeyEventHandler: CustomKeyEventHandler;\\n\\n  // modes\\n  public applicationKeypad: boolean;\\n  public applicationCursor: boolean;\\n  public originMode: boolean;\\n  public insertMode: boolean;\\n  public wraparoundMode: boolean; // defaults: xterm - true, vt100 - false\\n  public bracketedPasteMode: boolean;\\n\\n  // charset\\n  // The current charset\\n  public charset: ICharset;\\n  public gcharset: number;\\n  public glevel: number;\\n  public charsets: ICharset[];\\n\\n  // mouse properties\\n  private _decLocator: boolean; // This is unstable and never set\\n  public x10Mouse: boolean;\\n  public vt200Mouse: boolean;\\n  private _vt300Mouse: boolean; // This is unstable and never set\\n  public normalMouse: boolean;\\n  public mouseEvents: boolean;\\n  public sendFocus: boolean;\\n  public utfMouse: boolean;\\n  public sgrMouse: boolean;\\n  public urxvtMouse: boolean;\\n\\n  // misc\\n  private _refreshStart: number;\\n  private _refreshEnd: number;\\n  public savedCols: number;\\n\\n  public defAttr: number;\\n  public curAttr: number;\\n\\n  public params: (string | number)[];\\n  public currentParam: string | number;\\n  public prefix: string;\\n  public postfix: string;\\n\\n  // user input states\\n  public writeBuffer: string[];\\n  private _writeInProgress: boolean;\\n\\n  /**\\n   * Whether _xterm.js_ sent XOFF in order to catch up with the pty process.\\n   * This is a distinct state from writeStopped so that if the user requested\\n   * XOFF via ^S that it will not automatically resume when the writeBuffer goes\\n   * below threshold.\\n   */\\n  private _xoffSentToCatchUp: boolean;\\n\\n  /** Whether writing has been stopped as a result of XOFF */\\n  // private _writeStopped: boolean;\\n\\n  // Store if user went browsing history in scrollback\\n  private _userScrolling: boolean;\\n\\n  private _inputHandler: InputHandler;\\n  public soundManager: SoundManager;\\n  private _parser: Parser;\\n  public renderer: IRenderer;\\n  public selectionManager: SelectionManager;\\n  public linkifier: ILinkifier;\\n  public buffers: BufferSet;\\n  public viewport: IViewport;\\n  private _compositionHelper: ICompositionHelper;\\n  public charMeasure: CharMeasure;\\n  private _mouseZoneManager: IMouseZoneManager;\\n  public mouseHelper: MouseHelper;\\n  private _accessibilityManager: AccessibilityManager;\\n  private _screenDprMonitor: ScreenDprMonitor;\\n\\n  public cols: number;\\n  public rows: number;\\n\\n  /**\\n   * Creates a new `Terminal` object.\\n   *\\n   * @param {object} options An object containing a set of options, the available options are:\\n   *   - `cursorBlink` (boolean): Whether the terminal cursor blinks\\n   *   - `cols` (number): The number of columns of the terminal (horizontal size)\\n   *   - `rows` (number): The number of rows of the terminal (vertical size)\\n   *\\n   * @public\\n   * @class Xterm Xterm\\n   * @alias module:xterm/src/xterm\\n   */\\n  constructor(\\n    options: ITerminalOptions = {}\\n  ) {\\n    super();\\n    this.options = clone(options);\\n    this._setup();\\n  }\\n\\n  private _setup(): void {\\n    Object.keys(DEFAULT_OPTIONS).forEach((key) => {\\n      if (this.options[key] == null) {\\n        this.options[key] = DEFAULT_OPTIONS[key];\\n      }\\n      // TODO: We should move away from duplicate options on the Terminal object\\n      this[key] = this.options[key];\\n    });\\n\\n    // this.context = options.context || window;\\n    // this.document = options.document || document;\\n    // TODO: WHy not document.body?\\n    this._parent = document ? document.body : null;\\n\\n    this.cols = this.options.cols;\\n    this.rows = this.options.rows;\\n\\n    if (this.options.handler) {\\n      this.on('data', this.options.handler);\\n    }\\n\\n    this.cursorState = 0;\\n    this.cursorHidden = false;\\n    this._sendDataQueue = '';\\n    this._customKeyEventHandler = null;\\n\\n    // modes\\n    this.applicationKeypad = false;\\n    this.applicationCursor = false;\\n    this.originMode = false;\\n    this.insertMode = false;\\n    this.wraparoundMode = true; // defaults: xterm - true, vt100 - false\\n    this.bracketedPasteMode = false;\\n\\n    // charset\\n    this.charset = null;\\n    this.gcharset = null;\\n    this.glevel = 0;\\n    // TODO: Can this be just []?\\n    this.charsets = [null];\\n\\n    this.defAttr = (0 << 18) | (257 << 9) | (256 << 0);\\n    this.curAttr = (0 << 18) | (257 << 9) | (256 << 0);\\n\\n    this.params = [];\\n    this.currentParam = 0;\\n    this.prefix = '';\\n    this.postfix = '';\\n\\n    // user input states\\n    this.writeBuffer = [];\\n    this._writeInProgress = false;\\n\\n    this._xoffSentToCatchUp = false;\\n    // this._writeStopped = false;\\n    this._userScrolling = false;\\n\\n    this._inputHandler = new InputHandler(this);\\n    this._parser = new Parser(this._inputHandler, this);\\n    // Reuse renderer if the Terminal is being recreated via a reset call.\\n    this.renderer = this.renderer || null;\\n    this.selectionManager = this.selectionManager || null;\\n    this.linkifier = this.linkifier || new Linkifier(this);\\n    this._mouseZoneManager = this._mouseZoneManager || null;\\n    this.soundManager = this.soundManager || new SoundManager(this);\\n\\n    // Create the terminal's buffers and set the current buffer\\n    this.buffers = new BufferSet(this);\\n    if (this.selectionManager) {\\n      this.selectionManager.clearSelection();\\n      this.selectionManager.initBuffersListeners();\\n    }\\n  }\\n\\n  /**\\n   * Convenience property to active buffer.\\n   */\\n  public get buffer(): Buffer {\\n    return this.buffers.active;\\n  }\\n\\n  public static get strings(): ILocalizableStrings {\\n    return Strings;\\n  }\\n\\n  /**\\n   * back_color_erase feature for xterm.\\n   */\\n  public eraseAttr(): number {\\n    // if (this.is('screen')) return this.defAttr;\\n    return (this.defAttr & ~0x1ff) | (this.curAttr & 0x1ff);\\n  }\\n\\n  /**\\n   * Focus the terminal. Delegates focus handling to the terminal's DOM element.\\n   */\\n  public focus(): void {\\n    if (this.textarea) {\\n      this.textarea.focus();\\n    }\\n  }\\n\\n  public get isFocused(): boolean {\\n    return document.activeElement === this.textarea;\\n  }\\n\\n  /**\\n   * Retrieves an option's value from the terminal.\\n   * @param {string} key The option key.\\n   */\\n  public getOption(key: string): any {\\n    if (!(key in DEFAULT_OPTIONS)) {\\n      throw new Error('No option with key \\\"' + key + '\\\"');\\n    }\\n\\n    if (typeof this.options[key] !== 'undefined') {\\n      return this.options[key];\\n    }\\n\\n    return this[key];\\n  }\\n\\n  /**\\n   * Sets an option on the terminal.\\n   * @param {string} key The option key.\\n   * @param {any} value The option value.\\n   */\\n  public setOption(key: string, value: any): void {\\n    if (!(key in DEFAULT_OPTIONS)) {\\n      throw new Error('No option with key \\\"' + key + '\\\"');\\n    }\\n    switch (key) {\\n      case 'bellStyle':\\n        if (!value) {\\n          value = 'none';\\n        }\\n        break;\\n      case 'cursorStyle':\\n        if (!value) {\\n          value = 'block';\\n        }\\n        break;\\n      case 'fontWeight':\\n        if (!value) {\\n          value = 'normal';\\n        }\\n        break;\\n      case 'fontWeightBold':\\n        if (!value) {\\n          value = 'bold';\\n        }\\n        break;\\n      case 'lineHeight':\\n        if (value < 1) {\\n          console.warn(`${key} cannot be less than 1, value: ${value}`);\\n          return;\\n        }\\n      case 'tabStopWidth':\\n        if (value < 1) {\\n          console.warn(`${key} cannot be less than 1, value: ${value}`);\\n          return;\\n        }\\n        break;\\n      case 'theme':\\n        // If open has been called we do not want to set options.theme as the\\n        // source of truth is owned by the renderer.\\n        if (this.renderer) {\\n          this._setTheme(<ITheme>value);\\n          return;\\n        }\\n        break;\\n      case 'scrollback':\\n        value = Math.min(value, MAX_BUFFER_SIZE);\\n\\n        if (value < 0) {\\n          console.warn(`${key} cannot be less than 0, value: ${value}`);\\n          return;\\n        }\\n        if (this.options[key] !== value) {\\n          const newBufferLength = this.rows + value;\\n          if (this.buffer.lines.length > newBufferLength) {\\n            const amountToTrim = this.buffer.lines.length - newBufferLength;\\n            const needsRefresh = (this.buffer.ydisp - amountToTrim < 0);\\n            this.buffer.lines.trimStart(amountToTrim);\\n            this.buffer.ybase = Math.max(this.buffer.ybase - amountToTrim, 0);\\n            this.buffer.ydisp = Math.max(this.buffer.ydisp - amountToTrim, 0);\\n            if (needsRefresh) {\\n              this.refresh(0, this.rows - 1);\\n            }\\n          }\\n        }\\n        break;\\n    }\\n    this[key] = value;\\n    this.options[key] = value;\\n    switch (key) {\\n      case 'fontFamily':\\n      case 'fontSize':\\n        // When the font changes the size of the cells may change which requires a renderer clear\\n        this.renderer.clear();\\n        this.charMeasure.measure(this.options);\\n        break;\\n      case 'enableBold':\\n      case 'letterSpacing':\\n      case 'lineHeight':\\n      case 'fontWeight':\\n      case 'fontWeightBold':\\n        // When the font changes the size of the cells may change which requires a renderer clear\\n        this.renderer.clear();\\n        this.renderer.onResize(this.cols, this.rows);\\n        this.refresh(0, this.rows - 1);\\n      case 'scrollback':\\n        this.buffers.resize(this.cols, this.rows);\\n        this.viewport.syncScrollArea();\\n        break;\\n      case 'screenReaderMode':\\n        if (value) {\\n          if (!this._accessibilityManager) {\\n            this._accessibilityManager = new AccessibilityManager(this);\\n          }\\n        } else {\\n          if (this._accessibilityManager) {\\n            this._accessibilityManager.dispose();\\n            this._accessibilityManager = null;\\n          }\\n        }\\n        break;\\n      case 'tabStopWidth': this.buffers.setupTabStops(); break;\\n    }\\n    // Inform renderer of changes\\n    if (this.renderer) {\\n      this.renderer.onOptionsChanged();\\n    }\\n  }\\n\\n  /**\\n   * Binds the desired focus behavior on a given terminal object.\\n   */\\n  private _onTextAreaFocus(): void {\\n    if (this.sendFocus) {\\n      this.send(C0.ESC + '[I');\\n    }\\n    this.element.classList.add('focus');\\n    this.showCursor();\\n    this.emit('focus');\\n  }\\n\\n  /**\\n   * Blur the terminal, calling the blur function on the terminal's underlying\\n   * textarea.\\n   */\\n  public blur(): void {\\n    return this.textarea.blur();\\n  }\\n\\n  /**\\n   * Binds the desired blur behavior on a given terminal object.\\n   */\\n  private _onTextAreaBlur(): void {\\n    // Text can safely be removed on blur. Doing it earlier could interfere with\\n    // screen readers reading it out.\\n    this.textarea.value = '';\\n    this.refresh(this.buffer.y, this.buffer.y);\\n    if (this.sendFocus) {\\n      this.send(C0.ESC + '[O');\\n    }\\n    this.element.classList.remove('focus');\\n    this.emit('blur');\\n  }\\n\\n  /**\\n   * Initialize default behavior\\n   */\\n  private _initGlobal(): void {\\n    this._bindKeys();\\n\\n    // Bind clipboard functionality\\n    on(this.element, 'copy', (event: ClipboardEvent) => {\\n      // If mouse events are active it means the selection manager is disabled and\\n      // copy should be handled by the host program.\\n      if (!this.hasSelection()) {\\n        return;\\n      }\\n      copyHandler(event, this, this.selectionManager);\\n    });\\n    const pasteHandlerWrapper = event => pasteHandler(event, this);\\n    on(this.textarea, 'paste', pasteHandlerWrapper);\\n    on(this.element, 'paste', pasteHandlerWrapper);\\n\\n    // Handle right click context menus\\n    if (Browser.isFirefox) {\\n      // Firefox doesn't appear to fire the contextmenu event on right click\\n      on(this.element, 'mousedown', (event: MouseEvent) => {\\n        if (event.button === 2) {\\n          rightClickHandler(event, this.textarea, this.selectionManager, this.options.rightClickSelectsWord);\\n        }\\n      });\\n    } else {\\n      on(this.element, 'contextmenu', (event: MouseEvent) => {\\n        rightClickHandler(event, this.textarea, this.selectionManager, this.options.rightClickSelectsWord);\\n      });\\n    }\\n\\n    // Move the textarea under the cursor when middle clicking on Linux to ensure\\n    // middle click to paste selection works. This only appears to work in Chrome\\n    // at the time is writing.\\n    if (Browser.isLinux) {\\n      // Use auxclick event over mousedown the latter doesn't seem to work. Note\\n      // that the regular click event doesn't fire for the middle mouse button.\\n      on(this.element, 'auxclick', (event: MouseEvent) => {\\n        if (event.button === 1) {\\n          moveTextAreaUnderMouseCursor(event, this.textarea);\\n        }\\n      });\\n    }\\n  }\\n\\n  /**\\n   * Apply key handling to the terminal\\n   */\\n  private _bindKeys(): void {\\n    const self = this;\\n    on(this.element, 'keydown', function (ev: KeyboardEvent): void {\\n      if (document.activeElement !== this) {\\n        return;\\n      }\\n      self._keyDown(ev);\\n    }, true);\\n\\n    on(this.element, 'keypress', function (ev: KeyboardEvent): void {\\n      if (document.activeElement !== this) {\\n        return;\\n      }\\n      self._keyPress(ev);\\n    }, true);\\n\\n    on(this.element, 'keyup', (ev: KeyboardEvent) => {\\n      if (!wasMondifierKeyOnlyEvent(ev)) {\\n        this.focus();\\n      }\\n    }, true);\\n\\n    on(this.textarea, 'keydown', (ev: KeyboardEvent) => this._keyDown(ev), true);\\n    on(this.textarea, 'keypress', (ev: KeyboardEvent) => this._keyPress(ev), true);\\n    on(this.textarea, 'compositionstart', () => this._compositionHelper.compositionstart());\\n    on(this.textarea, 'compositionupdate', (e: CompositionEvent) => this._compositionHelper.compositionupdate(e));\\n    on(this.textarea, 'compositionend', () => this._compositionHelper.compositionend());\\n    this.on('refresh', () => this._compositionHelper.updateCompositionElements());\\n    this.on('refresh', (data) => this._queueLinkification(data.start, data.end));\\n  }\\n\\n  /**\\n   * Opens the terminal within an element.\\n   *\\n   * @param {HTMLElement} parent The element to create the terminal within.\\n   */\\n  public open(parent: HTMLElement): void {\\n    this._parent = parent || this._parent;\\n\\n    if (!this._parent) {\\n      throw new Error('Terminal requires a parent element.');\\n    }\\n\\n    // Grab global elements\\n    this._context = this._parent.ownerDocument.defaultView;\\n    this._document = this._parent.ownerDocument;\\n\\n    this._screenDprMonitor = new ScreenDprMonitor();\\n    this._screenDprMonitor.setListener(() => this.emit('dprchange', window.devicePixelRatio));\\n\\n    // Create main element container\\n    this.element = this._document.createElement('div');\\n    this.element.dir = 'ltr';   // xterm.css assumes LTR\\n    this.element.classList.add('terminal');\\n    this.element.classList.add('xterm');\\n    this.element.setAttribute('tabindex', '0');\\n    this._parent.appendChild(this.element);\\n\\n    // Performance: Use a document fragment to build the terminal\\n    // viewport and helper elements detached from the DOM\\n    const fragment = document.createDocumentFragment();\\n    this._viewportElement = document.createElement('div');\\n    this._viewportElement.classList.add('xterm-viewport');\\n    fragment.appendChild(this._viewportElement);\\n    this._viewportScrollArea = document.createElement('div');\\n    this._viewportScrollArea.classList.add('xterm-scroll-area');\\n    this._viewportElement.appendChild(this._viewportScrollArea);\\n\\n    this.screenElement = document.createElement('div');\\n    this.screenElement.classList.add('xterm-screen');\\n    // Create the container that will hold helpers like the textarea for\\n    // capturing DOM Events. Then produce the helpers.\\n    this._helperContainer = document.createElement('div');\\n    this._helperContainer.classList.add('xterm-helpers');\\n    this.screenElement.appendChild(this._helperContainer);\\n    fragment.appendChild(this.screenElement);\\n\\n    this._mouseZoneManager = new MouseZoneManager(this);\\n    this.on('scroll', () => this._mouseZoneManager.clearAll());\\n    this.linkifier.attachToDom(this._mouseZoneManager);\\n\\n    this.textarea = document.createElement('textarea');\\n    this.textarea.classList.add('xterm-helper-textarea');\\n    // TODO: New API to set title? This could say \\\"Terminal bash input\\\", etc.\\n    this.textarea.setAttribute('aria-label', Strings.promptLabel);\\n    this.textarea.setAttribute('aria-multiline', 'false');\\n    this.textarea.setAttribute('autocorrect', 'off');\\n    this.textarea.setAttribute('autocapitalize', 'off');\\n    this.textarea.setAttribute('spellcheck', 'false');\\n    this.textarea.tabIndex = 0;\\n    this.textarea.addEventListener('focus', () => this._onTextAreaFocus());\\n    this.textarea.addEventListener('blur', () => this._onTextAreaBlur());\\n    this._helperContainer.appendChild(this.textarea);\\n\\n    this._compositionView = document.createElement('div');\\n    this._compositionView.classList.add('composition-view');\\n    this._compositionHelper = new CompositionHelper(this.textarea, this._compositionView, this);\\n    this._helperContainer.appendChild(this._compositionView);\\n\\n    this.charMeasure = new CharMeasure(document, this._helperContainer);\\n\\n    // Performance: Add viewport and helper elements from the fragment\\n    this.element.appendChild(fragment);\\n\\n    this.renderer = new Renderer(this, this.options.theme);\\n    this.options.theme = null;\\n    this.viewport = new Viewport(this, this._viewportElement, this._viewportScrollArea, this.charMeasure);\\n    this.viewport.onThemeChanged(this.renderer.colorManager.colors);\\n\\n    this.on('cursormove', () => this.renderer.onCursorMove());\\n    this.on('resize', () => this.renderer.onResize(this.cols, this.rows));\\n    this.on('blur', () => this.renderer.onBlur());\\n    this.on('focus', () => this.renderer.onFocus());\\n    this.on('dprchange', () => this.renderer.onWindowResize(window.devicePixelRatio));\\n    // dprchange should handle this case, we need this as well for browsers that don't support the\\n    // matchMedia query.\\n    window.addEventListener('resize', () => this.renderer.onWindowResize(window.devicePixelRatio));\\n    this.charMeasure.on('charsizechanged', () => this.renderer.onResize(this.cols, this.rows));\\n    this.renderer.on('resize', (dimensions) => this.viewport.syncScrollArea());\\n\\n    this.selectionManager = new SelectionManager(this, this.charMeasure);\\n    this.element.addEventListener('mousedown', (e: MouseEvent) => this.selectionManager.onMouseDown(e));\\n    this.selectionManager.on('refresh', data => this.renderer.onSelectionChanged(data.start, data.end));\\n    this.selectionManager.on('newselection', text => {\\n      // If there's a new selection, put it into the textarea, focus and select it\\n      // in order to register it as a selection on the OS. This event is fired\\n      // only on Linux to enable middle click to paste selection.\\n      this.textarea.value = text;\\n      this.textarea.focus();\\n      this.textarea.select();\\n    });\\n    this.on('scroll', () => {\\n      this.viewport.syncScrollArea();\\n      this.selectionManager.refresh();\\n    });\\n    this._viewportElement.addEventListener('scroll', () => this.selectionManager.refresh());\\n\\n    this.mouseHelper = new MouseHelper(this.renderer);\\n\\n    if (this.options.screenReaderMode) {\\n      // Note that this must be done *after* the renderer is created in order to\\n      // ensure the correct order of the dprchange event\\n      this._accessibilityManager = new AccessibilityManager(this);\\n    }\\n\\n    // Measure the character size\\n    this.charMeasure.measure(this.options);\\n\\n    // Setup loop that draws to screen\\n    this.refresh(0, this.rows - 1);\\n\\n    // Initialize global actions that need to be taken on the document.\\n    this._initGlobal();\\n\\n    // Listen for mouse events and translate\\n    // them into terminal mouse protocols.\\n    this.bindMouse();\\n\\n  }\\n\\n  /**\\n   * Sets the theme on the renderer. The renderer must have been initialized.\\n   * @param theme The theme to ste.\\n   */\\n  private _setTheme(theme: ITheme): void {\\n    const colors = this.renderer.setTheme(theme);\\n    if (this.viewport) {\\n      this.viewport.onThemeChanged(colors);\\n    }\\n  }\\n\\n  /**\\n   * Apply the provided addon on the `Terminal` class.\\n   * @param addon The addon to apply.\\n   */\\n  public static applyAddon(addon: any): void {\\n    addon.apply(Terminal);\\n  }\\n\\n  /**\\n   * XTerm mouse events\\n   * http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#Mouse%20Tracking\\n   * To better understand these\\n   * the xterm code is very helpful:\\n   * Relevant files:\\n   *   button.c, charproc.c, misc.c\\n   * Relevant functions in xterm/button.c:\\n   *   BtnCode, EmitButtonCode, EditorButton, SendMousePosition\\n   */\\n  public bindMouse(): void {\\n    const el = this.element;\\n    const self = this;\\n    let pressed = 32;\\n\\n    // mouseup, mousedown, wheel\\n    // left click: ^[[M 3<^[[M#3<\\n    // wheel up: ^[[M`3>\\n    function sendButton(ev: MouseEvent | WheelEvent): void {\\n      let button;\\n      let pos;\\n\\n      // get the xterm-style button\\n      button = getButton(ev);\\n\\n      // get mouse coordinates\\n      pos = self.mouseHelper.getRawByteCoords(ev, self.screenElement, self.charMeasure, self.options.lineHeight, self.cols, self.rows);\\n      if (!pos) return;\\n\\n      sendEvent(button, pos);\\n\\n      switch ((<any>ev).overrideType || ev.type) {\\n        case 'mousedown':\\n          pressed = button;\\n          break;\\n        case 'mouseup':\\n          // keep it at the left\\n          // button, just in case.\\n          pressed = 32;\\n          break;\\n        case 'wheel':\\n          // nothing. don't\\n          // interfere with\\n          // `pressed`.\\n          break;\\n      }\\n    }\\n\\n    // motion example of a left click:\\n    // ^[[M 3<^[[M@4<^[[M@5<^[[M@6<^[[M@7<^[[M#7<\\n    function sendMove(ev: MouseEvent): void {\\n      let button = pressed;\\n      let pos = self.mouseHelper.getRawByteCoords(ev, self.screenElement, self.charMeasure, self.options.lineHeight, self.cols, self.rows);\\n      if (!pos) return;\\n\\n      // buttons marked as motions\\n      // are incremented by 32\\n      button += 32;\\n\\n      sendEvent(button, pos);\\n    }\\n\\n    // encode button and\\n    // position to characters\\n    function encode(data: number[], ch: number): void {\\n      if (!self.utfMouse) {\\n        if (ch === 255) {\\n          data.push(0);\\n          return;\\n        }\\n        if (ch > 127) ch = 127;\\n        data.push(ch);\\n      } else {\\n        if (ch === 2047) {\\n          data.push(0);\\n          return;\\n        }\\n        if (ch < 127) {\\n          data.push(ch);\\n        } else {\\n          if (ch > 2047) ch = 2047;\\n          data.push(0xC0 | (ch >> 6));\\n          data.push(0x80 | (ch & 0x3F));\\n        }\\n      }\\n    }\\n\\n    // send a mouse event:\\n    // regular/utf8: ^[[M Cb Cx Cy\\n    // urxvt: ^[[ Cb ; Cx ; Cy M\\n    // sgr: ^[[ Cb ; Cx ; Cy M/m\\n    // vt300: ^[[ 24(1/3/5)~ [ Cx , Cy ] \\\\r\\n    // locator: CSI P e ; P b ; P r ; P c ; P p & w\\n    function sendEvent(button: number, pos: {x: number, y: number}): void {\\n      // self.emit('mouse', {\\n      //   x: pos.x - 32,\\n      //   y: pos.x - 32,\\n      //   button: button\\n      // });\\n\\n      if (self._vt300Mouse) {\\n        // NOTE: Unstable.\\n        // http://www.vt100.net/docs/vt3xx-gp/chapter15.html\\n        button &= 3;\\n        pos.x -= 32;\\n        pos.y -= 32;\\n        let data = C0.ESC + '[24';\\n        if (button === 0) data += '1';\\n        else if (button === 1) data += '3';\\n        else if (button === 2) data += '5';\\n        else if (button === 3) return;\\n        else data += '0';\\n        data += '~[' + pos.x + ',' + pos.y + ']\\\\r';\\n        self.send(data);\\n        return;\\n      }\\n\\n      if (self._decLocator) {\\n        // NOTE: Unstable.\\n        button &= 3;\\n        pos.x -= 32;\\n        pos.y -= 32;\\n        if (button === 0) button = 2;\\n        else if (button === 1) button = 4;\\n        else if (button === 2) button = 6;\\n        else if (button === 3) button = 3;\\n        self.send(C0.ESC + '['\\n                  + button\\n                  + ';'\\n                  + (button === 3 ? 4 : 0)\\n                  + ';'\\n                  + pos.y\\n                  + ';'\\n                  + pos.x\\n                  + ';'\\n                  // Not sure what page is meant to be\\n                  + (<any>pos).page || 0\\n                  + '&w');\\n        return;\\n      }\\n\\n      if (self.urxvtMouse) {\\n        pos.x -= 32;\\n        pos.y -= 32;\\n        pos.x++;\\n        pos.y++;\\n        self.send(C0.ESC + '[' + button + ';' + pos.x + ';' + pos.y + 'M');\\n        return;\\n      }\\n\\n      if (self.sgrMouse) {\\n        pos.x -= 32;\\n        pos.y -= 32;\\n        self.send(C0.ESC + '[<'\\n                  + (((button & 3) === 3 ? button & ~3 : button) - 32)\\n                  + ';'\\n                  + pos.x\\n                  + ';'\\n                  + pos.y\\n                  + ((button & 3) === 3 ? 'm' : 'M'));\\n        return;\\n      }\\n\\n      let data: number[] = [];\\n\\n      encode(data, button);\\n      encode(data, pos.x);\\n      encode(data, pos.y);\\n\\n      self.send(C0.ESC + '[M' + String.fromCharCode.apply(String, data));\\n    }\\n\\n    function getButton(ev: MouseEvent): number {\\n      let button;\\n      let shift;\\n      let meta;\\n      let ctrl;\\n      let mod;\\n\\n      // two low bits:\\n      // 0 = left\\n      // 1 = middle\\n      // 2 = right\\n      // 3 = release\\n      // wheel up/down:\\n      // 1, and 2 - with 64 added\\n      switch ((<any>ev).overrideType || ev.type) {\\n        case 'mousedown':\\n          button = ev.button != null\\n            ? +ev.button\\n          : ev.which != null\\n            ? ev.which - 1\\n          : null;\\n\\n          if (Browser.isMSIE) {\\n            button = button === 1 ? 0 : button === 4 ? 1 : button;\\n          }\\n          break;\\n        case 'mouseup':\\n          button = 3;\\n          break;\\n        case 'DOMMouseScroll':\\n          button = ev.detail < 0\\n            ? 64\\n          : 65;\\n          break;\\n        case 'wheel':\\n          button = (<WheelEvent>ev).wheelDeltaY > 0\\n            ? 64\\n          : 65;\\n          break;\\n      }\\n\\n      // next three bits are the modifiers:\\n      // 4 = shift, 8 = meta, 16 = control\\n      shift = ev.shiftKey ? 4 : 0;\\n      meta = ev.metaKey ? 8 : 0;\\n      ctrl = ev.ctrlKey ? 16 : 0;\\n      mod = shift | meta | ctrl;\\n\\n      // no mods\\n      if (self.vt200Mouse) {\\n        // ctrl only\\n        mod &= ctrl;\\n      } else if (!self.normalMouse) {\\n        mod = 0;\\n      }\\n\\n      // increment to SP\\n      button = (32 + (mod << 2)) + button;\\n\\n      return button;\\n    }\\n\\n    on(el, 'mousedown', (ev: MouseEvent) => {\\n\\n      // Prevent the focus on the textarea from getting lost\\n      // and make sure we get focused on mousedown\\n      ev.preventDefault();\\n      this.focus();\\n\\n      // Don't send the mouse button to the pty if mouse events are disabled or\\n      // if the selection manager is having selection forced (ie. a modifier is\\n      // held).\\n      if (!this.mouseEvents || this.selectionManager.shouldForceSelection(ev)) {\\n        return;\\n      }\\n\\n      // send the button\\n      sendButton(ev);\\n\\n      // fix for odd bug\\n      // if (this.vt200Mouse && !this.normalMouse) {\\n      if (this.vt200Mouse) {\\n        (<any>ev).overrideType = 'mouseup';\\n        sendButton(ev);\\n        return this.cancel(ev);\\n      }\\n\\n      // bind events\\n      if (this.normalMouse) on(this._document, 'mousemove', sendMove);\\n\\n      // x10 compatibility mode can't send button releases\\n      if (!this.x10Mouse) {\\n        const handler = (ev: MouseEvent) => {\\n          sendButton(ev);\\n          // TODO: Seems dangerous calling this on document?\\n          if (this.normalMouse) off(this._document, 'mousemove', sendMove);\\n          off(this._document, 'mouseup', handler);\\n          return this.cancel(ev);\\n        };\\n        // TODO: Seems dangerous calling this on document?\\n        on(this._document, 'mouseup', handler);\\n      }\\n\\n      return this.cancel(ev);\\n    });\\n\\n    // if (this.normalMouse) {\\n    //  on(this.document, 'mousemove', sendMove);\\n    // }\\n\\n    on(el, 'wheel', (ev: WheelEvent) => {\\n      if (!this.mouseEvents) {\\n        // Convert wheel events into up/down events when the buffer does not have scrollback, this\\n        // enables scrolling in apps hosted in the alt buffer such as vim or tmux.\\n        if (!this.buffer.hasScrollback) {\\n          const amount = this.viewport.getLinesScrolled(ev);\\n\\n          // Do nothing if there's no vertical scroll\\n          if (amount === 0) {\\n            return;\\n          }\\n\\n          // Construct and send sequences\\n          const sequence = C0.ESC + (this.applicationCursor ? 'O' : '[') + ( ev.deltaY < 0 ? 'A' : 'B');\\n          let data = '';\\n          for (let i = 0; i < Math.abs(amount); i++) {\\n            data += sequence;\\n          }\\n          this.send(data);\\n        }\\n        return;\\n      }\\n      if (this.x10Mouse || this._vt300Mouse || this._decLocator) return;\\n      sendButton(ev);\\n      ev.preventDefault();\\n    });\\n\\n    // allow wheel scrolling in\\n    // the shell for example\\n    on(el, 'wheel', (ev: WheelEvent) => {\\n      if (this.mouseEvents) return;\\n      this.viewport.onWheel(ev);\\n      return this.cancel(ev);\\n    });\\n\\n    on(el, 'touchstart', (ev: TouchEvent) => {\\n      if (this.mouseEvents) return;\\n      this.viewport.onTouchStart(ev);\\n      return this.cancel(ev);\\n    });\\n\\n    on(el, 'touchmove', (ev: TouchEvent) => {\\n      if (this.mouseEvents) return;\\n      this.viewport.onTouchMove(ev);\\n      return this.cancel(ev);\\n    });\\n  }\\n\\n  /**\\n   * Destroys the terminal.\\n   */\\n  public destroy(): void {\\n    super.destroy();\\n    this.handler = () => {};\\n    this.write = () => {};\\n    if (this.element && this.element.parentNode) {\\n      this.element.parentNode.removeChild(this.element);\\n    }\\n    // this.emit('close');\\n  }\\n\\n  /**\\n   * Tells the renderer to refresh terminal content between two rows (inclusive) at the next\\n   * opportunity.\\n   * @param {number} start The row to start from (between 0 and this.rows - 1).\\n   * @param {number} end The row to end at (between start and this.rows - 1).\\n   */\\n  public refresh(start: number, end: number): void {\\n    if (this.renderer) {\\n      this.renderer.refreshRows(start, end);\\n    }\\n  }\\n\\n  /**\\n   * Queues linkification for the specified rows.\\n   * @param {number} start The row to start from (between 0 and this.rows - 1).\\n   * @param {number} end The row to end at (between start and this.rows - 1).\\n   */\\n  private _queueLinkification(start: number, end: number): void {\\n    if (this.linkifier) {\\n      this.linkifier.linkifyRows(start, end);\\n    }\\n  }\\n\\n  /**\\n   * Display the cursor element\\n   */\\n  public showCursor(): void {\\n    if (!this.cursorState) {\\n      this.cursorState = 1;\\n      this.refresh(this.buffer.y, this.buffer.y);\\n    }\\n  }\\n\\n  /**\\n   * Scroll the terminal down 1 row, creating a blank line.\\n   * @param isWrapped Whether the new line is wrapped from the previous line.\\n   */\\n  public scroll(isWrapped?: boolean): void {\\n    const newLine = this.blankLine(undefined, isWrapped);\\n    const topRow = this.buffer.ybase + this.buffer.scrollTop;\\n    let bottomRow = this.buffer.ybase + this.buffer.scrollBottom;\\n\\n    if (this.buffer.scrollTop === 0) {\\n      // Determine whether the buffer is going to be trimmed after insertion.\\n      const willBufferBeTrimmed = this.buffer.lines.length === this.buffer.lines.maxLength;\\n\\n      // Insert the line using the fastest method\\n      if (bottomRow === this.buffer.lines.length - 1) {\\n        this.buffer.lines.push(newLine);\\n      } else {\\n        this.buffer.lines.splice(bottomRow + 1, 0, newLine);\\n      }\\n\\n      // Only adjust ybase and ydisp when the buffer is not trimmed\\n      if (!willBufferBeTrimmed) {\\n        this.buffer.ybase++;\\n        // Only scroll the ydisp with ybase if the user has not scrolled up\\n        if (!this._userScrolling) {\\n          this.buffer.ydisp++;\\n        }\\n      } else {\\n        // When the buffer is full and the user has scrolled up, keep the text\\n        // stable unless ydisp is right at the top\\n        if (this._userScrolling) {\\n          this.buffer.ydisp = Math.max(this.buffer.ydisp - 1, 0);\\n        }\\n      }\\n    } else {\\n      // scrollTop is non-zero which means no line will be going to the\\n      // scrollback, instead we can just shift them in-place.\\n      const scrollRegionHeight = bottomRow - topRow + 1/*as it's zero-based*/;\\n      this.buffer.lines.shiftElements(topRow + 1, scrollRegionHeight - 1, -1);\\n      this.buffer.lines.set(bottomRow, newLine);\\n    }\\n\\n    // Move the viewport to the bottom of the buffer unless the user is\\n    // scrolling.\\n    if (!this._userScrolling) {\\n      this.buffer.ydisp = this.buffer.ybase;\\n    }\\n\\n    // Flag rows that need updating\\n    this.updateRange(this.buffer.scrollTop);\\n    this.updateRange(this.buffer.scrollBottom);\\n\\n    /**\\n     * This event is emitted whenever the terminal is scrolled.\\n     * The one parameter passed is the new y display position.\\n     *\\n     * @event scroll\\n     */\\n    this.emit('scroll', this.buffer.ydisp);\\n  }\\n\\n  /**\\n   * Scroll the display of the terminal\\n   * @param {number} disp The number of lines to scroll down (negative scroll up).\\n   * @param {boolean} suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\\n   * viewport originally.\\n   */\\n  public scrollLines(disp: number, suppressScrollEvent?: boolean): void {\\n    if (disp < 0) {\\n      if (this.buffer.ydisp === 0) {\\n        return;\\n      }\\n      this._userScrolling = true;\\n    } else if (disp + this.buffer.ydisp >= this.buffer.ybase) {\\n      this._userScrolling = false;\\n    }\\n\\n    const oldYdisp = this.buffer.ydisp;\\n    this.buffer.ydisp = Math.max(Math.min(this.buffer.ydisp + disp, this.buffer.ybase), 0);\\n\\n    // No change occurred, don't trigger scroll/refresh\\n    if (oldYdisp === this.buffer.ydisp) {\\n      return;\\n    }\\n\\n    if (!suppressScrollEvent) {\\n      this.emit('scroll', this.buffer.ydisp);\\n    }\\n\\n    this.refresh(0, this.rows - 1);\\n  }\\n\\n  /**\\n   * Scroll the display of the terminal by a number of pages.\\n   * @param {number} pageCount The number of pages to scroll (negative scrolls up).\\n   */\\n  public scrollPages(pageCount: number): void {\\n    this.scrollLines(pageCount * (this.rows - 1));\\n  }\\n\\n  /**\\n   * Scrolls the display of the terminal to the top.\\n   */\\n  public scrollToTop(): void {\\n    this.scrollLines(-this.buffer.ydisp);\\n  }\\n\\n  /**\\n   * Scrolls the display of the terminal to the bottom.\\n   */\\n  public scrollToBottom(): void {\\n    this.scrollLines(this.buffer.ybase - this.buffer.ydisp);\\n  }\\n\\n  public scrollToLine(line: number): void {\\n    const scrollAmount = line - this.buffer.ydisp;\\n    if (scrollAmount !== 0) {\\n      this.scrollLines(scrollAmount);\\n    }\\n  }\\n\\n  /**\\n   * Writes text to the terminal.\\n   * @param {string} data The text to write to the terminal.\\n   */\\n  public write(data: string): void {\\n    // Ignore falsy data values (including the empty string)\\n    if (!data) {\\n      return;\\n    }\\n\\n    this.writeBuffer.push(data);\\n\\n    // Send XOFF to pause the pty process if the write buffer becomes too large so\\n    // xterm.js can catch up before more data is sent. This is necessary in order\\n    // to keep signals such as ^C responsive.\\n    if (this.options.useFlowControl && !this._xoffSentToCatchUp && this.writeBuffer.length >= WRITE_BUFFER_PAUSE_THRESHOLD) {\\n      // XOFF - stop pty pipe\\n      // XON will be triggered by emulator before processing data chunk\\n      this.send(C0.DC3);\\n      this._xoffSentToCatchUp = true;\\n    }\\n\\n    if (!this._writeInProgress && this.writeBuffer.length > 0) {\\n      // Kick off a write which will write all data in sequence recursively\\n      this._writeInProgress = true;\\n      // Kick off an async innerWrite so more writes can come in while processing data\\n      setTimeout(() => {\\n        this._innerWrite();\\n      });\\n    }\\n  }\\n\\n  private _innerWrite(): void {\\n    const writeBatch = this.writeBuffer.splice(0, WRITE_BATCH_SIZE);\\n    while (writeBatch.length > 0) {\\n      const data = writeBatch.shift();\\n\\n      // If XOFF was sent in order to catch up with the pty process, resume it if\\n      // the writeBuffer is empty to allow more data to come in.\\n      if (this._xoffSentToCatchUp && writeBatch.length === 0 && this.writeBuffer.length === 0) {\\n        this.send(C0.DC1);\\n        this._xoffSentToCatchUp = false;\\n      }\\n\\n      this._refreshStart = this.buffer.y;\\n      this._refreshEnd = this.buffer.y;\\n\\n      // HACK: Set the parser state based on it's state at the time of return.\\n      // This works around the bug #662 which saw the parser state reset in the\\n      // middle of parsing escape sequence in two chunks. For some reason the\\n      // state of the parser resets to 0 after exiting parser.parse. This change\\n      // just sets the state back based on the correct return statement.\\n      const state = this._parser.parse(data);\\n      this._parser.setState(state);\\n\\n      this.updateRange(this.buffer.y);\\n      this.refresh(this._refreshStart, this._refreshEnd);\\n    }\\n    if (this.writeBuffer.length > 0) {\\n      // Allow renderer to catch up before processing the next batch\\n      setTimeout(() => this._innerWrite(), 0);\\n    } else {\\n      this._writeInProgress = false;\\n    }\\n  }\\n\\n  /**\\n   * Writes text to the terminal, followed by a break line character (\\\\n).\\n   * @param {string} data The text to write to the terminal.\\n   */\\n  public writeln(data: string): void {\\n    this.write(data + '\\\\r\\\\n');\\n  }\\n\\n  /**\\n   * Attaches a custom key event handler which is run before keys are processed,\\n   * giving consumers of xterm.js ultimate control as to what keys should be\\n   * processed by the terminal and what keys should not.\\n   * @param customKeyEventHandler The custom KeyboardEvent handler to attach.\\n   * This is a function that takes a KeyboardEvent, allowing consumers to stop\\n   * propogation and/or prevent the default action. The function returns whether\\n   * the event should be processed by xterm.js.\\n   */\\n  public attachCustomKeyEventHandler(customKeyEventHandler: CustomKeyEventHandler): void {\\n    this._customKeyEventHandler = customKeyEventHandler;\\n  }\\n\\n  /**\\n   * Registers a link matcher, allowing custom link patterns to be matched and\\n   * handled.\\n   * @param regex The regular expression to search for, specifically\\n   * this searches the textContent of the rows. You will want to use \\\\s to match\\n   * a space ' ' character for example.\\n   * @param handler The callback when the link is called.\\n   * @param options Options for the link matcher.\\n   * @return The ID of the new matcher, this can be used to deregister.\\n   */\\n  public registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options?: ILinkMatcherOptions): number {\\n    const matcherId = this.linkifier.registerLinkMatcher(regex, handler, options);\\n    this.refresh(0, this.rows - 1);\\n    return matcherId;\\n  }\\n\\n  /**\\n   * Deregisters a link matcher if it has been registered.\\n   * @param matcherId The link matcher's ID (returned after register)\\n   */\\n  public deregisterLinkMatcher(matcherId: number): void {\\n    if (this.linkifier.deregisterLinkMatcher(matcherId)) {\\n      this.refresh(0, this.rows - 1);\\n    }\\n  }\\n\\n  public get markers(): IMarker[] {\\n    return this.buffer.markers;\\n  }\\n\\n  public addMarker(cursorYOffset: number): IMarker {\\n    // Disallow markers on the alt buffer\\n    if (this.buffer !== this.buffers.normal) {\\n      return;\\n    }\\n\\n    return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + cursorYOffset);\\n  }\\n\\n  /**\\n   * Gets whether the terminal has an active selection.\\n   */\\n  public hasSelection(): boolean {\\n    return this.selectionManager ? this.selectionManager.hasSelection : false;\\n  }\\n\\n  /**\\n   * Gets the terminal's current selection, this is useful for implementing copy\\n   * behavior outside of xterm.js.\\n   */\\n  public getSelection(): string {\\n    return this.selectionManager ? this.selectionManager.selectionText : '';\\n  }\\n\\n  /**\\n   * Clears the current terminal selection.\\n   */\\n  public clearSelection(): void {\\n    if (this.selectionManager) {\\n      this.selectionManager.clearSelection();\\n    }\\n  }\\n\\n  /**\\n   * Selects all text within the terminal.\\n   */\\n  public selectAll(): void {\\n    if (this.selectionManager) {\\n      this.selectionManager.selectAll();\\n    }\\n  }\\n\\n  public selectLines(start: number, end: number): void {\\n    if (this.selectionManager) {\\n      this.selectionManager.selectLines(start, end);\\n    }\\n  }\\n\\n  /**\\n   * Handle a keydown event\\n   * Key Resources:\\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\\n   * @param {KeyboardEvent} ev The keydown event to be handled.\\n   */\\n  protected _keyDown(ev: KeyboardEvent): boolean {\\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\\n      return false;\\n    }\\n\\n    if (!this._compositionHelper.keydown(ev)) {\\n      if (this.buffer.ybase !== this.buffer.ydisp) {\\n        this.scrollToBottom();\\n      }\\n      return false;\\n    }\\n\\n    const result = this._evaluateKeyEscapeSequence(ev);\\n\\n    // if (result.key === C0.DC3) { // XOFF\\n    //   this._writeStopped = true;\\n    // } else if (result.key === C0.DC1) { // XON\\n    //   this._writeStopped = false;\\n    // }\\n\\n    if (result.scrollLines) {\\n      this.scrollLines(result.scrollLines);\\n      return this.cancel(ev, true);\\n    }\\n\\n    if (this._isThirdLevelShift(this.browser, ev)) {\\n      return true;\\n    }\\n\\n    if (result.cancel) {\\n      // The event is canceled at the end already, is this necessary?\\n      this.cancel(ev, true);\\n    }\\n\\n    if (!result.key) {\\n      return true;\\n    }\\n\\n    this.emit('keydown', ev);\\n    this.emit('key', result.key, ev);\\n    this.showCursor();\\n    this.handler(result.key);\\n\\n    return this.cancel(ev, true);\\n  }\\n\\n  private _isThirdLevelShift(browser: IBrowser, ev: KeyboardEvent): boolean {\\n    const thirdLevelKey =\\n        (browser.isMac && !this.options.macOptionIsMeta && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\\n        (browser.isMSWindows && ev.altKey && ev.ctrlKey && !ev.metaKey);\\n\\n    if (ev.type === 'keypress') {\\n      return thirdLevelKey;\\n    }\\n\\n    // Don't invoke for arrows, pageDown, home, backspace, etc. (on non-keypress events)\\n    return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\\n  }\\n\\n  /**\\n   * Returns an object that determines how a KeyboardEvent should be handled. The key of the\\n   * returned value is the new key code to pass to the PTY.\\n   *\\n   * Reference: http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\\n   * @param ev The keyboard event to be translated to key escape sequence.\\n   */\\n  protected _evaluateKeyEscapeSequence(ev: KeyboardEvent): {cancel: boolean, key: string, scrollLines: number} {\\n    const result: {cancel: boolean, key: string, scrollLines: number} = {\\n      // Whether to cancel event propogation (NOTE: this may not be needed since the event is\\n      // canceled at the end of keyDown\\n      cancel: false,\\n      // The new key even to emit\\n      key: undefined,\\n      // The number of characters to scroll, if this is defined it will cancel the event\\n      scrollLines: undefined\\n    };\\n    const modifiers = (ev.shiftKey ? 1 : 0) | (ev.altKey ? 2 : 0) | (ev.ctrlKey ? 4 : 0) | (ev.metaKey ? 8 : 0);\\n    switch (ev.keyCode) {\\n      case 0:\\n        if (ev.key === 'UIKeyInputUpArrow') {\\n          if (this.applicationCursor) {\\n            result.key = C0.ESC + 'OA';\\n          } else {\\n            result.key = C0.ESC + '[A';\\n          }\\n        }\\n        else if (ev.key === 'UIKeyInputLeftArrow') {\\n          if (this.applicationCursor) {\\n            result.key = C0.ESC + 'OD';\\n          } else {\\n            result.key = C0.ESC + '[D';\\n          }\\n        }\\n        else if (ev.key === 'UIKeyInputRightArrow') {\\n          if (this.applicationCursor) {\\n            result.key = C0.ESC + 'OC';\\n          } else {\\n            result.key = C0.ESC + '[C';\\n          }\\n        }\\n        else if (ev.key === 'UIKeyInputDownArrow') {\\n          if (this.applicationCursor) {\\n            result.key = C0.ESC + 'OB';\\n          } else {\\n            result.key = C0.ESC + '[B';\\n          }\\n        }\\n        break;\\n      case 8:\\n        // backspace\\n        if (ev.shiftKey) {\\n          result.key = C0.BS; // ^H\\n          break;\\n        } else if (ev.altKey) {\\n          result.key = C0.ESC + C0.DEL; // \\\\e ^?\\n          break;\\n        }\\n        result.key = C0.DEL; // ^?\\n        break;\\n      case 9:\\n        // tab\\n        if (ev.shiftKey) {\\n          result.key = C0.ESC + '[Z';\\n          break;\\n        }\\n        result.key = C0.HT;\\n        result.cancel = true;\\n        break;\\n      case 13:\\n        // return/enter\\n        result.key = C0.CR;\\n        result.cancel = true;\\n        break;\\n      case 27:\\n        // escape\\n        result.key = C0.ESC;\\n        result.cancel = true;\\n        break;\\n      case 37:\\n        // left-arrow\\n        if (modifiers) {\\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'D';\\n          // HACK: Make Alt + left-arrow behave like Ctrl + left-arrow: move one word backwards\\n          // http://unix.stackexchange.com/a/108106\\n          // macOS uses different escape sequences than linux\\n          if (result.key === C0.ESC + '[1;3D') {\\n            result.key = (this.browser.isMac) ? C0.ESC + 'b' : C0.ESC + '[1;5D';\\n          }\\n        } else if (this.applicationCursor) {\\n          result.key = C0.ESC + 'OD';\\n        } else {\\n          result.key = C0.ESC + '[D';\\n        }\\n        break;\\n      case 39:\\n        // right-arrow\\n        if (modifiers) {\\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'C';\\n          // HACK: Make Alt + right-arrow behave like Ctrl + right-arrow: move one word forward\\n          // http://unix.stackexchange.com/a/108106\\n          // macOS uses different escape sequences than linux\\n          if (result.key === C0.ESC + '[1;3C') {\\n            result.key = (this.browser.isMac) ? C0.ESC + 'f' : C0.ESC + '[1;5C';\\n          }\\n        } else if (this.applicationCursor) {\\n          result.key = C0.ESC + 'OC';\\n        } else {\\n          result.key = C0.ESC + '[C';\\n        }\\n        break;\\n      case 38:\\n        // up-arrow\\n        if (modifiers) {\\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'A';\\n          // HACK: Make Alt + up-arrow behave like Ctrl + up-arrow\\n          // http://unix.stackexchange.com/a/108106\\n          if (result.key === C0.ESC + '[1;3A') {\\n            result.key = C0.ESC + '[1;5A';\\n          }\\n        } else if (this.applicationCursor) {\\n          result.key = C0.ESC + 'OA';\\n        } else {\\n          result.key = C0.ESC + '[A';\\n        }\\n        break;\\n      case 40:\\n        // down-arrow\\n        if (modifiers) {\\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'B';\\n          // HACK: Make Alt + down-arrow behave like Ctrl + down-arrow\\n          // http://unix.stackexchange.com/a/108106\\n          if (result.key === C0.ESC + '[1;3B') {\\n            result.key = C0.ESC + '[1;5B';\\n          }\\n        } else if (this.applicationCursor) {\\n          result.key = C0.ESC + 'OB';\\n        } else {\\n          result.key = C0.ESC + '[B';\\n        }\\n        break;\\n      case 45:\\n        // insert\\n        if (!ev.shiftKey && !ev.ctrlKey) {\\n          // <Ctrl> or <Shift> + <Insert> are used to\\n          // copy-paste on some systems.\\n          result.key = C0.ESC + '[2~';\\n        }\\n        break;\\n      case 46:\\n        // delete\\n        if (modifiers) {\\n          result.key = C0.ESC + '[3;' + (modifiers + 1) + '~';\\n        } else {\\n          result.key = C0.ESC + '[3~';\\n        }\\n        break;\\n      case 36:\\n        // home\\n        if (modifiers) {\\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'H';\\n        } else if (this.applicationCursor) {\\n          result.key = C0.ESC + 'OH';\\n        } else {\\n          result.key = C0.ESC + '[H';\\n        }\\n        break;\\n      case 35:\\n        // end\\n        if (modifiers) {\\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'F';\\n        } else if (this.applicationCursor) {\\n          result.key = C0.ESC + 'OF';\\n        } else {\\n          result.key = C0.ESC + '[F';\\n        }\\n        break;\\n      case 33:\\n        // page up\\n        if (ev.shiftKey) {\\n          result.scrollLines = -(this.rows - 1);\\n        } else {\\n          result.key = C0.ESC + '[5~';\\n        }\\n        break;\\n      case 34:\\n        // page down\\n        if (ev.shiftKey) {\\n          result.scrollLines = this.rows - 1;\\n        } else {\\n          result.key = C0.ESC + '[6~';\\n        }\\n        break;\\n      case 112:\\n        // F1-F12\\n        if (modifiers) {\\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'P';\\n        } else {\\n          result.key = C0.ESC + 'OP';\\n        }\\n        break;\\n      case 113:\\n        if (modifiers) {\\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'Q';\\n        } else {\\n          result.key = C0.ESC + 'OQ';\\n        }\\n        break;\\n      case 114:\\n        if (modifiers) {\\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'R';\\n        } else {\\n          result.key = C0.ESC + 'OR';\\n        }\\n        break;\\n      case 115:\\n        if (modifiers) {\\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'S';\\n        } else {\\n          result.key = C0.ESC + 'OS';\\n        }\\n        break;\\n      case 116:\\n        if (modifiers) {\\n          result.key = C0.ESC + '[15;' + (modifiers + 1) + '~';\\n        } else {\\n          result.key = C0.ESC + '[15~';\\n        }\\n        break;\\n      case 117:\\n        if (modifiers) {\\n          result.key = C0.ESC + '[17;' + (modifiers + 1) + '~';\\n        } else {\\n          result.key = C0.ESC + '[17~';\\n        }\\n        break;\\n      case 118:\\n        if (modifiers) {\\n          result.key = C0.ESC + '[18;' + (modifiers + 1) + '~';\\n        } else {\\n          result.key = C0.ESC + '[18~';\\n        }\\n        break;\\n      case 119:\\n        if (modifiers) {\\n          result.key = C0.ESC + '[19;' + (modifiers + 1) + '~';\\n        } else {\\n          result.key = C0.ESC + '[19~';\\n        }\\n        break;\\n      case 120:\\n        if (modifiers) {\\n          result.key = C0.ESC + '[20;' + (modifiers + 1) + '~';\\n        } else {\\n          result.key = C0.ESC + '[20~';\\n        }\\n        break;\\n      case 121:\\n        if (modifiers) {\\n          result.key = C0.ESC + '[21;' + (modifiers + 1) + '~';\\n        } else {\\n          result.key = C0.ESC + '[21~';\\n        }\\n        break;\\n      case 122:\\n        if (modifiers) {\\n          result.key = C0.ESC + '[23;' + (modifiers + 1) + '~';\\n        } else {\\n          result.key = C0.ESC + '[23~';\\n        }\\n        break;\\n      case 123:\\n        if (modifiers) {\\n          result.key = C0.ESC + '[24;' + (modifiers + 1) + '~';\\n        } else {\\n          result.key = C0.ESC + '[24~';\\n        }\\n        break;\\n      default:\\n        // a-z and space\\n        if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\\n          if (ev.keyCode >= 65 && ev.keyCode <= 90) {\\n            result.key = String.fromCharCode(ev.keyCode - 64);\\n          } else if (ev.keyCode === 32) {\\n            // NUL\\n            result.key = String.fromCharCode(0);\\n          } else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\\n            // escape, file sep, group sep, record sep, unit sep\\n            result.key = String.fromCharCode(ev.keyCode - 51 + 27);\\n          } else if (ev.keyCode === 56) {\\n            // delete\\n            result.key = String.fromCharCode(127);\\n          } else if (ev.keyCode === 219) {\\n            // ^[ - Control Sequence Introducer (CSI)\\n            result.key = String.fromCharCode(27);\\n          } else if (ev.keyCode === 220) {\\n            // ^\\\\ - String Terminator (ST)\\n            result.key = String.fromCharCode(28);\\n          } else if (ev.keyCode === 221) {\\n            // ^] - Operating System Command (OSC)\\n            result.key = String.fromCharCode(29);\\n          }\\n        } else if ((!this.browser.isMac || this.options.macOptionIsMeta) && ev.altKey && !ev.metaKey) {\\n          // On macOS this is a third level shift when !macOptionIsMeta. Use <Esc> instead.\\n          const keyMapping = KEYCODE_KEY_MAPPINGS[ev.keyCode];\\n          const key = keyMapping && keyMapping[!ev.shiftKey ? 0 : 1];\\n          if (key) {\\n            result.key = C0.ESC + key;\\n          } else if (ev.keyCode >= 65 && ev.keyCode <= 90) {\\n            const keyCode = ev.ctrlKey ? ev.keyCode - 64 : ev.keyCode + 32;\\n            result.key = C0.ESC + String.fromCharCode(keyCode);\\n          }\\n        } else if (this.browser.isMac && !ev.altKey && !ev.ctrlKey && ev.metaKey) {\\n          if (ev.keyCode === 65) { // cmd + a\\n            this.selectAll();\\n          }\\n        }\\n        break;\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * Set the G level of the terminal\\n   * @param g\\n   */\\n  public setgLevel(g: number): void {\\n    this.glevel = g;\\n    this.charset = this.charsets[g];\\n  }\\n\\n  /**\\n   * Set the charset for the given G level of the terminal\\n   * @param g\\n   * @param charset\\n   */\\n  public setgCharset(g: number, charset: ICharset): void {\\n    this.charsets[g] = charset;\\n    if (this.glevel === g) {\\n      this.charset = charset;\\n    }\\n  }\\n\\n  /**\\n   * Handle a keypress event.\\n   * Key Resources:\\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\\n   * @param {KeyboardEvent} ev The keypress event to be handled.\\n   */\\n  protected _keyPress(ev: KeyboardEvent): boolean {\\n    let key;\\n\\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\\n      return false;\\n    }\\n\\n    this.cancel(ev);\\n\\n    if (ev.charCode) {\\n      key = ev.charCode;\\n    } else if (ev.which == null) {\\n      key = ev.keyCode;\\n    } else if (ev.which !== 0 && ev.charCode !== 0) {\\n      key = ev.which;\\n    } else {\\n      return false;\\n    }\\n\\n    if (!key || (\\n      (ev.altKey || ev.ctrlKey || ev.metaKey) && !this._isThirdLevelShift(this.browser, ev)\\n    )) {\\n      return false;\\n    }\\n\\n    key = String.fromCharCode(key);\\n\\n    this.emit('keypress', key, ev);\\n    this.emit('key', key, ev);\\n    this.showCursor();\\n    this.handler(key);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * Send data for handling to the terminal\\n   * @param {string} data\\n   */\\n  public send(data: string): void {\\n    if (!this._sendDataQueue) {\\n      setTimeout(() => {\\n        this.handler(this._sendDataQueue);\\n        this._sendDataQueue = '';\\n      }, 1);\\n    }\\n\\n    this._sendDataQueue += data;\\n  }\\n\\n  /**\\n   * Ring the bell.\\n   * Note: We could do sweet things with webaudio here\\n   */\\n  public bell(): void {\\n    this.emit('bell');\\n    if (this._soundBell()) {\\n      this.soundManager.playBellSound();\\n    }\\n\\n    if (this._visualBell()) {\\n      this.element.classList.add('visual-bell-active');\\n      clearTimeout(this._visualBellTimer);\\n      this._visualBellTimer = window.setTimeout(() => {\\n        this.element.classList.remove('visual-bell-active');\\n      }, 200);\\n    }\\n  }\\n\\n  /**\\n   * Log the current state to the console.\\n   */\\n  public log(text: string, data?: any): void {\\n    if (!this.options.debug) return;\\n    if (!this._context.console || !this._context.console.log) return;\\n    this._context.console.log(text, data);\\n  }\\n\\n  /**\\n   * Log the current state as error to the console.\\n   */\\n  public error(text: string, data?: any): void {\\n    if (!this.options.debug) return;\\n    if (!this._context.console || !this._context.console.error) return;\\n    this._context.console.error(text, data);\\n  }\\n\\n  /**\\n   * Resizes the terminal.\\n   *\\n   * @param {number} x The number of columns to resize to.\\n   * @param {number} y The number of rows to resize to.\\n   */\\n  public resize(x: number, y: number): void {\\n    if (isNaN(x) || isNaN(y)) {\\n      return;\\n    }\\n\\n    if (x === this.cols && y === this.rows) {\\n      // Check if we still need to measure the char size (fixes #785).\\n      if (!this.charMeasure.width || !this.charMeasure.height) {\\n        this.charMeasure.measure(this.options);\\n      }\\n      return;\\n    }\\n\\n    if (x < 1) x = 1;\\n    if (y < 1) y = 1;\\n\\n    this.buffers.resize(x, y);\\n\\n    this.cols = x;\\n    this.rows = y;\\n    this.buffers.setupTabStops(this.cols);\\n\\n    if (this.charMeasure) {\\n      this.charMeasure.measure(this.options);\\n    }\\n\\n    this.refresh(0, this.rows - 1);\\n    this.emit('resize', {cols: x, rows: y});\\n  }\\n\\n  /**\\n   * Updates the range of rows to refresh\\n   * @param {number} y The number of rows to refresh next.\\n   */\\n  public updateRange(y: number): void {\\n    if (y < this._refreshStart) this._refreshStart = y;\\n    if (y > this._refreshEnd) this._refreshEnd = y;\\n    // if (y > this.refreshEnd) {\\n    //   this.refreshEnd = y;\\n    //   if (y > this.rows - 1) {\\n    //     this.refreshEnd = this.rows - 1;\\n    //   }\\n    // }\\n  }\\n\\n  /**\\n   * Set the range of refreshing to the maximum value\\n   */\\n  public maxRange(): void {\\n    this._refreshStart = 0;\\n    this._refreshEnd = this.rows - 1;\\n  }\\n\\n  /**\\n   * Erase in the identified line everything from \\\"x\\\" to the end of the line (right).\\n   * @param {number} x The column from which to start erasing to the end of the line.\\n   * @param {number} y The line in which to operate.\\n   */\\n  public eraseRight(x: number, y: number): void {\\n    const line = this.buffer.lines.get(this.buffer.ybase + y);\\n    if (!line) {\\n      return;\\n    }\\n    const ch: CharData = [this.eraseAttr(), ' ', 1, 32 /* ' '.charCodeAt(0) */]; // xterm\\n    for (; x < this.cols; x++) {\\n      line[x] = ch;\\n    }\\n    this.updateRange(y);\\n  }\\n\\n  /**\\n   * Erase in the identified line everything from \\\"x\\\" to the start of the line (left).\\n   * @param {number} x The column from which to start erasing to the start of the line.\\n   * @param {number} y The line in which to operate.\\n   */\\n  public eraseLeft(x: number, y: number): void {\\n    const line = this.buffer.lines.get(this.buffer.ybase + y);\\n    if (!line) {\\n      return;\\n    }\\n    const ch: CharData = [this.eraseAttr(), ' ', 1, 32 /* ' '.charCodeAt(0) */]; // xterm\\n    x++;\\n    while (x--) {\\n      line[x] = ch;\\n    }\\n    this.updateRange(y);\\n  }\\n\\n  /**\\n   * Clear the entire buffer, making the prompt line the new first line.\\n   */\\n  public clear(): void {\\n    if (this.buffer.ybase === 0 && this.buffer.y === 0) {\\n      // Don't clear if it's already clear\\n      return;\\n    }\\n    this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y));\\n    this.buffer.lines.length = 1;\\n    this.buffer.ydisp = 0;\\n    this.buffer.ybase = 0;\\n    this.buffer.y = 0;\\n    for (let i = 1; i < this.rows; i++) {\\n      this.buffer.lines.push(this.blankLine());\\n    }\\n    this.refresh(0, this.rows - 1);\\n    this.emit('scroll', this.buffer.ydisp);\\n  }\\n\\n  /**\\n   * Erase all content in the given line\\n   * @param {number} y The line to erase all of its contents.\\n   */\\n  public eraseLine(y: number): void {\\n    this.eraseRight(0, y);\\n  }\\n\\n  /**\\n   * Return the data array of a blank line\\n   * @param {boolean} cur First bunch of data for each \\\"blank\\\" character.\\n   * @param {boolean} isWrapped Whether the new line is wrapped from the previous line.\\n   * @param {boolean} cols The number of columns in the terminal, if this is not\\n   * set, the terminal's current column count would be used.\\n   */\\n  public blankLine(cur?: boolean, isWrapped?: boolean, cols?: number): LineData {\\n    const attr = cur ? this.eraseAttr() : this.defAttr;\\n\\n    const ch: CharData = [attr, ' ', 1, 32 /* ' '.charCodeAt(0) */]; // width defaults to 1 halfwidth character\\n    const line: LineData = [];\\n\\n    // TODO: It is not ideal that this is a property on an array, a buffer line\\n    // class should be added that will hold this data and other useful functions.\\n    if (isWrapped) {\\n      (<any>line).isWrapped = isWrapped;\\n    }\\n\\n    cols = cols || this.cols;\\n    for (let i = 0; i < cols; i++) {\\n      line[i] = ch;\\n    }\\n\\n    return line;\\n  }\\n\\n  /**\\n   * If cur return the back color xterm feature attribute. Else return defAttr.\\n   * @param cur\\n   */\\n  public ch(cur?: boolean): CharData {\\n    if (cur) {\\n      return [this.eraseAttr(), ' ', 1, 32 /* ' '.charCodeAt(0) */];\\n    }\\n    return [this.defAttr, ' ', 1, 32 /* ' '.charCodeAt(0) */];\\n  }\\n\\n  /**\\n   * Evaluate if the current terminal is the given argument.\\n   * @param term The terminal name to evaluate\\n   */\\n  public is(term: string): boolean {\\n    return (this.options.termName + '').indexOf(term) === 0;\\n  }\\n\\n  /**\\n   * Emit the 'data' event and populate the given data.\\n   * @param {string} data The data to populate in the event.\\n   */\\n  public handler(data: string): void {\\n    // Prevents all events to pty process if stdin is disabled\\n    if (this.options.disableStdin) {\\n      return;\\n    }\\n\\n    // Clear the selection if the selection manager is available and has an active selection\\n    if (this.selectionManager && this.selectionManager.hasSelection) {\\n      this.selectionManager.clearSelection();\\n    }\\n\\n    // Input is being sent to the terminal, the terminal should focus the prompt.\\n    if (this.buffer.ybase !== this.buffer.ydisp) {\\n      this.scrollToBottom();\\n    }\\n    this.emit('data', data);\\n  }\\n\\n  /**\\n   * Emit the 'title' event and populate the given title.\\n   * @param {string} title The title to populate in the event.\\n   */\\n  public handleTitle(title: string): void {\\n    /**\\n     * This event is emitted when the title of the terminal is changed\\n     * from inside the terminal. The parameter is the new title.\\n     *\\n     * @event title\\n     */\\n    this.emit('title', title);\\n  }\\n\\n  /**\\n   * ESC\\n   */\\n\\n  /**\\n   * ESC D Index (IND is 0x84).\\n   */\\n  public index(): void {\\n    this.buffer.y++;\\n    if (this.buffer.y > this.buffer.scrollBottom) {\\n      this.buffer.y--;\\n      this.scroll();\\n    }\\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\\n    if (this.buffer.x >= this.cols) {\\n      this.buffer.x--;\\n    }\\n  }\\n\\n  /**\\n   * ESC M Reverse Index (RI is 0x8d).\\n   *\\n   * Move the cursor up one row, inserting a new blank line if necessary.\\n   */\\n  public reverseIndex(): void {\\n    if (this.buffer.y === this.buffer.scrollTop) {\\n      // possibly move the code below to term.reverseScroll();\\n      // test: echo -ne '\\\\e[1;1H\\\\e[44m\\\\eM\\\\e[0m'\\n      // blankLine(true) is xterm/linux behavior\\n      const scrollRegionHeight = this.buffer.scrollBottom - this.buffer.scrollTop;\\n      this.buffer.lines.shiftElements(this.buffer.y + this.buffer.ybase, scrollRegionHeight, 1);\\n      this.buffer.lines.set(this.buffer.y + this.buffer.ybase, this.blankLine(true));\\n      this.updateRange(this.buffer.scrollTop);\\n      this.updateRange(this.buffer.scrollBottom);\\n    } else {\\n      this.buffer.y--;\\n    }\\n  }\\n\\n  /**\\n   * ESC c Full Reset (RIS).\\n   */\\n  public reset(): void {\\n    this.options.rows = this.rows;\\n    this.options.cols = this.cols;\\n    const customKeyEventHandler = this._customKeyEventHandler;\\n    const inputHandler = this._inputHandler;\\n    this._setup();\\n    this._customKeyEventHandler = customKeyEventHandler;\\n    this._inputHandler = inputHandler;\\n    this.refresh(0, this.rows - 1);\\n    if (this.viewport) {\\n      this.viewport.syncScrollArea();\\n    }\\n  }\\n\\n\\n  /**\\n   * ESC H Tab Set (HTS is 0x88).\\n   */\\n  public tabSet(): void {\\n    this.buffer.tabs[this.buffer.x] = true;\\n  }\\n\\n  // TODO: Remove cancel function and cancelEvents option\\n  public cancel(ev: Event, force?: boolean): boolean {\\n    if (!this.options.cancelEvents && !force) {\\n      return;\\n    }\\n    ev.preventDefault();\\n    ev.stopPropagation();\\n    return false;\\n  }\\n\\n  // TODO: Remove when true color is implemented\\n  public matchColor(r1: number, g1: number, b1: number): number {\\n    return matchColor_(r1, g1, b1);\\n  }\\n\\n  private _visualBell(): boolean {\\n    return false;\\n    // return this.options.bellStyle === 'visual' ||\\n    //     this.options.bellStyle === 'both';\\n  }\\n\\n  private _soundBell(): boolean {\\n    return this.options.bellStyle === 'sound';\\n    // return this.options.bellStyle === 'sound' ||\\n    //     this.options.bellStyle === 'both';\\n  }\\n}\\n\\n/**\\n * Helpers\\n */\\n\\nfunction globalOn(el: any, type: string, handler: (event: Event) => any, capture?: boolean): void {\\n  if (!Array.isArray(el)) {\\n    el = [el];\\n  }\\n  el.forEach((element: HTMLElement) => {\\n    element.addEventListener(type, handler, capture || false);\\n  });\\n}\\n// TODO: Remove once everything is typed\\nconst on = globalOn;\\n\\nfunction off(el: any, type: string, handler: (event: Event) => any, capture: boolean = false): void {\\n  el.removeEventListener(type, handler, capture);\\n}\\n\\nfunction wasMondifierKeyOnlyEvent(ev: KeyboardEvent): boolean {\\n  return ev.keyCode === 16 || // Shift\\n    ev.keyCode === 17 || // Ctrl\\n    ev.keyCode === 18; // Alt\\n}\\n\\n/**\\n * TODO:\\n * The below color-related code can be removed when true color is implemented.\\n * It's only purpose is to match true color requests with the closest matching\\n * ANSI color code.\\n */\\n\\nconst matchColorCache: {[colorRGBHash: number]: number} = {};\\n\\n// http://stackoverflow.com/questions/1633828\\nfunction matchColorDistance(r1: number, g1: number, b1: number, r2: number, g2: number, b2: number): number {\\n  return Math.pow(30 * (r1 - r2), 2)\\n    + Math.pow(59 * (g1 - g2), 2)\\n    + Math.pow(11 * (b1 - b2), 2);\\n}\\n\\n\\nfunction matchColor_(r1: number, g1: number, b1: number): number {\\n  const hash = (r1 << 16) | (g1 << 8) | b1;\\n\\n  if (matchColorCache[hash] != null) {\\n    return matchColorCache[hash];\\n  }\\n\\n  let ldiff = Infinity;\\n  let li = -1;\\n  let i = 0;\\n  let c: number;\\n  let r2: number;\\n  let g2: number;\\n  let b2: number;\\n  let diff: number;\\n\\n  for (; i < DEFAULT_ANSI_COLORS.length; i++) {\\n    c = DEFAULT_ANSI_COLORS[i].rgba;\\n    r2 = c >>> 24;\\n    g2 = c >>> 16 & 0xFF;\\n    b2 = c >>> 8 & 0xFF;\\n    // assume that alpha is 0xFF\\n\\n    diff = matchColorDistance(r1, g1, b1, r2, g2, b2);\\n\\n    if (diff === 0) {\\n      li = i;\\n      break;\\n    }\\n\\n    if (diff < ldiff) {\\n      ldiff = diff;\\n      li = i;\\n    }\\n  }\\n\\n  return matchColorCache[hash] = li;\\n}\\n\",\"/**\\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nexport let blankLine = 'Blank line';\\nexport let promptLabel = 'Terminal input';\\nexport let tooMuchOutput = 'Too much output to announce, navigate to rows manually to read';\\n\",\"/**\\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { ITerminal, ISoundManager } from './Types';\\n\\n// Source: https://freesound.org/people/altemark/sounds/45759/\\n// This sound is released under the Creative Commons Attribution 3.0 Unported\\n// (CC BY 3.0) license. It was created by 'altemark'. No modifications have been\\n// made, apart from the conversion to base64.\\nexport const DEFAULT_BELL_SOUND = 'data:audio/wav;base64,UklGRigBAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQBAADpAFgCwAMlBZoG/wdmCcoKRAypDQ8PbRDBEQQTOxRtFYcWlBePGIUZXhoiG88bcBz7HHIdzh0WHlMeZx51HmkeUx4WHs8dah0AHXwc3hs9G4saxRnyGBIYGBcQFv8U4RPAEoYRQBACD70NWwwHC6gJOwjWBloF7gOBAhABkf8b/qv8R/ve+Xf4Ife79W/0JfPZ8Z/wde9N7ijtE+wU6xvqM+lb6H7nw+YX5mrlxuQz5Mzje+Ma49fioeKD4nXiYeJy4pHitOL04j/jn+MN5IPkFOWs5U3mDefM55/ogOl36m7rdOyE7abuyu8D8Unyj/Pg9D/2qfcb+Yn6/vuK/Qj/lAAlAg==';\\n\\nexport class SoundManager implements ISoundManager {\\n  private _audioContext: AudioContext;\\n\\n  constructor(\\n    private _terminal: ITerminal\\n  ) {\\n  }\\n\\n  public playBellSound(): void {\\n    const audioContextCtor: typeof AudioContext = (<any>window).AudioContext || (<any>window).webkitAudioContext;\\n    if (!this._audioContext && audioContextCtor) {\\n      this._audioContext = new audioContextCtor();\\n    }\\n\\n    if (this._audioContext) {\\n      const bellAudioSource = this._audioContext.createBufferSource();\\n      const context = this._audioContext;\\n      this._audioContext.decodeAudioData(this._base64ToArrayBuffer(this._removeMimeType(this._terminal.options.bellSound)), (buffer) => {\\n        bellAudioSource.buffer = buffer;\\n        bellAudioSource.connect(context.destination);\\n        bellAudioSource.start(0);\\n      });\\n    } else {\\n      console.warn('Sorry, but the Web Audio API is not supported by your browser. Please, consider upgrading to the latest version');\\n    }\\n  }\\n\\n  private _base64ToArrayBuffer(base64: string): ArrayBuffer {\\n    const binaryString = window.atob(base64);\\n    const len = binaryString.length;\\n    const bytes = new Uint8Array(len);\\n\\n    for (let i = 0; i < len; i++) {\\n      bytes[i] = binaryString.charCodeAt(i);\\n    }\\n\\n    return bytes.buffer;\\n  }\\n\\n  private _removeMimeType(dataURI: string): string {\\n    // Split the input to get the mime-type and the data itself\\n    const splitUri = dataURI.split(',');\\n\\n    // Return only the data\\n    return splitUri[1];\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { ITerminal } from './Types';\\n\\n/**\\n * Represents a selection within the buffer. This model only cares about column\\n * and row coordinates, not wide characters.\\n */\\nexport class SelectionModel {\\n  /**\\n   * Whether select all is currently active.\\n   */\\n  public isSelectAllActive: boolean;\\n\\n  /**\\n   * The [x, y] position the selection starts at.\\n   */\\n  public selectionStart: [number, number];\\n\\n  /**\\n   * The minimal length of the selection from the start position. When double\\n   * clicking on a word, the word will be selected which makes the selection\\n   * start at the start of the word and makes this variable the length.\\n   */\\n  public selectionStartLength: number;\\n\\n  /**\\n   * The [x, y] position the selection ends at.\\n   */\\n  public selectionEnd: [number, number];\\n\\n  constructor(\\n    private _terminal: ITerminal\\n  ) {\\n    this.clearSelection();\\n  }\\n\\n  /**\\n   * Clears the current selection.\\n   */\\n  public clearSelection(): void {\\n    this.selectionStart = null;\\n    this.selectionEnd = null;\\n    this.isSelectAllActive = false;\\n    this.selectionStartLength = 0;\\n  }\\n\\n  /**\\n   * The final selection start, taking into consideration select all.\\n   */\\n  public get finalSelectionStart(): [number, number] {\\n    if (this.isSelectAllActive) {\\n      return [0, 0];\\n    }\\n\\n    if (!this.selectionEnd || !this.selectionStart) {\\n      return this.selectionStart;\\n    }\\n\\n    return this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;\\n  }\\n\\n  /**\\n   * The final selection end, taking into consideration select all, double click\\n   * word selection and triple click line selection.\\n   */\\n  public get finalSelectionEnd(): [number, number] {\\n    if (this.isSelectAllActive) {\\n      return [this._terminal.cols, this._terminal.buffer.ybase + this._terminal.rows - 1];\\n    }\\n\\n    if (!this.selectionStart) {\\n      return null;\\n    }\\n\\n    // Use the selection start if the end doesn't exist or they're reversed\\n    if (!this.selectionEnd || this.areSelectionValuesReversed()) {\\n      return [this.selectionStart[0] + this.selectionStartLength, this.selectionStart[1]];\\n    }\\n\\n    // Ensure the the word/line is selected after a double/triple click\\n    if (this.selectionStartLength) {\\n      // Select the larger of the two when start and end are on the same line\\n      if (this.selectionEnd[1] === this.selectionStart[1]) {\\n        return [Math.max(this.selectionStart[0] + this.selectionStartLength, this.selectionEnd[0]), this.selectionEnd[1]];\\n      }\\n    }\\n    return this.selectionEnd;\\n  }\\n\\n  /**\\n   * Returns whether the selection start and end are reversed.\\n   */\\n  public areSelectionValuesReversed(): boolean {\\n    const start = this.selectionStart;\\n    const end = this.selectionEnd;\\n    if (!start || !end) {\\n      return false;\\n    }\\n    return start[1] > end[1] || (start[1] === end[1] && start[0] > end[0]);\\n  }\\n\\n  /**\\n   * Handle the buffer being trimmed, adjust the selection position.\\n   * @param amount The amount the buffer is being trimmed.\\n   * @return Whether a refresh is necessary.\\n   */\\n  public onTrim(amount: number): boolean {\\n    // Adjust the selection position based on the trimmed amount.\\n    if (this.selectionStart) {\\n      this.selectionStart[1] -= amount;\\n    }\\n    if (this.selectionEnd) {\\n      this.selectionEnd[1] -= amount;\\n    }\\n\\n    // The selection has moved off the buffer, clear it.\\n    if (this.selectionEnd && this.selectionEnd[1] < 0) {\\n      this.clearSelection();\\n      return true;\\n    }\\n\\n    // If the selection start is trimmed, ensure the start column is 0.\\n    if (this.selectionStart && this.selectionStart[1] < 0) {\\n      this.selectionStart[1] = 0;\\n    }\\n    return false;\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { ITerminal, ISelectionManager, IBuffer, CharData, XtermListener } from './Types';\\nimport { MouseHelper } from './utils/MouseHelper';\\nimport * as Browser from './shared/utils/Browser';\\nimport { CharMeasure } from './utils/CharMeasure';\\nimport { EventEmitter } from './EventEmitter';\\nimport { SelectionModel } from './SelectionModel';\\nimport { CHAR_DATA_WIDTH_INDEX, CHAR_DATA_CHAR_INDEX } from './Buffer';\\nimport { AltClickHandler } from './handlers/AltClickHandler';\\n\\n/**\\n * The number of pixels the mouse needs to be above or below the viewport in\\n * order to scroll at the maximum speed.\\n */\\nconst DRAG_SCROLL_MAX_THRESHOLD = 50;\\n\\n/**\\n * The maximum scrolling speed\\n */\\nconst DRAG_SCROLL_MAX_SPEED = 15;\\n\\n/**\\n * The number of milliseconds between drag scroll updates.\\n */\\nconst DRAG_SCROLL_INTERVAL = 50;\\n\\n/**\\n * The maximum amount of time that can have elapsed for an alt click to move the\\n * cursor.\\n */\\nconst ALT_CLICK_MOVE_CURSOR_TIME = 500;\\n\\n/**\\n * A string containing all characters that are considered word separated by the\\n * double click to select work logic.\\n */\\nconst WORD_SEPARATORS = ' ()[]{}\\\\'\\\"';\\n\\nconst NON_BREAKING_SPACE_CHAR = String.fromCharCode(160);\\nconst ALL_NON_BREAKING_SPACE_REGEX = new RegExp(NON_BREAKING_SPACE_CHAR, 'g');\\n\\n/**\\n * Represents a position of a word on a line.\\n */\\ninterface IWordPosition {\\n  start: number;\\n  length: number;\\n}\\n\\n/**\\n * A selection mode, this drives how the selection behaves on mouse move.\\n */\\nenum SelectionMode {\\n  NORMAL,\\n  WORD,\\n  LINE\\n}\\n\\n/**\\n * A class that manages the selection of the terminal. With help from\\n * SelectionModel, SelectionManager handles with all logic associated with\\n * dealing with the selection, including handling mouse interaction, wide\\n * characters and fetching the actual text within the selection. Rendering is\\n * not handled by the SelectionManager but a 'refresh' event is fired when the\\n * selection is ready to be redrawn.\\n */\\nexport class SelectionManager extends EventEmitter implements ISelectionManager {\\n  protected _model: SelectionModel;\\n\\n  /**\\n   * The amount to scroll every drag scroll update (depends on how far the mouse\\n   * drag is above or below the terminal).\\n   */\\n  private _dragScrollAmount: number;\\n\\n  /**\\n   * The current selection mode.\\n   */\\n  private _activeSelectionMode: SelectionMode;\\n\\n  /**\\n   * A setInterval timer that is active while the mouse is down whose callback\\n   * scrolls the viewport when necessary.\\n   */\\n  private _dragScrollIntervalTimer: NodeJS.Timer;\\n\\n  /**\\n   * The animation frame ID used for refreshing the selection.\\n   */\\n  private _refreshAnimationFrame: number;\\n\\n  /**\\n   * Whether selection is enabled.\\n   */\\n  private _enabled = true;\\n\\n  private _mouseMoveListener: EventListener;\\n  private _mouseUpListener: EventListener;\\n  private _trimListener: XtermListener;\\n\\n  private _mouseDownTimeStamp: number;\\n\\n  constructor(\\n    private _terminal: ITerminal,\\n    private _charMeasure: CharMeasure\\n  ) {\\n    super();\\n    this._initListeners();\\n    this.enable();\\n\\n    this._model = new SelectionModel(_terminal);\\n    this._activeSelectionMode = SelectionMode.NORMAL;\\n  }\\n\\n  private get _buffer(): IBuffer {\\n    return this._terminal.buffers.active;\\n  }\\n\\n  /**\\n   * Initializes listener variables.\\n   */\\n  private _initListeners(): void {\\n    this._mouseMoveListener = event => this._onMouseMove(<MouseEvent>event);\\n    this._mouseUpListener = event => this._onMouseUp(<MouseEvent>event);\\n    this._trimListener = (amount: number) => this._onTrim(amount);\\n\\n    this.initBuffersListeners();\\n  }\\n\\n  public initBuffersListeners(): void {\\n    this._terminal.buffer.lines.on('trim', this._trimListener);\\n    this._terminal.buffers.on('activate', e => this._onBufferActivate(e));\\n  }\\n\\n  /**\\n   * Disables the selection manager. This is useful for when terminal mouse\\n   * are enabled.\\n   */\\n  public disable(): void {\\n    this.clearSelection();\\n    this._enabled = false;\\n  }\\n\\n  /**\\n   * Enable the selection manager.\\n   */\\n  public enable(): void {\\n    this._enabled = true;\\n  }\\n\\n  public get selectionStart(): [number, number] { return this._model.finalSelectionStart; }\\n  public get selectionEnd(): [number, number] { return this._model.finalSelectionEnd; }\\n\\n  /**\\n   * Gets whether there is an active text selection.\\n   */\\n  public get hasSelection(): boolean {\\n    const start = this._model.finalSelectionStart;\\n    const end = this._model.finalSelectionEnd;\\n    if (!start || !end) {\\n      return false;\\n    }\\n    return start[0] !== end[0] || start[1] !== end[1];\\n  }\\n\\n  /**\\n   * Gets the text currently selected.\\n   */\\n  public get selectionText(): string {\\n    const start = this._model.finalSelectionStart;\\n    const end = this._model.finalSelectionEnd;\\n    if (!start || !end) {\\n      return '';\\n    }\\n\\n    // Get first row\\n    const startRowEndCol = start[1] === end[1] ? end[0] : null;\\n    let result: string[] = [];\\n    result.push(this._buffer.translateBufferLineToString(start[1], true, start[0], startRowEndCol));\\n\\n    // Get middle rows\\n    for (let i = start[1] + 1; i <= end[1] - 1; i++) {\\n      const bufferLine = this._buffer.lines.get(i);\\n      const lineText = this._buffer.translateBufferLineToString(i, true);\\n      if ((<any>bufferLine).isWrapped) {\\n        result[result.length - 1] += lineText;\\n      } else {\\n        result.push(lineText);\\n      }\\n    }\\n\\n    // Get final row\\n    if (start[1] !== end[1]) {\\n      const bufferLine = this._buffer.lines.get(end[1]);\\n      const lineText = this._buffer.translateBufferLineToString(end[1], true, 0, end[0]);\\n      if ((<any>bufferLine).isWrapped) {\\n        result[result.length - 1] += lineText;\\n      } else {\\n        result.push(lineText);\\n      }\\n    }\\n\\n    // Format string by replacing non-breaking space chars with regular spaces\\n    // and joining the array into a multi-line string.\\n    const formattedResult = result.map(line => {\\n      return line.replace(ALL_NON_BREAKING_SPACE_REGEX, ' ');\\n    }).join(Browser.isMSWindows ? '\\\\r\\\\n' : '\\\\n');\\n\\n    return formattedResult;\\n  }\\n\\n  /**\\n   * Clears the current terminal selection.\\n   */\\n  public clearSelection(): void {\\n    this._model.clearSelection();\\n    this._removeMouseDownListeners();\\n    this.refresh();\\n  }\\n\\n  /**\\n   * Queues a refresh, redrawing the selection on the next opportunity.\\n   * @param isNewSelection Whether the selection should be registered as a new\\n   * selection on Linux.\\n   */\\n  public refresh(isNewSelection?: boolean): void {\\n    // Queue the refresh for the renderer\\n    if (!this._refreshAnimationFrame) {\\n      this._refreshAnimationFrame = window.requestAnimationFrame(() => this._refresh());\\n    }\\n\\n    // If the platform is Linux and the refresh call comes from a mouse event,\\n    // we need to update the selection for middle click to paste selection.\\n    if (Browser.isLinux && isNewSelection) {\\n      const selectionText = this.selectionText;\\n      if (selectionText.length) {\\n        this.emit('newselection', this.selectionText);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Fires the refresh event, causing consumers to pick it up and redraw the\\n   * selection state.\\n   */\\n  private _refresh(): void {\\n    this._refreshAnimationFrame = null;\\n    this.emit('refresh', { start: this._model.finalSelectionStart, end: this._model.finalSelectionEnd });\\n  }\\n\\n  /**\\n   * Checks if the current click was inside the current selection\\n   * @param event The mouse event\\n   */\\n  public isClickInSelection(event: MouseEvent): boolean {\\n    const coords = this._getMouseBufferCoords(event);\\n    const start = this._model.finalSelectionStart;\\n    const end = this._model.finalSelectionEnd;\\n\\n    if (!start || !end) {\\n      return false;\\n    }\\n\\n    return (coords[1] > start[1] && coords[1] < end[1]) ||\\n        (start[1] === end[1] && coords[1] === start[1] && coords[0] > start[0] && coords[0] < end[0]) ||\\n        (start[1] < end[1] && coords[1] === end[1] && coords[0] < end[0]);\\n  }\\n\\n  /**\\n   * Selects word at the current mouse event coordinates.\\n   * @param event The mouse event.\\n   */\\n  public selectWordAtCursor(event: MouseEvent): void {\\n    const coords = this._getMouseBufferCoords(event);\\n    if (coords) {\\n      this._selectWordAt(coords, false);\\n      this._model.selectionEnd = null;\\n      this.refresh(true);\\n    }\\n  }\\n\\n  /**\\n   * Selects all text within the terminal.\\n   */\\n  public selectAll(): void {\\n    this._model.isSelectAllActive = true;\\n    this.refresh();\\n    this._terminal.emit('selection');\\n  }\\n\\n  public selectLines(start: number, end: number): void {\\n    this._model.clearSelection();\\n    start = Math.max(start, 0);\\n    end = Math.min(end, this._terminal.buffer.lines.length - 1);\\n    this._model.selectionStart = [0, start];\\n    this._model.selectionEnd = [this._terminal.cols, end];\\n    this.refresh();\\n    this._terminal.emit('selection');\\n  }\\n\\n  /**\\n   * Handle the buffer being trimmed, adjust the selection position.\\n   * @param amount The amount the buffer is being trimmed.\\n   */\\n  private _onTrim(amount: number): void {\\n    const needsRefresh = this._model.onTrim(amount);\\n    if (needsRefresh) {\\n      this.refresh();\\n    }\\n  }\\n\\n  /**\\n   * Gets the 0-based [x, y] buffer coordinates of the current mouse event.\\n   * @param event The mouse event.\\n   */\\n  private _getMouseBufferCoords(event: MouseEvent): [number, number] {\\n    const coords = this._terminal.mouseHelper.getCoords(event, this._terminal.screenElement, this._charMeasure, this._terminal.options.lineHeight, this._terminal.cols, this._terminal.rows, true);\\n    if (!coords) {\\n      return null;\\n    }\\n\\n    // Convert to 0-based\\n    coords[0]--;\\n    coords[1]--;\\n\\n    // Convert viewport coords to buffer coords\\n    coords[1] += this._terminal.buffer.ydisp;\\n    return coords;\\n  }\\n\\n  /**\\n   * Gets the amount the viewport should be scrolled based on how far out of the\\n   * terminal the mouse is.\\n   * @param event The mouse event.\\n   */\\n  private _getMouseEventScrollAmount(event: MouseEvent): number {\\n    let offset = MouseHelper.getCoordsRelativeToElement(event, this._terminal.screenElement)[1];\\n    const terminalHeight = this._terminal.rows * Math.ceil(this._charMeasure.height * this._terminal.options.lineHeight);\\n    if (offset >= 0 && offset <= terminalHeight) {\\n      return 0;\\n    }\\n    if (offset > terminalHeight) {\\n      offset -= terminalHeight;\\n    }\\n\\n    offset = Math.min(Math.max(offset, -DRAG_SCROLL_MAX_THRESHOLD), DRAG_SCROLL_MAX_THRESHOLD);\\n    offset /= DRAG_SCROLL_MAX_THRESHOLD;\\n    return (offset / Math.abs(offset)) + Math.round(offset * (DRAG_SCROLL_MAX_SPEED - 1));\\n  }\\n\\n  /**\\n   * Returns whether the selection manager should force selection, regardless of\\n   * whether the terminal is in mouse events mode.\\n   * @param event The mouse event.\\n   */\\n  public shouldForceSelection(event: MouseEvent): boolean {\\n    return Browser.isMac ? event.altKey : event.shiftKey;\\n  }\\n\\n  /**\\n   * Handles te mousedown event, setting up for a new selection.\\n   * @param event The mousedown event.\\n   */\\n  public onMouseDown(event: MouseEvent): void {\\n    this._mouseDownTimeStamp = event.timeStamp;\\n    // If we have selection, we want the context menu on right click even if the\\n    // terminal is in mouse mode.\\n    if (event.button === 2 && this.hasSelection) {\\n      return;\\n    }\\n\\n    // Only action the primary button\\n    if (event.button !== 0) {\\n      return;\\n    }\\n\\n    // Allow selection when using a specific modifier key, even when disabled\\n    if (!this._enabled) {\\n      if (!this.shouldForceSelection(event)) {\\n        return;\\n      }\\n\\n      // Don't send the mouse down event to the current process, we want to select\\n      event.stopPropagation();\\n    }\\n\\n    // Tell the browser not to start a regular selection\\n    event.preventDefault();\\n\\n    // Reset drag scroll state\\n    this._dragScrollAmount = 0;\\n\\n    if (this._enabled && event.shiftKey) {\\n      this._onIncrementalClick(event);\\n    } else {\\n      if (event.detail === 1) {\\n        this._onSingleClick(event);\\n      } else if (event.detail === 2) {\\n        this._onDoubleClick(event);\\n      } else if (event.detail === 3) {\\n        this._onTripleClick(event);\\n      }\\n    }\\n\\n    this._addMouseDownListeners();\\n    this.refresh(true);\\n  }\\n\\n  /**\\n   * Adds listeners when mousedown is triggered.\\n   */\\n  private _addMouseDownListeners(): void {\\n    // Listen on the document so that dragging outside of viewport works\\n    this._terminal.element.ownerDocument.addEventListener('mousemove', this._mouseMoveListener);\\n    this._terminal.element.ownerDocument.addEventListener('mouseup', this._mouseUpListener);\\n    this._dragScrollIntervalTimer = setInterval(() => this._dragScroll(), DRAG_SCROLL_INTERVAL);\\n  }\\n\\n  /**\\n   * Removes the listeners that are registered when mousedown is triggered.\\n   */\\n  private _removeMouseDownListeners(): void {\\n    this._terminal.element.ownerDocument.removeEventListener('mousemove', this._mouseMoveListener);\\n    this._terminal.element.ownerDocument.removeEventListener('mouseup', this._mouseUpListener);\\n    clearInterval(this._dragScrollIntervalTimer);\\n    this._dragScrollIntervalTimer = null;\\n  }\\n\\n  /**\\n   * Performs an incremental click, setting the selection end position to the mouse\\n   * position.\\n   * @param event The mouse event.\\n   */\\n  private _onIncrementalClick(event: MouseEvent): void {\\n    if (this._model.selectionStart) {\\n      this._model.selectionEnd = this._getMouseBufferCoords(event);\\n    }\\n  }\\n\\n  /**\\n   * Performs a single click, resetting relevant state and setting the selection\\n   * start position.\\n   * @param event The mouse event.\\n   */\\n  private _onSingleClick(event: MouseEvent): void {\\n    this._model.selectionStartLength = 0;\\n    this._model.isSelectAllActive = false;\\n    this._activeSelectionMode = SelectionMode.NORMAL;\\n\\n    // Initialize the new selection\\n    this._model.selectionStart = this._getMouseBufferCoords(event);\\n    if (!this._model.selectionStart) {\\n      return;\\n    }\\n    this._model.selectionEnd = null;\\n\\n    // Ensure the line exists\\n    const line = this._buffer.lines.get(this._model.selectionStart[1]);\\n    if (!line) {\\n      return;\\n    }\\n\\n    // Return early if the click event is not in the buffer (eg. in scroll bar)\\n    if (line.length >= this._model.selectionStart[0]) {\\n      return;\\n    }\\n\\n    // If the mouse is over the second half of a wide character, adjust the\\n    // selection to cover the whole character\\n    const char = line[this._model.selectionStart[0]];\\n    if (char[CHAR_DATA_WIDTH_INDEX] === 0) {\\n      this._model.selectionStart[0]++;\\n    }\\n  }\\n\\n  /**\\n   * Performs a double click, selecting the current work.\\n   * @param event The mouse event.\\n   */\\n  private _onDoubleClick(event: MouseEvent): void {\\n    const coords = this._getMouseBufferCoords(event);\\n    if (coords) {\\n      this._activeSelectionMode = SelectionMode.WORD;\\n      this._selectWordAt(coords, true);\\n    }\\n  }\\n\\n  /**\\n   * Performs a triple click, selecting the current line and activating line\\n   * select mode.\\n   * @param event The mouse event.\\n   */\\n  private _onTripleClick(event: MouseEvent): void {\\n    const coords = this._getMouseBufferCoords(event);\\n    if (coords) {\\n      this._activeSelectionMode = SelectionMode.LINE;\\n      this._selectLineAt(coords[1]);\\n    }\\n  }\\n\\n  /**\\n   * Handles the mousemove event when the mouse button is down, recording the\\n   * end of the selection and refreshing the selection.\\n   * @param event The mousemove event.\\n   */\\n  private _onMouseMove(event: MouseEvent): void {\\n    // If the mousemove listener is active it means that a selection is\\n    // currently being made, we should stop propogation to prevent mouse events\\n    // to be sent to the pty.\\n    event.stopImmediatePropagation();\\n\\n    // Record the previous position so we know whether to redraw the selection\\n    // at the end.\\n    const previousSelectionEnd = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;\\n\\n    // Set the initial selection end based on the mouse coordinates\\n    this._model.selectionEnd = this._getMouseBufferCoords(event);\\n    if (!this._model.selectionEnd) {\\n      this.refresh(true);\\n      return;\\n    }\\n\\n    // Select the entire line if line select mode is active.\\n    if (this._activeSelectionMode === SelectionMode.LINE) {\\n      if (this._model.selectionEnd[1] < this._model.selectionStart[1]) {\\n        this._model.selectionEnd[0] = 0;\\n      } else {\\n        this._model.selectionEnd[0] = this._terminal.cols;\\n      }\\n    } else if (this._activeSelectionMode === SelectionMode.WORD) {\\n      this._selectToWordAt(this._model.selectionEnd);\\n    }\\n\\n    // Determine the amount of scrolling that will happen.\\n    this._dragScrollAmount = this._getMouseEventScrollAmount(event);\\n\\n    // If the cursor was above or below the viewport, make sure it's at the\\n    // start or end of the viewport respectively.\\n    if (this._dragScrollAmount > 0) {\\n      this._model.selectionEnd[0] = this._terminal.cols;\\n    } else if (this._dragScrollAmount < 0) {\\n      this._model.selectionEnd[0] = 0;\\n    }\\n\\n    // If the character is a wide character include the cell to the right in the\\n    // selection. Note that selections at the very end of the line will never\\n    // have a character.\\n    if (this._model.selectionEnd[1] < this._buffer.lines.length) {\\n      const char = this._buffer.lines.get(this._model.selectionEnd[1])[this._model.selectionEnd[0]];\\n      if (char && char[CHAR_DATA_WIDTH_INDEX] === 0) {\\n        this._model.selectionEnd[0]++;\\n      }\\n    }\\n\\n    // Only draw here if the selection changes.\\n    if (!previousSelectionEnd ||\\n      previousSelectionEnd[0] !== this._model.selectionEnd[0] ||\\n      previousSelectionEnd[1] !== this._model.selectionEnd[1]) {\\n      this.refresh(true);\\n    }\\n  }\\n\\n  /**\\n   * The callback that occurs every DRAG_SCROLL_INTERVAL ms that does the\\n   * scrolling of the viewport.\\n   */\\n  private _dragScroll(): void {\\n    if (this._dragScrollAmount) {\\n      this._terminal.scrollLines(this._dragScrollAmount, false);\\n      // Re-evaluate selection\\n      if (this._dragScrollAmount > 0) {\\n        this._model.selectionEnd = [this._terminal.cols - 1, Math.min(this._terminal.buffer.ydisp + this._terminal.rows, this._terminal.buffer.lines.length - 1)];\\n      } else {\\n        this._model.selectionEnd = [0, this._terminal.buffer.ydisp];\\n      }\\n      this.refresh();\\n    }\\n  }\\n\\n  /**\\n   * Handles the mouseup event, removing the mousedown listeners.\\n   * @param event The mouseup event.\\n   */\\n  private _onMouseUp(event: MouseEvent): void {\\n    let timeElapsed = event.timeStamp - this._mouseDownTimeStamp;\\n\\n    this._removeMouseDownListeners();\\n\\n    if (this.selectionText.length <= 1 && timeElapsed < ALT_CLICK_MOVE_CURSOR_TIME) {\\n      (new AltClickHandler(event, this._terminal)).move();\\n    } else if (this.hasSelection) {\\n      this._terminal.emit('selection');\\n    }\\n  }\\n\\n  private _onBufferActivate(e: {activeBuffer: IBuffer, inactiveBuffer: IBuffer}): void {\\n    this.clearSelection();\\n    // Only adjust the selection on trim, shiftElements is rarely used (only in\\n    // reverseIndex) and delete in a splice is only ever used when the same\\n    // number of elements was just added. Given this is could actually be\\n    // beneficial to leave the selection as is for these cases.\\n    e.inactiveBuffer.lines.off('trim', this._trimListener);\\n    e.activeBuffer.lines.on('trim', this._trimListener);\\n  }\\n\\n  /**\\n   * Converts a viewport column to the character index on the buffer line, the\\n   * latter takes into account wide characters.\\n   * @param coords The coordinates to find the 2 index for.\\n   */\\n  private _convertViewportColToCharacterIndex(bufferLine: any, coords: [number, number]): number {\\n    let charIndex = coords[0];\\n    for (let i = 0; coords[0] >= i; i++) {\\n      const char = bufferLine[i];\\n      if (char[CHAR_DATA_WIDTH_INDEX] === 0) {\\n        // Wide characters aren't included in the line string so decrement the\\n        // index so the index is back on the wide character.\\n        charIndex--;\\n      } else if (char[CHAR_DATA_CHAR_INDEX].length > 1 && coords[0] !== i) {\\n        // Emojis take up multiple characters, so adjust accordingly. For these\\n        // we don't want ot include the character at the column as we're\\n        // returning the start index in the string, not the end index.\\n        charIndex += char[CHAR_DATA_CHAR_INDEX].length - 1;\\n      }\\n    }\\n    return charIndex;\\n  }\\n\\n  public setSelection(col: number, row: number, length: number): void {\\n    this._model.clearSelection();\\n    this._removeMouseDownListeners();\\n    this._model.selectionStart = [col, row];\\n    this._model.selectionStartLength = length;\\n    this.refresh();\\n  }\\n\\n  /**\\n   * Gets positional information for the word at the coordinated specified.\\n   * @param coords The coordinates to get the word at.\\n   */\\n  private _getWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean): IWordPosition {\\n    // Ensure coords are within viewport (eg. not within scroll bar)\\n    if (coords[0] >= this._terminal.cols) {\\n      return null;\\n    }\\n\\n    const bufferLine = this._buffer.lines.get(coords[1]);\\n    if (!bufferLine) {\\n      return null;\\n    }\\n\\n    const line = this._buffer.translateBufferLineToString(coords[1], false);\\n\\n    // Get actual index, taking into consideration wide characters\\n    let startIndex = this._convertViewportColToCharacterIndex(bufferLine, coords);\\n    let endIndex = startIndex;\\n\\n    // Record offset to be used later\\n    const charOffset = coords[0] - startIndex;\\n    let leftWideCharCount = 0;\\n    let rightWideCharCount = 0;\\n    let leftLongCharOffset = 0;\\n    let rightLongCharOffset = 0;\\n\\n    if (line.charAt(startIndex) === ' ') {\\n      // Expand until non-whitespace is hit\\n      while (startIndex > 0 && line.charAt(startIndex - 1) === ' ') {\\n        startIndex--;\\n      }\\n      while (endIndex < line.length && line.charAt(endIndex + 1) === ' ') {\\n        endIndex++;\\n      }\\n    } else {\\n      // Expand until whitespace is hit. This algorithm works by scanning left\\n      // and right from the starting position, keeping both the index format\\n      // (line) and the column format (bufferLine) in sync. When a wide\\n      // character is hit, it is recorded and the column index is adjusted.\\n      let startCol = coords[0];\\n      let endCol = coords[0];\\n\\n      // Consider the initial position, skip it and increment the wide char\\n      // variable\\n      if (bufferLine[startCol][CHAR_DATA_WIDTH_INDEX] === 0) {\\n        leftWideCharCount++;\\n        startCol--;\\n      }\\n      if (bufferLine[endCol][CHAR_DATA_WIDTH_INDEX] === 2) {\\n        rightWideCharCount++;\\n        endCol++;\\n      }\\n\\n      // Adjust the end index for characters whose length are > 1 (emojis)\\n      if (bufferLine[endCol][CHAR_DATA_CHAR_INDEX].length > 1) {\\n        rightLongCharOffset += bufferLine[endCol][CHAR_DATA_CHAR_INDEX].length - 1;\\n        endIndex += bufferLine[endCol][CHAR_DATA_CHAR_INDEX].length - 1;\\n      }\\n\\n      // Expand the string in both directions until a space is hit\\n      while (startCol > 0 && startIndex > 0 && !this._isCharWordSeparator(bufferLine[startCol - 1])) {\\n        const char = bufferLine[startCol - 1];\\n        if (char[CHAR_DATA_WIDTH_INDEX] === 0) {\\n          // If the next character is a wide char, record it and skip the column\\n          leftWideCharCount++;\\n          startCol--;\\n        } else if (char[CHAR_DATA_CHAR_INDEX].length > 1) {\\n          // If the next character's string is longer than 1 char (eg. emoji),\\n          // adjust the index\\n          leftLongCharOffset += char[CHAR_DATA_CHAR_INDEX].length - 1;\\n          startIndex -= char[CHAR_DATA_CHAR_INDEX].length - 1;\\n        }\\n        startIndex--;\\n        startCol--;\\n      }\\n      while (endCol < bufferLine.length && endIndex + 1 < line.length && !this._isCharWordSeparator(bufferLine[endCol + 1])) {\\n        const char = bufferLine[endCol + 1];\\n        if (char[CHAR_DATA_WIDTH_INDEX] === 2) {\\n          // If the next character is a wide char, record it and skip the column\\n          rightWideCharCount++;\\n          endCol++;\\n        } else if (char[CHAR_DATA_CHAR_INDEX].length > 1) {\\n          // If the next character's string is longer than 1 char (eg. emoji),\\n          // adjust the index\\n          rightLongCharOffset += char[CHAR_DATA_CHAR_INDEX].length - 1;\\n          endIndex += char[CHAR_DATA_CHAR_INDEX].length - 1;\\n        }\\n        endIndex++;\\n        endCol++;\\n      }\\n    }\\n\\n    // Incremenet the end index so it is at the start of the next character\\n    endIndex++;\\n\\n    // Calculate the start _column_, converting the the string indexes back to\\n    // column coordinates.\\n    const start =\\n        startIndex // The index of the selection's start char in the line string\\n        + charOffset // The difference between the initial char's column and index\\n        - leftWideCharCount // The number of wide chars left of the initial char\\n        + leftLongCharOffset; // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\\n\\n    // Calculate the length in _columns_, converting the the string indexes back\\n    // to column coordinates.\\n    const length = Math.min(this._terminal.cols, // Disallow lengths larger than the terminal cols\\n        endIndex // The index of the selection's end char in the line string\\n        - startIndex // The index of the selection's start char in the line string\\n        + leftWideCharCount // The number of wide chars left of the initial char\\n        + rightWideCharCount // The number of wide chars right of the initial char (inclusive)\\n        - leftLongCharOffset // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\\n        - rightLongCharOffset); // The number of additional chars right of the initial char (inclusive) added by columns with strings longer than 1 (emojis)\\n\\n    if (!allowWhitespaceOnlySelection && line.slice(startIndex, endIndex).trim() === '') {\\n      return null;\\n    }\\n\\n    return { start, length };\\n  }\\n\\n  /**\\n   * Selects the word at the coordinates specified.\\n   * @param coords The coordinates to get the word at.\\n   * @param allowWhitespaceOnlySelection If whitespace should be selected\\n   */\\n  protected _selectWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean): void {\\n    const wordPosition = this._getWordAt(coords, allowWhitespaceOnlySelection);\\n    if (wordPosition) {\\n      this._model.selectionStart = [wordPosition.start, coords[1]];\\n      this._model.selectionStartLength = wordPosition.length;\\n    }\\n  }\\n\\n  /**\\n   * Sets the selection end to the word at the coordinated specified.\\n   * @param coords The coordinates to get the word at.\\n   */\\n  private _selectToWordAt(coords: [number, number]): void {\\n    const wordPosition = this._getWordAt(coords, true);\\n    if (wordPosition) {\\n      this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? wordPosition.start : (wordPosition.start + wordPosition.length), coords[1]];\\n    }\\n  }\\n\\n  /**\\n   * Gets whether the character is considered a word separator by the select\\n   * word logic.\\n   * @param char The character to check.\\n   */\\n  private _isCharWordSeparator(charData: CharData): boolean {\\n    // Zero width characters are never separators as they are always to the\\n    // right of wide characters\\n    if (charData[CHAR_DATA_WIDTH_INDEX] === 0) {\\n      return false;\\n    }\\n    return WORD_SEPARATORS.indexOf(charData[CHAR_DATA_CHAR_INDEX]) >= 0;\\n  }\\n\\n  /**\\n   * Selects the line specified.\\n   * @param line The line index.\\n   */\\n  protected _selectLineAt(line: number): void {\\n    this._model.selectionStart = [0, line];\\n    this._model.selectionStartLength = this._terminal.cols;\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\\n * @license MIT\\n */\\n\\nimport { C0 } from './EscapeSequences';\\nimport { IInputHandler, IInputHandlingTerminal } from './Types';\\nimport { CHARSETS, DEFAULT_CHARSET } from './Charsets';\\n\\nconst normalStateHandler: {[key: string]: (parser: Parser, handler: IInputHandler) => void} = {};\\nnormalStateHandler[C0.BEL] = (parser, handler) => handler.bell();\\nnormalStateHandler[C0.LF] = (parser, handler) => handler.lineFeed();\\nnormalStateHandler[C0.VT] = normalStateHandler[C0.LF];\\nnormalStateHandler[C0.FF] = normalStateHandler[C0.LF];\\nnormalStateHandler[C0.CR] = (parser, handler) => handler.carriageReturn();\\nnormalStateHandler[C0.BS] = (parser, handler) => handler.backspace();\\nnormalStateHandler[C0.HT] = (parser, handler) => handler.tab();\\nnormalStateHandler[C0.SO] = (parser, handler) => handler.shiftOut();\\nnormalStateHandler[C0.SI] = (parser, handler) => handler.shiftIn();\\nnormalStateHandler[C0.ESC] = (parser, handler) => parser.setState(ParserState.ESCAPED);\\n\\n// TODO: Remove terminal when parser owns params and currentParam\\nconst escapedStateHandler: {[key: string]: (parser: Parser, terminal: any) => void} = {};\\nescapedStateHandler['['] = (parser, terminal) => {\\n  // ESC [ Control Sequence Introducer (CSI  is 0x9b)\\n  terminal.params = [];\\n  terminal.currentParam = 0;\\n  parser.setState(ParserState.CSI_PARAM);\\n};\\nescapedStateHandler[']'] = (parser, terminal) => {\\n  // ESC ] Operating System Command (OSC is 0x9d)\\n  terminal.params = [];\\n  terminal.currentParam = 0;\\n  parser.setState(ParserState.OSC);\\n};\\nescapedStateHandler['P'] = (parser, terminal) => {\\n  // ESC P Device Control String (DCS is 0x90)\\n  terminal.params = [];\\n  terminal.currentParam = 0;\\n  parser.setState(ParserState.DCS);\\n};\\nescapedStateHandler['_'] = (parser, terminal) => {\\n  // ESC _ Application Program Command ( APC is 0x9f).\\n  parser.setState(ParserState.IGNORE);\\n};\\nescapedStateHandler['^'] = (parser, terminal) => {\\n  // ESC ^ Privacy Message ( PM is 0x9e).\\n  parser.setState(ParserState.IGNORE);\\n};\\nescapedStateHandler['c'] = (parser, terminal) => {\\n  // ESC c Full Reset (RIS).\\n  terminal.reset();\\n};\\nescapedStateHandler['E'] = (parser, terminal) => {\\n  // ESC E Next Line ( NEL is 0x85).\\n  terminal.buffer.x = 0;\\n  terminal.index();\\n  parser.setState(ParserState.NORMAL);\\n};\\nescapedStateHandler['D'] = (parser, terminal) => {\\n  // ESC D Index ( IND is 0x84).\\n  terminal.index();\\n  parser.setState(ParserState.NORMAL);\\n};\\nescapedStateHandler['M'] = (parser, terminal) => {\\n  // ESC M Reverse Index ( RI is 0x8d).\\n  terminal.reverseIndex();\\n  parser.setState(ParserState.NORMAL);\\n};\\nescapedStateHandler['%'] = (parser, terminal) => {\\n  // ESC % Select default/utf-8 character set.\\n  // @ = default, G = utf-8\\n  terminal.setgLevel(0);\\n  terminal.setgCharset(0, DEFAULT_CHARSET); // US (default)\\n  parser.setState(ParserState.NORMAL);\\n  parser.skipNextChar();\\n};\\nescapedStateHandler[C0.CAN] = (parser) => parser.setState(ParserState.NORMAL);\\n\\nconst csiParamStateHandler: {[key: string]: (parser: Parser) => void} = {};\\ncsiParamStateHandler['?'] = (parser) => parser.setPrefix('?');\\ncsiParamStateHandler['>'] = (parser) => parser.setPrefix('>');\\ncsiParamStateHandler['!'] = (parser) => parser.setPrefix('!');\\ncsiParamStateHandler['0'] = (parser) => parser.setParam(parser.getParam() * 10);\\ncsiParamStateHandler['1'] = (parser) => parser.setParam(parser.getParam() * 10 + 1);\\ncsiParamStateHandler['2'] = (parser) => parser.setParam(parser.getParam() * 10 + 2);\\ncsiParamStateHandler['3'] = (parser) => parser.setParam(parser.getParam() * 10 + 3);\\ncsiParamStateHandler['4'] = (parser) => parser.setParam(parser.getParam() * 10 + 4);\\ncsiParamStateHandler['5'] = (parser) => parser.setParam(parser.getParam() * 10 + 5);\\ncsiParamStateHandler['6'] = (parser) => parser.setParam(parser.getParam() * 10 + 6);\\ncsiParamStateHandler['7'] = (parser) => parser.setParam(parser.getParam() * 10 + 7);\\ncsiParamStateHandler['8'] = (parser) => parser.setParam(parser.getParam() * 10 + 8);\\ncsiParamStateHandler['9'] = (parser) => parser.setParam(parser.getParam() * 10 + 9);\\ncsiParamStateHandler['$'] = (parser) => parser.setPostfix('$');\\ncsiParamStateHandler['\\\"'] = (parser) => parser.setPostfix('\\\"');\\ncsiParamStateHandler[' '] = (parser) => parser.setPostfix(' ');\\ncsiParamStateHandler['\\\\''] = (parser) => parser.setPostfix('\\\\'');\\ncsiParamStateHandler[';'] = (parser) => parser.finalizeParam();\\ncsiParamStateHandler[C0.CAN] = (parser) => parser.setState(ParserState.NORMAL);\\n\\nconst csiStateHandler: {[key: string]: (handler: IInputHandler, params: number[], prefix: string, postfix: string, parser: Parser) => void} = {};\\ncsiStateHandler['@'] = (handler, params, prefix) => handler.insertChars(params);\\ncsiStateHandler['A'] = (handler, params, prefix) => handler.cursorUp(params);\\ncsiStateHandler['B'] = (handler, params, prefix) => handler.cursorDown(params);\\ncsiStateHandler['C'] = (handler, params, prefix) => handler.cursorForward(params);\\ncsiStateHandler['D'] = (handler, params, prefix) => handler.cursorBackward(params);\\ncsiStateHandler['E'] = (handler, params, prefix) => handler.cursorNextLine(params);\\ncsiStateHandler['F'] = (handler, params, prefix) => handler.cursorPrecedingLine(params);\\ncsiStateHandler['G'] = (handler, params, prefix) => handler.cursorCharAbsolute(params);\\ncsiStateHandler['H'] = (handler, params, prefix) => handler.cursorPosition(params);\\ncsiStateHandler['I'] = (handler, params, prefix) => handler.cursorForwardTab(params);\\ncsiStateHandler['J'] = (handler, params, prefix) => handler.eraseInDisplay(params);\\ncsiStateHandler['K'] = (handler, params, prefix) => handler.eraseInLine(params);\\ncsiStateHandler['L'] = (handler, params, prefix) => handler.insertLines(params);\\ncsiStateHandler['M'] = (handler, params, prefix) => handler.deleteLines(params);\\ncsiStateHandler['P'] = (handler, params, prefix) => handler.deleteChars(params);\\ncsiStateHandler['S'] = (handler, params, prefix) => handler.scrollUp(params);\\ncsiStateHandler['T'] = (handler, params, prefix) => {\\n  if (params.length < 2 && !prefix) {\\n    handler.scrollDown(params);\\n  }\\n};\\ncsiStateHandler['X'] = (handler, params, prefix) => handler.eraseChars(params);\\ncsiStateHandler['Z'] = (handler, params, prefix) => handler.cursorBackwardTab(params);\\ncsiStateHandler['`'] = (handler, params, prefix) => handler.charPosAbsolute(params);\\ncsiStateHandler['a'] = (handler, params, prefix) => handler.HPositionRelative(params);\\ncsiStateHandler['b'] = (handler, params, prefix) => handler.repeatPrecedingCharacter(params);\\ncsiStateHandler['c'] = (handler, params, prefix) => handler.sendDeviceAttributes(params);\\ncsiStateHandler['d'] = (handler, params, prefix) => handler.linePosAbsolute(params);\\ncsiStateHandler['e'] = (handler, params, prefix) => handler.VPositionRelative(params);\\ncsiStateHandler['f'] = (handler, params, prefix) => handler.HVPosition(params);\\ncsiStateHandler['g'] = (handler, params, prefix) => handler.tabClear(params);\\ncsiStateHandler['h'] = (handler, params, prefix) => handler.setMode(params);\\ncsiStateHandler['l'] = (handler, params, prefix) => handler.resetMode(params);\\ncsiStateHandler['m'] = (handler, params, prefix) => handler.charAttributes(params);\\ncsiStateHandler['n'] = (handler, params, prefix) => handler.deviceStatus(params);\\ncsiStateHandler['p'] = (handler, params, prefix) => {\\n  switch (prefix) {\\n    case '!': handler.softReset(params); break;\\n  }\\n};\\ncsiStateHandler['q'] = (handler, params, prefix, postfix) => {\\n  if (postfix === ' ') {\\n    handler.setCursorStyle(params);\\n  }\\n};\\ncsiStateHandler['r'] = (handler, params) => handler.setScrollRegion(params);\\ncsiStateHandler['s'] = (handler, params) => handler.saveCursor(params);\\ncsiStateHandler['u'] = (handler, params) => handler.restoreCursor(params);\\ncsiStateHandler[C0.CAN] = (handler, params, prefix, postfix, parser) => parser.setState(ParserState.NORMAL);\\n\\nexport enum ParserState {\\n  NORMAL = 0,\\n  ESCAPED = 1,\\n  CSI_PARAM = 2,\\n  CSI = 3,\\n  OSC = 4,\\n  CHARSET = 5,\\n  DCS = 6,\\n  IGNORE = 7\\n}\\n\\n/**\\n * The terminal's parser, all input into the terminal goes through the parser\\n * which parses and defers the actual input handling the the IInputHandler\\n * specified in the constructor.\\n */\\nexport class Parser {\\n  private _state: ParserState;\\n  private _position: number;\\n\\n  // TODO: Remove terminal when handler can do everything\\n  constructor(\\n    private _inputHandler: IInputHandler,\\n    private _terminal: any\\n  ) {\\n    this._state = ParserState.NORMAL;\\n  }\\n\\n  /**\\n   * Parse and handle data.\\n   *\\n   * @param data The data to parse.\\n   */\\n  public parse(data: string): ParserState {\\n    const l = data.length;\\n    let cs;\\n    let ch;\\n    let code;\\n    let low;\\n\\n    const cursorStartX = this._terminal.buffer.x;\\n    const cursorStartY = this._terminal.buffer.y;\\n\\n    if (this._terminal.debug) {\\n      this._terminal.log('data: ' + data);\\n    }\\n\\n    this._position = 0;\\n    // apply leftover surrogate high from last write\\n    if (this._terminal.surrogate_high) {\\n      data = this._terminal.surrogate_high + data;\\n      this._terminal.surrogate_high = '';\\n    }\\n\\n    for (; this._position < l; this._position++) {\\n      ch = data[this._position];\\n\\n      // FIXME: higher chars than 0xa0 are not allowed in escape sequences\\n      //        --> maybe move to default\\n      code = data.charCodeAt(this._position);\\n      if (0xD800 <= code && code <= 0xDBFF) {\\n        // we got a surrogate high\\n        // get surrogate low (next 2 bytes)\\n        low = data.charCodeAt(this._position + 1);\\n        if (isNaN(low)) {\\n          // end of data stream, save surrogate high\\n          this._terminal.surrogate_high = ch;\\n          continue;\\n        }\\n        code = ((code - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\\n        ch += data.charAt(this._position + 1);\\n      }\\n      // surrogate low - already handled above\\n      if (0xDC00 <= code && code <= 0xDFFF) {\\n        continue;\\n      }\\n\\n      switch (this._state) {\\n        case ParserState.NORMAL:\\n          if (ch in normalStateHandler) {\\n            normalStateHandler[ch](this, this._inputHandler);\\n          } else {\\n            this._inputHandler.addChar(ch, code);\\n          }\\n          break;\\n        case ParserState.ESCAPED:\\n          if (ch in escapedStateHandler) {\\n            escapedStateHandler[ch](this, this._terminal);\\n            // Skip switch as it was just handled\\n            break;\\n          }\\n          switch (ch) {\\n\\n            // ESC (,),*,+,-,. Designate G0-G2 Character Set.\\n            case '(': // <-- this seems to get all the attention\\n            case ')':\\n            case '*':\\n            case '+':\\n            case '-':\\n            case '.':\\n              switch (ch) {\\n                case '(':\\n                  this._terminal.gcharset = 0;\\n                  break;\\n                case ')':\\n                  this._terminal.gcharset = 1;\\n                  break;\\n                case '*':\\n                  this._terminal.gcharset = 2;\\n                  break;\\n                case '+':\\n                  this._terminal.gcharset = 3;\\n                  break;\\n                case '-':\\n                  this._terminal.gcharset = 1;\\n                  break;\\n                case '.':\\n                  this._terminal.gcharset = 2;\\n                  break;\\n              }\\n              this._state = ParserState.CHARSET;\\n              break;\\n\\n            // Designate G3 Character Set (VT300).\\n            // A = ISO Latin-1 Supplemental.\\n            // Not implemented.\\n            case '/':\\n              this._terminal.gcharset = 3;\\n              this._state = ParserState.CHARSET;\\n              this._position--;\\n              break;\\n\\n            // ESC N\\n            // Single Shift Select of G2 Character Set\\n            // ( SS2 is 0x8e). This affects next character only.\\n            case 'N':\\n              this._state = ParserState.NORMAL;\\n              break;\\n            // ESC O\\n            // Single Shift Select of G3 Character Set\\n            // ( SS3 is 0x8f). This affects next character only.\\n            case 'O':\\n              this._state = ParserState.NORMAL;\\n              break;\\n            // ESC n\\n            // Invoke the G2 Character Set as GL (LS2).\\n            case 'n':\\n              this._terminal.setgLevel(2);\\n              this._state = ParserState.NORMAL;\\n              break;\\n            // ESC o\\n            // Invoke the G3 Character Set as GL (LS3).\\n            case 'o':\\n              this._terminal.setgLevel(3);\\n              this._state = ParserState.NORMAL;\\n              break;\\n            // ESC |\\n            // Invoke the G3 Character Set as GR (LS3R).\\n            case '|':\\n              this._terminal.setgLevel(3);\\n              this._state = ParserState.NORMAL;\\n              break;\\n            // ESC }\\n            // Invoke the G2 Character Set as GR (LS2R).\\n            case '}':\\n              this._terminal.setgLevel(2);\\n              this._state = ParserState.NORMAL;\\n              break;\\n            // ESC ~\\n            // Invoke the G1 Character Set as GR (LS1R).\\n            case '~':\\n              this._terminal.setgLevel(1);\\n              this._state = ParserState.NORMAL;\\n              break;\\n\\n            // ESC 7 Save Cursor (DECSC).\\n            case '7':\\n              this._inputHandler.saveCursor();\\n              this._state = ParserState.NORMAL;\\n              break;\\n\\n            // ESC 8 Restore Cursor (DECRC).\\n            case '8':\\n              this._inputHandler.restoreCursor();\\n              this._state = ParserState.NORMAL;\\n              break;\\n\\n            // ESC # 3 DEC line height/width\\n            case '#':\\n              this._state = ParserState.NORMAL;\\n              this._position++;\\n              break;\\n\\n            // ESC H Tab Set (HTS is 0x88).\\n            case 'H':\\n              (<IInputHandlingTerminal>this._terminal).tabSet();\\n              this._state = ParserState.NORMAL;\\n              break;\\n\\n            // ESC = Application Keypad (DECKPAM).\\n            case '=':\\n              this._terminal.log('Serial port requested application keypad.');\\n              this._terminal.applicationKeypad = true;\\n              if (this._terminal.viewport) {\\n                this._terminal.viewport.syncScrollArea();\\n              }\\n              this._state = ParserState.NORMAL;\\n              break;\\n\\n            // ESC > Normal Keypad (DECKPNM).\\n            case '>':\\n              this._terminal.log('Switching back to normal keypad.');\\n              this._terminal.applicationKeypad = false;\\n              if (this._terminal.viewport) {\\n                this._terminal.viewport.syncScrollArea();\\n              }\\n              this._state = ParserState.NORMAL;\\n              break;\\n\\n            default:\\n              this._state = ParserState.NORMAL;\\n              this._terminal.error('Unknown ESC control: %s.', ch);\\n              break;\\n          }\\n          break;\\n\\n        case ParserState.CHARSET:\\n          if (ch in CHARSETS) {\\n            cs = CHARSETS[ch];\\n            if (ch === '/') { // ISOLatin is actually /A\\n              this.skipNextChar();\\n            }\\n          } else {\\n            cs = DEFAULT_CHARSET;\\n          }\\n          this._terminal.setgCharset(this._terminal.gcharset, cs);\\n          this._terminal.gcharset = null;\\n          this._state = ParserState.NORMAL;\\n          break;\\n\\n        case ParserState.OSC:\\n          // OSC Ps ; Pt ST\\n          // OSC Ps ; Pt BEL\\n          //   Set Text Parameters.\\n          if (ch === C0.ESC || ch === C0.BEL) {\\n            if (ch === C0.ESC) this._position++;\\n\\n            this._terminal.params.push(this._terminal.currentParam);\\n\\n            switch (this._terminal.params[0]) {\\n              case 0:\\n              case 1:\\n              case 2:\\n                if (this._terminal.params[1]) {\\n                  this._terminal.title = this._terminal.params[1];\\n                  this._terminal.handleTitle(this._terminal.title);\\n                }\\n                break;\\n              case 3:\\n                // set X property\\n                break;\\n              case 4:\\n              case 5:\\n                // change dynamic colors\\n                break;\\n              case 10:\\n              case 11:\\n              case 12:\\n              case 13:\\n              case 14:\\n              case 15:\\n              case 16:\\n              case 17:\\n              case 18:\\n              case 19:\\n                // change dynamic ui colors\\n                break;\\n              case 46:\\n                // change log file\\n                break;\\n              case 50:\\n                // dynamic font\\n                break;\\n              case 51:\\n                // emacs shell\\n                break;\\n              case 52:\\n                // manipulate selection data\\n                break;\\n              case 104:\\n              case 105:\\n              case 110:\\n              case 111:\\n              case 112:\\n              case 113:\\n              case 114:\\n              case 115:\\n              case 116:\\n              case 117:\\n              case 118:\\n                // reset colors\\n                break;\\n            }\\n\\n            this._terminal.params = [];\\n            this._terminal.currentParam = 0;\\n            this._state = ParserState.NORMAL;\\n          } else {\\n            if (!this._terminal.params.length) {\\n              if (ch >= '0' && ch <= '9') {\\n                this._terminal.currentParam =\\n                  this._terminal.currentParam * 10 + ch.charCodeAt(0) - 48;\\n              } else if (ch === ';') {\\n                this._terminal.params.push(this._terminal.currentParam);\\n                this._terminal.currentParam = '';\\n              }\\n            } else {\\n              this._terminal.currentParam += ch;\\n            }\\n          }\\n          break;\\n\\n        case ParserState.CSI_PARAM:\\n          if (ch in csiParamStateHandler) {\\n            csiParamStateHandler[ch](this);\\n            break;\\n          }\\n          this.finalizeParam();\\n          // Fall through the CSI as this character should be the CSI code.\\n          this._state = ParserState.CSI;\\n\\n        case ParserState.CSI:\\n          if (ch in csiStateHandler) {\\n            if (this._terminal.debug) {\\n              this._terminal.log(`CSI ${this._terminal.prefix ? this._terminal.prefix : ''} ${this._terminal.params ? this._terminal.params.join(';') : ''} ${this._terminal.postfix ? this._terminal.postfix : ''} ${ch}`);\\n            }\\n            csiStateHandler[ch](this._inputHandler, this._terminal.params, this._terminal.prefix, this._terminal.postfix, this);\\n          } else {\\n            this._terminal.error('Unknown CSI code: %s.', ch);\\n          }\\n\\n          this._state = ParserState.NORMAL;\\n          this._terminal.prefix = '';\\n          this._terminal.postfix = '';\\n          break;\\n\\n        case ParserState.DCS:\\n          if (ch === C0.ESC || ch === C0.BEL) {\\n            if (ch === C0.ESC) this._position++;\\n            let pt;\\n            let valid: boolean;\\n\\n            switch (this._terminal.prefix) {\\n              // User-Defined Keys (DECUDK).\\n              case '':\\n                break;\\n\\n              // Request Status String (DECRQSS).\\n              // test: echo -e '\\\\eP$q\\\"p\\\\e\\\\\\\\'\\n              case '$q':\\n                pt = this._terminal.currentParam;\\n                valid = false;\\n\\n                switch (pt) {\\n                  // DECSCA\\n                  case '\\\"q':\\n                    pt = '0\\\"q';\\n                    break;\\n\\n                  // DECSCL\\n                  case '\\\"p':\\n                    pt = '61\\\"p';\\n                    break;\\n\\n                  // DECSTBM\\n                  case 'r':\\n                    pt = ''\\n                      + (this._terminal.buffer.scrollTop + 1)\\n                      + ';'\\n                      + (this._terminal.buffer.scrollBottom + 1)\\n                      + 'r';\\n                    break;\\n\\n                  // SGR\\n                  case 'm':\\n                    pt = '0m';\\n                    break;\\n\\n                  default:\\n                    this._terminal.error('Unknown DCS Pt: %s.', pt);\\n                    pt = '';\\n                    break;\\n                }\\n\\n                this._terminal.send(C0.ESC + 'P' + +valid + '$r' + pt + C0.ESC + '\\\\\\\\');\\n                break;\\n\\n              // Set Termcap/Terminfo Data (xterm, experimental).\\n              case '+p':\\n                break;\\n\\n              // Request Termcap/Terminfo String (xterm, experimental)\\n              // Regular xterm does not even respond to this sequence.\\n              // This can cause a small glitch in vim.\\n              // test: echo -ne '\\\\eP+q6b64\\\\e\\\\\\\\'\\n              case '+q':\\n                pt = this._terminal.currentParam;\\n                valid = false;\\n\\n                this._terminal.send(C0.ESC + 'P' + +valid + '+r' + pt + C0.ESC + '\\\\\\\\');\\n                break;\\n\\n              default:\\n                this._terminal.error('Unknown DCS prefix: %s.', this._terminal.prefix);\\n                break;\\n            }\\n\\n            this._terminal.currentParam = 0;\\n            this._terminal.prefix = '';\\n            this._state = ParserState.NORMAL;\\n          } else if (!this._terminal.currentParam) {\\n            if (!this._terminal.prefix && ch !== '$' && ch !== '+') {\\n              this._terminal.currentParam = ch;\\n            } else if (this._terminal.prefix.length === 2) {\\n              this._terminal.currentParam = ch;\\n            } else {\\n              this._terminal.prefix += ch;\\n            }\\n          } else {\\n            this._terminal.currentParam += ch;\\n          }\\n          break;\\n\\n        case ParserState.IGNORE:\\n          // For PM and APC.\\n          if (ch === C0.ESC || ch === C0.BEL) {\\n            if (ch === C0.ESC) this._position++;\\n            this._state = ParserState.NORMAL;\\n          }\\n          break;\\n      }\\n    }\\n\\n    // Fire the cursormove event if it's moved. This is done inside the parser\\n    // as a render cannot happen in the middle of a parsing round.\\n    if (this._terminal.buffer.x !== cursorStartX || this._terminal.buffer.y !== cursorStartY) {\\n      this._terminal.emit('cursormove');\\n    }\\n\\n    return this._state;\\n  }\\n\\n  /**\\n   * Set the parser's current parsing state.\\n   *\\n   * @param state The new state.\\n   */\\n  public setState(state: ParserState): void {\\n    this._state = state;\\n  }\\n\\n  /**\\n   * Sets the parsier's current prefix. CSI codes can have prefixes of '?', '>'\\n   * or '!'.\\n   *\\n   * @param prefix The prefix.\\n   */\\n  public setPrefix(prefix: string): void {\\n    this._terminal.prefix = prefix;\\n  }\\n\\n  /**\\n   * Sets the parsier's current prefix. CSI codes can have postfixes of '$',\\n   * '\\\"', ' ', '\\\\''.\\n   *\\n   * @param postfix The postfix.\\n   */\\n  public setPostfix(postfix: string): void {\\n    this._terminal.postfix = postfix;\\n  }\\n\\n  /**\\n   * Sets the parser's current parameter.\\n   *\\n   * @param param the parameter.\\n   */\\n  public setParam(param: number): void {\\n    this._terminal.currentParam = param;\\n  }\\n\\n  /**\\n   * Gets the parser's current parameter.\\n   */\\n  public getParam(): number {\\n    return this._terminal.currentParam;\\n  }\\n\\n  /**\\n   * Finalizes the parser's current parameter, adding it to the list of\\n   * parameters and setting the new current parameter to 0.\\n   */\\n  public finalizeParam(): void {\\n    this._terminal.params.push(this._terminal.currentParam);\\n    this._terminal.currentParam = 0;\\n  }\\n\\n  /**\\n   * Tell the parser to skip the next character.\\n   */\\n  public skipNextChar(): void {\\n    this._position++;\\n  }\\n\\n  /**\\n   * Tell the parser to repeat parsing the current character (for example if it\\n   * needs parsing using a different state.\\n   */\\n  // public repeatChar(): void {\\n  //   this._position--;\\n  // }\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { IMouseZoneManager } from './input/Types';\\nimport { ILinkHoverEvent, ILinkMatcher, LinkMatcherHandler, LinkHoverEventTypes, ILinkMatcherOptions, ILinkifier, ITerminal } from './Types';\\nimport { MouseZone } from './input/MouseZoneManager';\\nimport { EventEmitter } from './EventEmitter';\\n\\n/**\\n * The Linkifier applies links to rows shortly after they have been refreshed.\\n */\\nexport class Linkifier extends EventEmitter implements ILinkifier {\\n  /**\\n   * The time to wait after a row is changed before it is linkified. This prevents\\n   * the costly operation of searching every row multiple times, potentially a\\n   * huge amount of times.\\n   */\\n  protected static TIME_BEFORE_LINKIFY = 200;\\n\\n  protected _linkMatchers: ILinkMatcher[] = [];\\n\\n  private _mouseZoneManager: IMouseZoneManager;\\n  private _rowsTimeoutId: number;\\n  private _nextLinkMatcherId = 0;\\n  private _rowsToLinkify: {start: number, end: number};\\n\\n  constructor(\\n    protected _terminal: ITerminal\\n  ) {\\n    super();\\n    this._rowsToLinkify = {\\n      start: null,\\n      end: null\\n    };\\n  }\\n\\n  /**\\n   * Attaches the linkifier to the DOM, enabling linkification.\\n   * @param mouseZoneManager The mouse zone manager to register link zones with.\\n   */\\n  public attachToDom(mouseZoneManager: IMouseZoneManager): void {\\n    this._mouseZoneManager = mouseZoneManager;\\n  }\\n\\n  /**\\n   * Queue linkification on a set of rows.\\n   * @param start The row to linkify from (inclusive).\\n   * @param end The row to linkify to (inclusive).\\n   */\\n  public linkifyRows(start: number, end: number): void {\\n    // Don't attempt linkify if not yet attached to DOM\\n    if (!this._mouseZoneManager) {\\n      return;\\n    }\\n\\n    // Increase range to linkify\\n    if (this._rowsToLinkify.start === null) {\\n      this._rowsToLinkify.start = start;\\n      this._rowsToLinkify.end = end;\\n    } else {\\n      this._rowsToLinkify.start = Math.min(this._rowsToLinkify.start, start);\\n      this._rowsToLinkify.end = Math.max(this._rowsToLinkify.end, end);\\n    }\\n\\n    // Clear out any existing links on this row range\\n    this._mouseZoneManager.clearAll(start, end);\\n\\n    // Restart timer\\n    if (this._rowsTimeoutId) {\\n      clearTimeout(this._rowsTimeoutId);\\n    }\\n    this._rowsTimeoutId = <number><any>setTimeout(() => this._linkifyRows(), Linkifier.TIME_BEFORE_LINKIFY);\\n  }\\n\\n  /**\\n   * Linkifies the rows requested.\\n   */\\n  private _linkifyRows(): void {\\n    this._rowsTimeoutId = null;\\n    for (let i = this._rowsToLinkify.start; i <= this._rowsToLinkify.end; i++) {\\n      this._linkifyRow(i);\\n    }\\n    this._rowsToLinkify.start = null;\\n    this._rowsToLinkify.end = null;\\n  }\\n\\n  /**\\n   * Registers a link matcher, allowing custom link patterns to be matched and\\n   * handled.\\n   * @param regex The regular expression to search for. Specifically, this\\n   * searches the textContent of the rows. You will want to use \\\\s to match a\\n   * space ' ' character for example.\\n   * @param handler The callback when the link is called.\\n   * @param options Options for the link matcher.\\n   * @return The ID of the new matcher, this can be used to deregister.\\n   */\\n  public registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options: ILinkMatcherOptions = {}): number {\\n    if (!handler) {\\n      throw new Error('handler must be defined');\\n    }\\n    const matcher: ILinkMatcher = {\\n      id: this._nextLinkMatcherId++,\\n      regex,\\n      handler,\\n      matchIndex: options.matchIndex,\\n      validationCallback: options.validationCallback,\\n      hoverTooltipCallback: options.tooltipCallback,\\n      hoverLeaveCallback: options.leaveCallback,\\n      willLinkActivate: options.willLinkActivate,\\n      priority: options.priority || 0\\n    };\\n    this._addLinkMatcherToList(matcher);\\n    return matcher.id;\\n  }\\n\\n  /**\\n   * Inserts a link matcher to the list in the correct position based on the\\n   * priority of each link matcher. New link matchers of equal priority are\\n   * considered after older link matchers.\\n   * @param matcher The link matcher to be added.\\n   */\\n  private _addLinkMatcherToList(matcher: ILinkMatcher): void {\\n    if (this._linkMatchers.length === 0) {\\n      this._linkMatchers.push(matcher);\\n      return;\\n    }\\n\\n    for (let i = this._linkMatchers.length - 1; i >= 0; i--) {\\n      if (matcher.priority <= this._linkMatchers[i].priority) {\\n        this._linkMatchers.splice(i + 1, 0, matcher);\\n        return;\\n      }\\n    }\\n\\n    this._linkMatchers.splice(0, 0, matcher);\\n  }\\n\\n  /**\\n   * Deregisters a link matcher if it has been registered.\\n   * @param matcherId The link matcher's ID (returned after register)\\n   * @return Whether a link matcher was found and deregistered.\\n   */\\n  public deregisterLinkMatcher(matcherId: number): boolean {\\n    for (let i = 0; i < this._linkMatchers.length; i++) {\\n      if (this._linkMatchers[i].id === matcherId) {\\n        this._linkMatchers.splice(i, 1);\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * Linkifies a row.\\n   * @param rowIndex The index of the row to linkify.\\n   */\\n  private _linkifyRow(rowIndex: number): void {\\n    // Ensure the row exists\\n    let absoluteRowIndex = this._terminal.buffer.ydisp + rowIndex;\\n    if (absoluteRowIndex >= this._terminal.buffer.lines.length) {\\n      return;\\n    }\\n\\n    if ((<any>this._terminal.buffer.lines.get(absoluteRowIndex)).isWrapped) {\\n      // Only attempt to linkify rows that start in the viewport\\n      if (rowIndex !== 0) {\\n        return;\\n      }\\n      // If the first row is wrapped, backtrack to find the origin row and linkify that\\n      do {\\n        rowIndex--;\\n        absoluteRowIndex--;\\n      } while ((<any>this._terminal.buffer.lines.get(absoluteRowIndex)).isWrapped);\\n    }\\n\\n    // Construct full unwrapped line text\\n    let text = this._terminal.buffer.translateBufferLineToString(absoluteRowIndex, false);\\n    let currentIndex = absoluteRowIndex + 1;\\n    while (currentIndex < this._terminal.buffer.lines.length &&\\n        (<any>this._terminal.buffer.lines.get(currentIndex)).isWrapped) {\\n      text += this._terminal.buffer.translateBufferLineToString(currentIndex++, false);\\n    }\\n\\n    for (let i = 0; i < this._linkMatchers.length; i++) {\\n      this._doLinkifyRow(rowIndex, text, this._linkMatchers[i]);\\n    }\\n  }\\n\\n  /**\\n   * Linkifies a row given a specific handler.\\n   * @param rowIndex The row index to linkify.\\n   * @param text The text of the row (excludes text in the row that's already\\n   * linkified).\\n   * @param matcher The link matcher for this line.\\n   * @param offset The how much of the row has already been linkified.\\n   * @return The link element(s) that were added.\\n   */\\n  private _doLinkifyRow(rowIndex: number, text: string, matcher: ILinkMatcher, offset: number = 0): void {\\n    // Find the first match\\n    let match = text.match(matcher.regex);\\n    if (!match || match.length === 0) {\\n      return;\\n    }\\n    let uri = match[typeof matcher.matchIndex !== 'number' ? 0 : matcher.matchIndex];\\n\\n    // Get index, match.index is for the outer match which includes negated chars\\n    const index = text.indexOf(uri);\\n\\n    // Ensure the link is valid before registering\\n    if (matcher.validationCallback) {\\n      matcher.validationCallback(uri, isValid => {\\n        // Discard link if the line has already changed\\n        if (this._rowsTimeoutId) {\\n          return;\\n        }\\n        if (isValid) {\\n          this._addLink(offset + index, rowIndex, uri, matcher);\\n        }\\n      });\\n    } else {\\n      this._addLink(offset + index, rowIndex, uri, matcher);\\n    }\\n\\n    // Recursively check for links in the rest of the text\\n    const remainingStartIndex = index + uri.length;\\n    const remainingText = text.substr(remainingStartIndex);\\n    if (remainingText.length > 0) {\\n      this._doLinkifyRow(rowIndex, remainingText, matcher, offset + remainingStartIndex);\\n    }\\n  }\\n\\n  /**\\n   * Registers a link to the mouse zone manager.\\n   * @param x The column the link starts.\\n   * @param y The row the link is on.\\n   * @param uri The URI of the link.\\n   * @param matcher The link matcher for the link.\\n   */\\n  private _addLink(x: number, y: number, uri: string, matcher: ILinkMatcher): void {\\n    const x1 = x % this._terminal.cols;\\n    const y1 = y + Math.floor(x / this._terminal.cols);\\n    let x2 = (x1 + uri.length) % this._terminal.cols;\\n    let y2 = y1 + Math.floor((x1 + uri.length) / this._terminal.cols);\\n    if (x2 === 0) {\\n      x2 = this._terminal.cols;\\n      y2--;\\n    }\\n\\n    this._mouseZoneManager.add(new MouseZone(\\n      x1 + 1,\\n      y1 + 1,\\n      x2 + 1,\\n      y2 + 1,\\n      e => {\\n        if (matcher.handler) {\\n          return matcher.handler(e, uri);\\n        }\\n        window.open(uri, '_blank');\\n      },\\n      e => {\\n        this.emit(LinkHoverEventTypes.HOVER, this._createLinkHoverEvent(x1, y1, x2, y2));\\n        this._terminal.element.classList.add('xterm-cursor-pointer');\\n      },\\n      e => {\\n        this.emit(LinkHoverEventTypes.TOOLTIP, this._createLinkHoverEvent(x1, y1, x2, y2));\\n        if (matcher.hoverTooltipCallback) {\\n          matcher.hoverTooltipCallback(e, uri);\\n        }\\n      },\\n      () => {\\n        this.emit(LinkHoverEventTypes.LEAVE, this._createLinkHoverEvent(x1, y1, x2, y2));\\n        this._terminal.element.classList.remove('xterm-cursor-pointer');\\n        if (matcher.hoverLeaveCallback) {\\n          matcher.hoverLeaveCallback();\\n        }\\n      },\\n      e => {\\n        if (matcher.willLinkActivate) {\\n          return matcher.willLinkActivate(e, uri);\\n        }\\n        return true;\\n      }\\n    ));\\n  }\\n\\n  private _createLinkHoverEvent(x1: number, y1: number, x2: number, y2: number): ILinkHoverEvent {\\n    return { x1, y1, x2, y2, cols: this._terminal.cols };\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\\n * @license MIT\\n */\\n\\nimport { CharData, IInputHandler, IInputHandlingTerminal } from './Types';\\nimport { C0 } from './EscapeSequences';\\nimport { DEFAULT_CHARSET } from './Charsets';\\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX } from './Buffer';\\nimport { FLAGS } from './renderer/Types';\\nimport { wcwidth } from './CharWidth';\\n\\n/**\\n * The terminal's standard implementation of IInputHandler, this handles all\\n * input from the Parser.\\n *\\n * Refer to http://invisible-island.net/xterm/ctlseqs/ctlseqs.html to understand\\n * each function's header comment.\\n */\\nexport class InputHandler implements IInputHandler {\\n  constructor(private _terminal: IInputHandlingTerminal) { }\\n\\n  public addChar(char: string, code: number): void {\\n    if (char >= ' ') {\\n      // calculate print space\\n      // expensive call, therefore we save width in line buffer\\n      const chWidth = wcwidth(code);\\n\\n      if (this._terminal.charset && this._terminal.charset[char]) {\\n        char = this._terminal.charset[char];\\n      }\\n\\n      if (this._terminal.options.screenReaderMode) {\\n        this._terminal.emit('a11y.char', char);\\n      }\\n\\n      let row = this._terminal.buffer.y + this._terminal.buffer.ybase;\\n\\n      // insert combining char in last cell\\n      // FIXME: needs handling after cursor jumps\\n      if (!chWidth && this._terminal.buffer.x) {\\n        // dont overflow left\\n        if (this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1]) {\\n          if (!this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1][CHAR_DATA_WIDTH_INDEX]) {\\n            // found empty cell after fullwidth, need to go 2 cells back\\n            if (this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 2]) {\\n              this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 2][CHAR_DATA_CHAR_INDEX] += char;\\n              this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 2][3] = char.charCodeAt(0);\\n            }\\n          } else {\\n            this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1][CHAR_DATA_CHAR_INDEX] += char;\\n            this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1][3] = char.charCodeAt(0);\\n          }\\n          this._terminal.updateRange(this._terminal.buffer.y);\\n        }\\n        return;\\n      }\\n\\n      // goto next line if ch would overflow\\n      // TODO: needs a global min terminal width of 2\\n      if (this._terminal.buffer.x + chWidth - 1 >= this._terminal.cols) {\\n        // autowrap - DECAWM\\n        if (this._terminal.wraparoundMode) {\\n          this._terminal.buffer.x = 0;\\n          this._terminal.buffer.y++;\\n          if (this._terminal.buffer.y > this._terminal.buffer.scrollBottom) {\\n            this._terminal.buffer.y--;\\n            this._terminal.scroll(true);\\n          } else {\\n            // The line already exists (eg. the initial viewport), mark it as a\\n            // wrapped line\\n            (<any>this._terminal.buffer.lines.get(this._terminal.buffer.y)).isWrapped = true;\\n          }\\n        } else {\\n          if (chWidth === 2) { // FIXME: check for xterm behavior\\n            return;\\n          }\\n        }\\n      }\\n      row = this._terminal.buffer.y + this._terminal.buffer.ybase;\\n\\n      // insert mode: move characters to right\\n      if (this._terminal.insertMode) {\\n        // do this twice for a fullwidth char\\n        for (let moves = 0; moves < chWidth; ++moves) {\\n          // remove last cell, if it's width is 0\\n          // we have to adjust the second last cell as well\\n          const removed = this._terminal.buffer.lines.get(this._terminal.buffer.y + this._terminal.buffer.ybase).pop();\\n          if (removed[CHAR_DATA_WIDTH_INDEX] === 0\\n              && this._terminal.buffer.lines.get(row)[this._terminal.cols - 2]\\n              && this._terminal.buffer.lines.get(row)[this._terminal.cols - 2][CHAR_DATA_WIDTH_INDEX] === 2) {\\n            this._terminal.buffer.lines.get(row)[this._terminal.cols - 2] = [this._terminal.curAttr, ' ', 1, ' '.charCodeAt(0)];\\n          }\\n\\n          // insert empty cell at cursor\\n          this._terminal.buffer.lines.get(row).splice(this._terminal.buffer.x, 0, [this._terminal.curAttr, ' ', 1, ' '.charCodeAt(0)]);\\n        }\\n      }\\n\\n      this._terminal.buffer.lines.get(row)[this._terminal.buffer.x] = [this._terminal.curAttr, char, chWidth, char.charCodeAt(0)];\\n      this._terminal.buffer.x++;\\n      this._terminal.updateRange(this._terminal.buffer.y);\\n\\n      // fullwidth char - set next cell width to zero and advance cursor\\n      if (chWidth === 2) {\\n        this._terminal.buffer.lines.get(row)[this._terminal.buffer.x] = [this._terminal.curAttr, '', 0, undefined];\\n        this._terminal.buffer.x++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * BEL\\n   * Bell (Ctrl-G).\\n   */\\n  public bell(): void {\\n    this._terminal.bell();\\n  }\\n\\n  /**\\n   * LF\\n   * Line Feed or New Line (NL).  (LF  is Ctrl-J).\\n   */\\n  public lineFeed(): void {\\n    if (this._terminal.convertEol) {\\n      this._terminal.buffer.x = 0;\\n    }\\n    this._terminal.buffer.y++;\\n    if (this._terminal.buffer.y > this._terminal.buffer.scrollBottom) {\\n      this._terminal.buffer.y--;\\n      this._terminal.scroll();\\n    }\\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\\n    if (this._terminal.buffer.x >= this._terminal.cols) {\\n      this._terminal.buffer.x--;\\n    }\\n    /**\\n     * This event is emitted whenever the terminal outputs a LF or NL.\\n     *\\n     * @event linefeed\\n     */\\n    this._terminal.emit('linefeed');\\n  }\\n\\n  /**\\n   * CR\\n   * Carriage Return (Ctrl-M).\\n   */\\n  public carriageReturn(): void {\\n    this._terminal.buffer.x = 0;\\n  }\\n\\n  /**\\n   * BS\\n   * Backspace (Ctrl-H).\\n   */\\n  public backspace(): void {\\n    if (this._terminal.buffer.x > 0) {\\n      this._terminal.buffer.x--;\\n    }\\n  }\\n\\n  /**\\n   * TAB\\n   * Horizontal Tab (HT) (Ctrl-I).\\n   */\\n  public tab(): void {\\n    const originalX = this._terminal.buffer.x;\\n    this._terminal.buffer.x = this._terminal.buffer.nextStop();\\n    if (this._terminal.options.screenReaderMode) {\\n      this._terminal.emit('a11y.tab', this._terminal.buffer.x - originalX);\\n    }\\n  }\\n\\n  /**\\n   * SO\\n   * Shift Out (Ctrl-N) -> Switch to Alternate Character Set.  This invokes the\\n   * G1 character set.\\n   */\\n  public shiftOut(): void {\\n    this._terminal.setgLevel(1);\\n  }\\n\\n  /**\\n   * SI\\n   * Shift In (Ctrl-O) -> Switch to Standard Character Set.  This invokes the G0\\n   * character set (the default).\\n   */\\n  public shiftIn(): void {\\n    this._terminal.setgLevel(0);\\n  }\\n\\n  /**\\n   * CSI Ps @\\n   * Insert Ps (Blank) Character(s) (default = 1) (ICH).\\n   */\\n  public insertChars(params: number[]): void {\\n    let param = params[0];\\n    if (param < 1) param = 1;\\n\\n    const row = this._terminal.buffer.y + this._terminal.buffer.ybase;\\n    let j = this._terminal.buffer.x;\\n    const ch: CharData = [this._terminal.eraseAttr(), ' ', 1, 32]; // xterm\\n\\n    while (param-- && j < this._terminal.cols) {\\n      this._terminal.buffer.lines.get(row).splice(j++, 0, ch);\\n      this._terminal.buffer.lines.get(row).pop();\\n    }\\n  }\\n\\n  /**\\n   * CSI Ps A\\n   * Cursor Up Ps Times (default = 1) (CUU).\\n   */\\n  public cursorUp(params: number[]): void {\\n    let param = params[0];\\n    if (param < 1) {\\n      param = 1;\\n    }\\n    this._terminal.buffer.y -= param;\\n    if (this._terminal.buffer.y < 0) {\\n      this._terminal.buffer.y = 0;\\n    }\\n  }\\n\\n  /**\\n   * CSI Ps B\\n   * Cursor Down Ps Times (default = 1) (CUD).\\n   */\\n  public cursorDown(params: number[]): void {\\n    let param = params[0];\\n    if (param < 1) {\\n      param = 1;\\n    }\\n    this._terminal.buffer.y += param;\\n    if (this._terminal.buffer.y >= this._terminal.rows) {\\n      this._terminal.buffer.y = this._terminal.rows - 1;\\n    }\\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\\n    if (this._terminal.buffer.x >= this._terminal.cols) {\\n      this._terminal.buffer.x--;\\n    }\\n  }\\n\\n  /**\\n   * CSI Ps C\\n   * Cursor Forward Ps Times (default = 1) (CUF).\\n   */\\n  public cursorForward(params: number[]): void {\\n    let param = params[0];\\n    if (param < 1) {\\n      param = 1;\\n    }\\n    this._terminal.buffer.x += param;\\n    if (this._terminal.buffer.x >= this._terminal.cols) {\\n      this._terminal.buffer.x = this._terminal.cols - 1;\\n    }\\n  }\\n\\n  /**\\n   * CSI Ps D\\n   * Cursor Backward Ps Times (default = 1) (CUB).\\n   */\\n  public cursorBackward(params: number[]): void {\\n    let param = params[0];\\n    if (param < 1) {\\n      param = 1;\\n    }\\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\\n    if (this._terminal.buffer.x >= this._terminal.cols) {\\n      this._terminal.buffer.x--;\\n    }\\n    this._terminal.buffer.x -= param;\\n    if (this._terminal.buffer.x < 0) {\\n      this._terminal.buffer.x = 0;\\n    }\\n  }\\n\\n  /**\\n   * CSI Ps E\\n   * Cursor Next Line Ps Times (default = 1) (CNL).\\n   * same as CSI Ps B ?\\n   */\\n  public cursorNextLine(params: number[]): void {\\n    let param = params[0];\\n    if (param < 1) {\\n      param = 1;\\n    }\\n    this._terminal.buffer.y += param;\\n    if (this._terminal.buffer.y >= this._terminal.rows) {\\n      this._terminal.buffer.y = this._terminal.rows - 1;\\n    }\\n    this._terminal.buffer.x = 0;\\n  }\\n\\n\\n  /**\\n   * CSI Ps F\\n   * Cursor Preceding Line Ps Times (default = 1) (CNL).\\n   * reuse CSI Ps A ?\\n   */\\n  public cursorPrecedingLine(params: number[]): void {\\n    let param = params[0];\\n    if (param < 1) {\\n      param = 1;\\n    }\\n    this._terminal.buffer.y -= param;\\n    if (this._terminal.buffer.y < 0) {\\n      this._terminal.buffer.y = 0;\\n    }\\n    this._terminal.buffer.x = 0;\\n  }\\n\\n\\n  /**\\n   * CSI Ps G\\n   * Cursor Character Absolute  [column] (default = [row,1]) (CHA).\\n   */\\n  public cursorCharAbsolute(params: number[]): void {\\n    let param = params[0];\\n    if (param < 1) {\\n      param = 1;\\n    }\\n    this._terminal.buffer.x = param - 1;\\n  }\\n\\n  /**\\n   * CSI Ps ; Ps H\\n   * Cursor Position [row;column] (default = [1,1]) (CUP).\\n   */\\n  public cursorPosition(params: number[]): void {\\n    let col: number;\\n    let row: number = params[0] - 1;\\n\\n    if (params.length >= 2) {\\n      col = params[1] - 1;\\n    } else {\\n      col = 0;\\n    }\\n\\n    if (row < 0) {\\n      row = 0;\\n    } else if (row >= this._terminal.rows) {\\n      row = this._terminal.rows - 1;\\n    }\\n\\n    if (col < 0) {\\n      col = 0;\\n    } else if (col >= this._terminal.cols) {\\n      col = this._terminal.cols - 1;\\n    }\\n\\n    this._terminal.buffer.x = col;\\n    this._terminal.buffer.y = row;\\n  }\\n\\n  /**\\n   * CSI Ps I\\n   *   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\\n   */\\n  public cursorForwardTab(params: number[]): void {\\n    let param = params[0] || 1;\\n    while (param--) {\\n      this._terminal.buffer.x = this._terminal.buffer.nextStop();\\n    }\\n  }\\n\\n  /**\\n   * CSI Ps J  Erase in Display (ED).\\n   *     Ps = 0  -> Erase Below (default).\\n   *     Ps = 1  -> Erase Above.\\n   *     Ps = 2  -> Erase All.\\n   *     Ps = 3  -> Erase Saved Lines (xterm).\\n   * CSI ? Ps J\\n   *   Erase in Display (DECSED).\\n   *     Ps = 0  -> Selective Erase Below (default).\\n   *     Ps = 1  -> Selective Erase Above.\\n   *     Ps = 2  -> Selective Erase All.\\n   */\\n  public eraseInDisplay(params: number[]): void {\\n    let j;\\n    switch (params[0]) {\\n      case 0:\\n        this._terminal.eraseRight(this._terminal.buffer.x, this._terminal.buffer.y);\\n        j = this._terminal.buffer.y + 1;\\n        for (; j < this._terminal.rows; j++) {\\n          this._terminal.eraseLine(j);\\n        }\\n        break;\\n      case 1:\\n        this._terminal.eraseLeft(this._terminal.buffer.x, this._terminal.buffer.y);\\n        j = this._terminal.buffer.y;\\n        while (j--) {\\n          this._terminal.eraseLine(j);\\n        }\\n        break;\\n      case 2:\\n        j = this._terminal.rows;\\n        while (j--) this._terminal.eraseLine(j);\\n        break;\\n      case 3:\\n        // Clear scrollback (everything not in viewport)\\n        const scrollBackSize = this._terminal.buffer.lines.length - this._terminal.rows;\\n        if (scrollBackSize > 0) {\\n          this._terminal.buffer.lines.trimStart(scrollBackSize);\\n          this._terminal.buffer.ybase = Math.max(this._terminal.buffer.ybase - scrollBackSize, 0);\\n          this._terminal.buffer.ydisp = Math.max(this._terminal.buffer.ydisp - scrollBackSize, 0);\\n          // Force a scroll event to refresh viewport\\n          this._terminal.emit('scroll', 0);\\n        }\\n        break;\\n    }\\n  }\\n\\n  /**\\n   * CSI Ps K  Erase in Line (EL).\\n   *     Ps = 0  -> Erase to Right (default).\\n   *     Ps = 1  -> Erase to Left.\\n   *     Ps = 2  -> Erase All.\\n   * CSI ? Ps K\\n   *   Erase in Line (DECSEL).\\n   *     Ps = 0  -> Selective Erase to Right (default).\\n   *     Ps = 1  -> Selective Erase to Left.\\n   *     Ps = 2  -> Selective Erase All.\\n   */\\n  public eraseInLine(params: number[]): void {\\n    switch (params[0]) {\\n      case 0:\\n        this._terminal.eraseRight(this._terminal.buffer.x, this._terminal.buffer.y);\\n        break;\\n      case 1:\\n        this._terminal.eraseLeft(this._terminal.buffer.x, this._terminal.buffer.y);\\n        break;\\n      case 2:\\n        this._terminal.eraseLine(this._terminal.buffer.y);\\n        break;\\n    }\\n  }\\n\\n  /**\\n   * CSI Ps L\\n   * Insert Ps Line(s) (default = 1) (IL).\\n   */\\n  public insertLines(params: number[]): void {\\n    let param: number = params[0];\\n    if (param < 1) {\\n      param = 1;\\n    }\\n    let row: number = this._terminal.buffer.y + this._terminal.buffer.ybase;\\n\\n    let scrollBottomRowsOffset = this._terminal.rows - 1 - this._terminal.buffer.scrollBottom;\\n    let scrollBottomAbsolute = this._terminal.rows - 1 + this._terminal.buffer.ybase - scrollBottomRowsOffset + 1;\\n    while (param--) {\\n      // test: echo -e '\\\\e[44m\\\\e[1L\\\\e[0m'\\n      // blankLine(true) - xterm/linux behavior\\n      this._terminal.buffer.lines.splice(scrollBottomAbsolute - 1, 1);\\n      this._terminal.buffer.lines.splice(row, 0, this._terminal.blankLine(true));\\n    }\\n\\n    // this.maxRange();\\n    this._terminal.updateRange(this._terminal.buffer.y);\\n    this._terminal.updateRange(this._terminal.buffer.scrollBottom);\\n  }\\n\\n  /**\\n   * CSI Ps M\\n   * Delete Ps Line(s) (default = 1) (DL).\\n   */\\n  public deleteLines(params: number[]): void {\\n    let param = params[0];\\n    if (param < 1) {\\n      param = 1;\\n    }\\n    const row: number = this._terminal.buffer.y + this._terminal.buffer.ybase;\\n\\n    let j: number;\\n    j = this._terminal.rows - 1 - this._terminal.buffer.scrollBottom;\\n    j = this._terminal.rows - 1 + this._terminal.buffer.ybase - j;\\n    while (param--) {\\n      // test: echo -e '\\\\e[44m\\\\e[1M\\\\e[0m'\\n      // blankLine(true) - xterm/linux behavior\\n      this._terminal.buffer.lines.splice(row, 1);\\n      this._terminal.buffer.lines.splice(j, 0, this._terminal.blankLine(true));\\n    }\\n\\n    // this.maxRange();\\n    this._terminal.updateRange(this._terminal.buffer.y);\\n    this._terminal.updateRange(this._terminal.buffer.scrollBottom);\\n  }\\n\\n  /**\\n   * CSI Ps P\\n   * Delete Ps Character(s) (default = 1) (DCH).\\n   */\\n  public deleteChars(params: number[]): void {\\n    let param: number = params[0];\\n    if (param < 1) {\\n      param = 1;\\n    }\\n\\n    const row = this._terminal.buffer.y + this._terminal.buffer.ybase;\\n    const ch: CharData = [this._terminal.eraseAttr(), ' ', 1, 32]; // xterm\\n\\n    while (param--) {\\n      this._terminal.buffer.lines.get(row).splice(this._terminal.buffer.x, 1);\\n      this._terminal.buffer.lines.get(row).push(ch);\\n    }\\n    this._terminal.updateRange(this._terminal.buffer.y);\\n  }\\n\\n  /**\\n   * CSI Ps S  Scroll up Ps lines (default = 1) (SU).\\n   */\\n  public scrollUp(params: number[]): void {\\n    let param = params[0] || 1;\\n    while (param--) {\\n      this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollTop, 1);\\n      this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollBottom, 0, this._terminal.blankLine());\\n    }\\n    // this.maxRange();\\n    this._terminal.updateRange(this._terminal.buffer.scrollTop);\\n    this._terminal.updateRange(this._terminal.buffer.scrollBottom);\\n  }\\n\\n  /**\\n   * CSI Ps T  Scroll down Ps lines (default = 1) (SD).\\n   */\\n  public scrollDown(params: number[]): void {\\n    let param = params[0] || 1;\\n    while (param--) {\\n      this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollBottom, 1);\\n      this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollTop, 0, this._terminal.blankLine());\\n    }\\n    // this.maxRange();\\n    this._terminal.updateRange(this._terminal.buffer.scrollTop);\\n    this._terminal.updateRange(this._terminal.buffer.scrollBottom);\\n  }\\n\\n  /**\\n   * CSI Ps X\\n   * Erase Ps Character(s) (default = 1) (ECH).\\n   */\\n  public eraseChars(params: number[]): void {\\n    let param = params[0];\\n    if (param < 1) {\\n      param = 1;\\n    }\\n\\n    const row = this._terminal.buffer.y + this._terminal.buffer.ybase;\\n    let j = this._terminal.buffer.x;\\n    const ch: CharData = [this._terminal.eraseAttr(), ' ', 1, 32]; // xterm\\n\\n    while (param-- && j < this._terminal.cols) {\\n      this._terminal.buffer.lines.get(row)[j++] = ch;\\n    }\\n  }\\n\\n  /**\\n   * CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\\n   */\\n  public cursorBackwardTab(params: number[]): void {\\n    let param = params[0] || 1;\\n    while (param--) {\\n      this._terminal.buffer.x = this._terminal.buffer.prevStop();\\n    }\\n  }\\n\\n  /**\\n   * CSI Pm `  Character Position Absolute\\n   *   [column] (default = [row,1]) (HPA).\\n   */\\n  public charPosAbsolute(params: number[]): void {\\n    let param = params[0];\\n    if (param < 1) {\\n      param = 1;\\n    }\\n    this._terminal.buffer.x = param - 1;\\n    if (this._terminal.buffer.x >= this._terminal.cols) {\\n      this._terminal.buffer.x = this._terminal.cols - 1;\\n    }\\n  }\\n\\n  /**\\n   * CSI Pm a  Character Position Relative\\n   *   [columns] (default = [row,col+1]) (HPR)\\n   * reuse CSI Ps C ?\\n   */\\n  public HPositionRelative(params: number[]): void {\\n    let param = params[0];\\n    if (param < 1) {\\n      param = 1;\\n    }\\n    this._terminal.buffer.x += param;\\n    if (this._terminal.buffer.x >= this._terminal.cols) {\\n      this._terminal.buffer.x = this._terminal.cols - 1;\\n    }\\n  }\\n\\n  /**\\n   * CSI Ps b  Repeat the preceding graphic character Ps times (REP).\\n   */\\n  public repeatPrecedingCharacter(params: number[]): void {\\n    let param = params[0] || 1;\\n    const line = this._terminal.buffer.lines.get(this._terminal.buffer.ybase + this._terminal.buffer.y);\\n    const ch = line[this._terminal.buffer.x - 1] || [this._terminal.defAttr, ' ', 1, 32];\\n\\n    while (param--) {\\n      line[this._terminal.buffer.x++] = ch;\\n    }\\n  }\\n\\n  /**\\n   * CSI Ps c  Send Device Attributes (Primary DA).\\n   *     Ps = 0  or omitted -> request attributes from terminal.  The\\n   *     response depends on the decTerminalID resource setting.\\n   *     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')\\n   *     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')\\n   *     -> CSI ? 6 c  (``VT102'')\\n   *     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')\\n   *   The VT100-style response parameters do not mean anything by\\n   *   themselves.  VT220 parameters do, telling the host what fea-\\n   *   tures the terminal supports:\\n   *     Ps = 1  -> 132-columns.\\n   *     Ps = 2  -> Printer.\\n   *     Ps = 6  -> Selective erase.\\n   *     Ps = 8  -> User-defined keys.\\n   *     Ps = 9  -> National replacement character sets.\\n   *     Ps = 1 5  -> Technical characters.\\n   *     Ps = 2 2  -> ANSI color, e.g., VT525.\\n   *     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).\\n   * CSI > Ps c\\n   *   Send Device Attributes (Secondary DA).\\n   *     Ps = 0  or omitted -> request the terminal's identification\\n   *     code.  The response depends on the decTerminalID resource set-\\n   *     ting.  It should apply only to VT220 and up, but xterm extends\\n   *     this to VT100.\\n   *     -> CSI  > Pp ; Pv ; Pc c\\n   *   where Pp denotes the terminal type\\n   *     Pp = 0  -> ``VT100''.\\n   *     Pp = 1  -> ``VT220''.\\n   *   and Pv is the firmware version (for xterm, this was originally\\n   *   the XFree86 patch number, starting with 95).  In a DEC termi-\\n   *   nal, Pc indicates the ROM cartridge registration number and is\\n   *   always zero.\\n   * More information:\\n   *   xterm/charproc.c - line 2012, for more information.\\n   *   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)\\n   */\\n  public sendDeviceAttributes(params: number[]): void {\\n    if (params[0] > 0) {\\n      return;\\n    }\\n\\n    if (!this._terminal.prefix) {\\n      if (this._terminal.is('xterm') || this._terminal.is('rxvt-unicode') || this._terminal.is('screen')) {\\n        this._terminal.send(C0.ESC + '[?1;2c');\\n      } else if (this._terminal.is('linux')) {\\n        this._terminal.send(C0.ESC + '[?6c');\\n      }\\n    } else if (this._terminal.prefix === '>') {\\n      // xterm and urxvt\\n      // seem to spit this\\n      // out around ~370 times (?).\\n      if (this._terminal.is('xterm')) {\\n        this._terminal.send(C0.ESC + '[>0;276;0c');\\n      } else if (this._terminal.is('rxvt-unicode')) {\\n        this._terminal.send(C0.ESC + '[>85;95;0c');\\n      } else if (this._terminal.is('linux')) {\\n        // not supported by linux console.\\n        // linux console echoes parameters.\\n        this._terminal.send(params[0] + 'c');\\n      } else if (this._terminal.is('screen')) {\\n        this._terminal.send(C0.ESC + '[>83;40003;0c');\\n      }\\n    }\\n  }\\n\\n  /**\\n   * CSI Pm d  Vertical Position Absolute (VPA)\\n   *   [row] (default = [1,column])\\n   */\\n  public linePosAbsolute(params: number[]): void {\\n    let param = params[0];\\n    if (param < 1) {\\n      param = 1;\\n    }\\n    this._terminal.buffer.y = param - 1;\\n    if (this._terminal.buffer.y >= this._terminal.rows) {\\n      this._terminal.buffer.y = this._terminal.rows - 1;\\n    }\\n  }\\n\\n  /**\\n   * CSI Pm e  Vertical Position Relative (VPR)\\n   *   [rows] (default = [row+1,column])\\n   * reuse CSI Ps B ?\\n   */\\n  public VPositionRelative(params: number[]): void {\\n    let param = params[0];\\n    if (param < 1) {\\n      param = 1;\\n    }\\n    this._terminal.buffer.y += param;\\n    if (this._terminal.buffer.y >= this._terminal.rows) {\\n      this._terminal.buffer.y = this._terminal.rows - 1;\\n    }\\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\\n    if (this._terminal.buffer.x >= this._terminal.cols) {\\n      this._terminal.buffer.x--;\\n    }\\n  }\\n\\n  /**\\n   * CSI Ps ; Ps f\\n   *   Horizontal and Vertical Position [row;column] (default =\\n   *   [1,1]) (HVP).\\n   */\\n  public HVPosition(params: number[]): void {\\n    if (params[0] < 1) params[0] = 1;\\n    if (params[1] < 1) params[1] = 1;\\n\\n    this._terminal.buffer.y = params[0] - 1;\\n    if (this._terminal.buffer.y >= this._terminal.rows) {\\n      this._terminal.buffer.y = this._terminal.rows - 1;\\n    }\\n\\n    this._terminal.buffer.x = params[1] - 1;\\n    if (this._terminal.buffer.x >= this._terminal.cols) {\\n      this._terminal.buffer.x = this._terminal.cols - 1;\\n    }\\n  }\\n\\n  /**\\n   * CSI Ps g  Tab Clear (TBC).\\n   *     Ps = 0  -> Clear Current Column (default).\\n   *     Ps = 3  -> Clear All.\\n   * Potentially:\\n   *   Ps = 2  -> Clear Stops on Line.\\n   *   http://vt100.net/annarbor/aaa-ug/section6.html\\n   */\\n  public tabClear(params: number[]): void {\\n    let param = params[0];\\n    if (param <= 0) {\\n      delete this._terminal.buffer.tabs[this._terminal.buffer.x];\\n    } else if (param === 3) {\\n      this._terminal.buffer.tabs = {};\\n    }\\n  }\\n\\n  /**\\n   * CSI Pm h  Set Mode (SM).\\n   *     Ps = 2  -> Keyboard Action Mode (AM).\\n   *     Ps = 4  -> Insert Mode (IRM).\\n   *     Ps = 1 2  -> Send/receive (SRM).\\n   *     Ps = 2 0  -> Automatic Newline (LNM).\\n   * CSI ? Pm h\\n   *   DEC Private Mode Set (DECSET).\\n   *     Ps = 1  -> Application Cursor Keys (DECCKM).\\n   *     Ps = 2  -> Designate USASCII for character sets G0-G3\\n   *     (DECANM), and set VT100 mode.\\n   *     Ps = 3  -> 132 Column Mode (DECCOLM).\\n   *     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).\\n   *     Ps = 5  -> Reverse Video (DECSCNM).\\n   *     Ps = 6  -> Origin Mode (DECOM).\\n   *     Ps = 7  -> Wraparound Mode (DECAWM).\\n   *     Ps = 8  -> Auto-repeat Keys (DECARM).\\n   *     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-\\n   *     tion Mouse Tracking.\\n   *     Ps = 1 0  -> Show toolbar (rxvt).\\n   *     Ps = 1 2  -> Start Blinking Cursor (att610).\\n   *     Ps = 1 8  -> Print form feed (DECPFF).\\n   *     Ps = 1 9  -> Set print extent to full screen (DECPEX).\\n   *     Ps = 2 5  -> Show Cursor (DECTCEM).\\n   *     Ps = 3 0  -> Show scrollbar (rxvt).\\n   *     Ps = 3 5  -> Enable font-shifting functions (rxvt).\\n   *     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).\\n   *     Ps = 4 0  -> Allow 80 -> 132 Mode.\\n   *     Ps = 4 1  -> more(1) fix (see curses resource).\\n   *     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-\\n   *     RCM).\\n   *     Ps = 4 4  -> Turn On Margin Bell.\\n   *     Ps = 4 5  -> Reverse-wraparound Mode.\\n   *     Ps = 4 6  -> Start Logging.  This is normally disabled by a\\n   *     compile-time option.\\n   *     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-\\n   *     abled by the titeInhibit resource).\\n   *     Ps = 6 6  -> Application keypad (DECNKM).\\n   *     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).\\n   *     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and\\n   *     release.  See the section Mouse Tracking.\\n   *     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.\\n   *     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.\\n   *     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.\\n   *     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.\\n   *     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.\\n   *     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).\\n   *     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).\\n   *     Ps = 1 0 3 4  -> Interpret \\\"meta\\\" key, sets eighth bit.\\n   *     (enables the eightBitInput resource).\\n   *     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-\\n   *     Lock keys.  (This enables the numLock resource).\\n   *     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This\\n   *     enables the metaSendsEscape resource).\\n   *     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete\\n   *     key.\\n   *     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This\\n   *     enables the altSendsEscape resource).\\n   *     Ps = 1 0 4 0  -> Keep selection even if not highlighted.\\n   *     (This enables the keepSelection resource).\\n   *     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables\\n   *     the selectToClipboard resource).\\n   *     Ps = 1 0 4 2  -> Enable Urgency window manager hint when\\n   *     Control-G is received.  (This enables the bellIsUrgent\\n   *     resource).\\n   *     Ps = 1 0 4 3  -> Enable raising of the window when Control-G\\n   *     is received.  (enables the popOnBell resource).\\n   *     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be\\n   *     disabled by the titeInhibit resource).\\n   *     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-\\n   *     abled by the titeInhibit resource).\\n   *     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate\\n   *     Screen Buffer, clearing it first.  (This may be disabled by\\n   *     the titeInhibit resource).  This combines the effects of the 1\\n   *     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based\\n   *     applications rather than the 4 7  mode.\\n   *     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.\\n   *     Ps = 1 0 5 1  -> Set Sun function-key mode.\\n   *     Ps = 1 0 5 2  -> Set HP function-key mode.\\n   *     Ps = 1 0 5 3  -> Set SCO function-key mode.\\n   *     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).\\n   *     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.\\n   *     Ps = 2 0 0 4  -> Set bracketed paste mode.\\n   * Modes:\\n   *   http: *vt100.net/docs/vt220-rm/chapter4.html\\n   */\\n  public setMode(params: number[]): void {\\n    if (params.length > 1) {\\n      for (let i = 0; i < params.length; i++) {\\n        this.setMode([params[i]]);\\n      }\\n\\n      return;\\n    }\\n\\n    if (!this._terminal.prefix) {\\n      switch (params[0]) {\\n        case 4:\\n          this._terminal.insertMode = true;\\n          break;\\n        case 20:\\n          // this._t.convertEol = true;\\n          break;\\n      }\\n    } else if (this._terminal.prefix === '?') {\\n      switch (params[0]) {\\n        case 1:\\n          this._terminal.applicationCursor = true;\\n          break;\\n        case 2:\\n          this._terminal.setgCharset(0, DEFAULT_CHARSET);\\n          this._terminal.setgCharset(1, DEFAULT_CHARSET);\\n          this._terminal.setgCharset(2, DEFAULT_CHARSET);\\n          this._terminal.setgCharset(3, DEFAULT_CHARSET);\\n          // set VT100 mode here\\n          break;\\n        case 3: // 132 col mode\\n          this._terminal.savedCols = this._terminal.cols;\\n          this._terminal.resize(132, this._terminal.rows);\\n          break;\\n        case 6:\\n          this._terminal.originMode = true;\\n          break;\\n        case 7:\\n          this._terminal.wraparoundMode = true;\\n          break;\\n        case 12:\\n          // this.cursorBlink = true;\\n          break;\\n        case 66:\\n          this._terminal.log('Serial port requested application keypad.');\\n          this._terminal.applicationKeypad = true;\\n          this._terminal.viewport.syncScrollArea();\\n          break;\\n        case 9: // X10 Mouse\\n          // no release, no motion, no wheel, no modifiers.\\n        case 1000: // vt200 mouse\\n          // no motion.\\n          // no modifiers, except control on the wheel.\\n        case 1002: // button event mouse\\n        case 1003: // any event mouse\\n          // any event - sends motion events,\\n          // even if there is no button held down.\\n\\n          // TODO: Why are params[0] compares nested within a switch for params[0]?\\n\\n          this._terminal.x10Mouse = params[0] === 9;\\n          this._terminal.vt200Mouse = params[0] === 1000;\\n          this._terminal.normalMouse = params[0] > 1000;\\n          this._terminal.mouseEvents = true;\\n          this._terminal.element.classList.add('enable-mouse-events');\\n          this._terminal.selectionManager.disable();\\n          this._terminal.log('Binding to mouse events.');\\n          break;\\n        case 1004: // send focusin/focusout events\\n          // focusin: ^[[I\\n          // focusout: ^[[O\\n          this._terminal.sendFocus = true;\\n          break;\\n        case 1005: // utf8 ext mode mouse\\n          this._terminal.utfMouse = true;\\n          // for wide terminals\\n          // simply encodes large values as utf8 characters\\n          break;\\n        case 1006: // sgr ext mode mouse\\n          this._terminal.sgrMouse = true;\\n          // for wide terminals\\n          // does not add 32 to fields\\n          // press: ^[[<b;x;yM\\n          // release: ^[[<b;x;ym\\n          break;\\n        case 1015: // urxvt ext mode mouse\\n          this._terminal.urxvtMouse = true;\\n          // for wide terminals\\n          // numbers for fields\\n          // press: ^[[b;x;yM\\n          // motion: ^[[b;x;yT\\n          break;\\n        case 25: // show cursor\\n          this._terminal.cursorHidden = false;\\n          break;\\n        case 1049: // alt screen buffer cursor\\n          // TODO: Not sure if we need to save/restore after switching the buffer\\n          // this.saveCursor(params);\\n          // FALL-THROUGH\\n        case 47: // alt screen buffer\\n        case 1047: // alt screen buffer\\n          this._terminal.buffers.activateAltBuffer();\\n          this._terminal.viewport.syncScrollArea();\\n          this._terminal.showCursor();\\n          break;\\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\\n          this._terminal.bracketedPasteMode = true;\\n          break;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * CSI Pm l  Reset Mode (RM).\\n   *     Ps = 2  -> Keyboard Action Mode (AM).\\n   *     Ps = 4  -> Replace Mode (IRM).\\n   *     Ps = 1 2  -> Send/receive (SRM).\\n   *     Ps = 2 0  -> Normal Linefeed (LNM).\\n   * CSI ? Pm l\\n   *   DEC Private Mode Reset (DECRST).\\n   *     Ps = 1  -> Normal Cursor Keys (DECCKM).\\n   *     Ps = 2  -> Designate VT52 mode (DECANM).\\n   *     Ps = 3  -> 80 Column Mode (DECCOLM).\\n   *     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).\\n   *     Ps = 5  -> Normal Video (DECSCNM).\\n   *     Ps = 6  -> Normal Cursor Mode (DECOM).\\n   *     Ps = 7  -> No Wraparound Mode (DECAWM).\\n   *     Ps = 8  -> No Auto-repeat Keys (DECARM).\\n   *     Ps = 9  -> Don't send Mouse X & Y on button press.\\n   *     Ps = 1 0  -> Hide toolbar (rxvt).\\n   *     Ps = 1 2  -> Stop Blinking Cursor (att610).\\n   *     Ps = 1 8  -> Don't print form feed (DECPFF).\\n   *     Ps = 1 9  -> Limit print to scrolling region (DECPEX).\\n   *     Ps = 2 5  -> Hide Cursor (DECTCEM).\\n   *     Ps = 3 0  -> Don't show scrollbar (rxvt).\\n   *     Ps = 3 5  -> Disable font-shifting functions (rxvt).\\n   *     Ps = 4 0  -> Disallow 80 -> 132 Mode.\\n   *     Ps = 4 1  -> No more(1) fix (see curses resource).\\n   *     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-\\n   *     NRCM).\\n   *     Ps = 4 4  -> Turn Off Margin Bell.\\n   *     Ps = 4 5  -> No Reverse-wraparound Mode.\\n   *     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a\\n   *     compile-time option).\\n   *     Ps = 4 7  -> Use Normal Screen Buffer.\\n   *     Ps = 6 6  -> Numeric keypad (DECNKM).\\n   *     Ps = 6 7  -> Backarrow key sends delete (DECBKM).\\n   *     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and\\n   *     release.  See the section Mouse Tracking.\\n   *     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.\\n   *     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.\\n   *     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.\\n   *     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.\\n   *     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.\\n   *     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output\\n   *     (rxvt).\\n   *     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).\\n   *     Ps = 1 0 3 4  -> Don't interpret \\\"meta\\\" key.  (This disables\\n   *     the eightBitInput resource).\\n   *     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-\\n   *     Lock keys.  (This disables the numLock resource).\\n   *     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.\\n   *     (This disables the metaSendsEscape resource).\\n   *     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad\\n   *     Delete key.\\n   *     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.\\n   *     (This disables the altSendsEscape resource).\\n   *     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.\\n   *     (This disables the keepSelection resource).\\n   *     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables\\n   *     the selectToClipboard resource).\\n   *     Ps = 1 0 4 2  -> Disable Urgency window manager hint when\\n   *     Control-G is received.  (This disables the bellIsUrgent\\n   *     resource).\\n   *     Ps = 1 0 4 3  -> Disable raising of the window when Control-\\n   *     G is received.  (This disables the popOnBell resource).\\n   *     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen\\n   *     first if in the Alternate Screen.  (This may be disabled by\\n   *     the titeInhibit resource).\\n   *     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be\\n   *     disabled by the titeInhibit resource).\\n   *     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor\\n   *     as in DECRC.  (This may be disabled by the titeInhibit\\n   *     resource).  This combines the effects of the 1 0 4 7  and 1 0\\n   *     4 8  modes.  Use this with terminfo-based applications rather\\n   *     than the 4 7  mode.\\n   *     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.\\n   *     Ps = 1 0 5 1  -> Reset Sun function-key mode.\\n   *     Ps = 1 0 5 2  -> Reset HP function-key mode.\\n   *     Ps = 1 0 5 3  -> Reset SCO function-key mode.\\n   *     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).\\n   *     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.\\n   *     Ps = 2 0 0 4  -> Reset bracketed paste mode.\\n   */\\n  public resetMode(params: number[]): void {\\n    if (params.length > 1) {\\n      for (let i = 0; i < params.length; i++) {\\n        this.resetMode([params[i]]);\\n      }\\n\\n      return;\\n    }\\n\\n    if (!this._terminal.prefix) {\\n      switch (params[0]) {\\n        case 4:\\n          this._terminal.insertMode = false;\\n          break;\\n        case 20:\\n          // this._t.convertEol = false;\\n          break;\\n      }\\n    } else if (this._terminal.prefix === '?') {\\n      switch (params[0]) {\\n        case 1:\\n          this._terminal.applicationCursor = false;\\n          break;\\n        case 3:\\n          if (this._terminal.cols === 132 && this._terminal.savedCols) {\\n            this._terminal.resize(this._terminal.savedCols, this._terminal.rows);\\n          }\\n          delete this._terminal.savedCols;\\n          break;\\n        case 6:\\n          this._terminal.originMode = false;\\n          break;\\n        case 7:\\n          this._terminal.wraparoundMode = false;\\n          break;\\n        case 12:\\n          // this.cursorBlink = false;\\n          break;\\n        case 66:\\n          this._terminal.log('Switching back to normal keypad.');\\n          this._terminal.applicationKeypad = false;\\n          this._terminal.viewport.syncScrollArea();\\n          break;\\n        case 9: // X10 Mouse\\n        case 1000: // vt200 mouse\\n        case 1002: // button event mouse\\n        case 1003: // any event mouse\\n          this._terminal.x10Mouse = false;\\n          this._terminal.vt200Mouse = false;\\n          this._terminal.normalMouse = false;\\n          this._terminal.mouseEvents = false;\\n          this._terminal.element.classList.remove('enable-mouse-events');\\n          this._terminal.selectionManager.enable();\\n          break;\\n        case 1004: // send focusin/focusout events\\n          this._terminal.sendFocus = false;\\n          break;\\n        case 1005: // utf8 ext mode mouse\\n          this._terminal.utfMouse = false;\\n          break;\\n        case 1006: // sgr ext mode mouse\\n          this._terminal.sgrMouse = false;\\n          break;\\n        case 1015: // urxvt ext mode mouse\\n          this._terminal.urxvtMouse = false;\\n          break;\\n        case 25: // hide cursor\\n          this._terminal.cursorHidden = true;\\n          break;\\n        case 1049: // alt screen buffer cursor\\n           // FALL-THROUGH\\n        case 47: // normal screen buffer\\n        case 1047: // normal screen buffer - clearing it first\\n          // Ensure the selection manager has the correct buffer\\n          this._terminal.buffers.activateNormalBuffer();\\n          // TODO: Not sure if we need to save/restore after switching the buffer\\n          // if (params[0] === 1049) {\\n          //   this.restoreCursor(params);\\n          // }\\n          this._terminal.refresh(0, this._terminal.rows - 1);\\n          this._terminal.viewport.syncScrollArea();\\n          this._terminal.showCursor();\\n          break;\\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\\n          this._terminal.bracketedPasteMode = false;\\n          break;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * CSI Pm m  Character Attributes (SGR).\\n   *     Ps = 0  -> Normal (default).\\n   *     Ps = 1  -> Bold.\\n   *     Ps = 2  -> Faint, decreased intensity (ISO 6429).\\n   *     Ps = 4  -> Underlined.\\n   *     Ps = 5  -> Blink (appears as Bold).\\n   *     Ps = 7  -> Inverse.\\n   *     Ps = 8  -> Invisible, i.e., hidden (VT300).\\n   *     Ps = 2 2  -> Normal (neither bold nor faint).\\n   *     Ps = 2 4  -> Not underlined.\\n   *     Ps = 2 5  -> Steady (not blinking).\\n   *     Ps = 2 7  -> Positive (not inverse).\\n   *     Ps = 2 8  -> Visible, i.e., not hidden (VT300).\\n   *     Ps = 3 0  -> Set foreground color to Black.\\n   *     Ps = 3 1  -> Set foreground color to Red.\\n   *     Ps = 3 2  -> Set foreground color to Green.\\n   *     Ps = 3 3  -> Set foreground color to Yellow.\\n   *     Ps = 3 4  -> Set foreground color to Blue.\\n   *     Ps = 3 5  -> Set foreground color to Magenta.\\n   *     Ps = 3 6  -> Set foreground color to Cyan.\\n   *     Ps = 3 7  -> Set foreground color to White.\\n   *     Ps = 3 9  -> Set foreground color to default (original).\\n   *     Ps = 4 0  -> Set background color to Black.\\n   *     Ps = 4 1  -> Set background color to Red.\\n   *     Ps = 4 2  -> Set background color to Green.\\n   *     Ps = 4 3  -> Set background color to Yellow.\\n   *     Ps = 4 4  -> Set background color to Blue.\\n   *     Ps = 4 5  -> Set background color to Magenta.\\n   *     Ps = 4 6  -> Set background color to Cyan.\\n   *     Ps = 4 7  -> Set background color to White.\\n   *     Ps = 4 9  -> Set background color to default (original).\\n   *\\n   *   If 16-color support is compiled, the following apply.  Assume\\n   *   that xterm's resources are set so that the ISO color codes are\\n   *   the first 8 of a set of 16.  Then the aixterm colors are the\\n   *   bright versions of the ISO colors:\\n   *     Ps = 9 0  -> Set foreground color to Black.\\n   *     Ps = 9 1  -> Set foreground color to Red.\\n   *     Ps = 9 2  -> Set foreground color to Green.\\n   *     Ps = 9 3  -> Set foreground color to Yellow.\\n   *     Ps = 9 4  -> Set foreground color to Blue.\\n   *     Ps = 9 5  -> Set foreground color to Magenta.\\n   *     Ps = 9 6  -> Set foreground color to Cyan.\\n   *     Ps = 9 7  -> Set foreground color to White.\\n   *     Ps = 1 0 0  -> Set background color to Black.\\n   *     Ps = 1 0 1  -> Set background color to Red.\\n   *     Ps = 1 0 2  -> Set background color to Green.\\n   *     Ps = 1 0 3  -> Set background color to Yellow.\\n   *     Ps = 1 0 4  -> Set background color to Blue.\\n   *     Ps = 1 0 5  -> Set background color to Magenta.\\n   *     Ps = 1 0 6  -> Set background color to Cyan.\\n   *     Ps = 1 0 7  -> Set background color to White.\\n   *\\n   *   If xterm is compiled with the 16-color support disabled, it\\n   *   supports the following, from rxvt:\\n   *     Ps = 1 0 0  -> Set foreground and background color to\\n   *     default.\\n   *\\n   *   If 88- or 256-color support is compiled, the following apply.\\n   *     Ps = 3 8  ; 5  ; Ps -> Set foreground color to the second\\n   *     Ps.\\n   *     Ps = 4 8  ; 5  ; Ps -> Set background color to the second\\n   *     Ps.\\n   */\\n  public charAttributes(params: number[]): void {\\n    // Optimize a single SGR0.\\n    if (params.length === 1 && params[0] === 0) {\\n      this._terminal.curAttr = this._terminal.defAttr;\\n      return;\\n    }\\n\\n    const l = params.length;\\n    let flags = this._terminal.curAttr >> 18;\\n    let fg = (this._terminal.curAttr >> 9) & 0x1ff;\\n    let bg = this._terminal.curAttr & 0x1ff;\\n    let p;\\n\\n    for (let i = 0; i < l; i++) {\\n      p = params[i];\\n      if (p >= 30 && p <= 37) {\\n        // fg color 8\\n        fg = p - 30;\\n      } else if (p >= 40 && p <= 47) {\\n        // bg color 8\\n        bg = p - 40;\\n      } else if (p >= 90 && p <= 97) {\\n        // fg color 16\\n        p += 8;\\n        fg = p - 90;\\n      } else if (p >= 100 && p <= 107) {\\n        // bg color 16\\n        p += 8;\\n        bg = p - 100;\\n      } else if (p === 0) {\\n        // default\\n        flags = this._terminal.defAttr >> 18;\\n        fg = (this._terminal.defAttr >> 9) & 0x1ff;\\n        bg = this._terminal.defAttr & 0x1ff;\\n        // flags = 0;\\n        // fg = 0x1ff;\\n        // bg = 0x1ff;\\n      } else if (p === 1) {\\n        // bold text\\n        flags |= FLAGS.BOLD;\\n      } else if (p === 4) {\\n        // underlined text\\n        flags |= FLAGS.UNDERLINE;\\n      } else if (p === 5) {\\n        // blink\\n        flags |= FLAGS.BLINK;\\n      } else if (p === 7) {\\n        // inverse and positive\\n        // test with: echo -e '\\\\e[31m\\\\e[42mhello\\\\e[7mworld\\\\e[27mhi\\\\e[m'\\n        flags |= FLAGS.INVERSE;\\n      } else if (p === 8) {\\n        // invisible\\n        flags |= FLAGS.INVISIBLE;\\n      } else if (p === 2) {\\n        // dimmed text\\n        flags |= FLAGS.DIM;\\n      } else if (p === 22) {\\n        // not bold nor faint\\n        flags &= ~FLAGS.BOLD;\\n        flags &= ~FLAGS.DIM;\\n      } else if (p === 24) {\\n        // not underlined\\n        flags &= ~FLAGS.UNDERLINE;\\n      } else if (p === 25) {\\n        // not blink\\n        flags &= ~FLAGS.BLINK;\\n      } else if (p === 27) {\\n        // not inverse\\n        flags &= ~FLAGS.INVERSE;\\n      } else if (p === 28) {\\n        // not invisible\\n        flags &= ~FLAGS.INVISIBLE;\\n      } else if (p === 39) {\\n        // reset fg\\n        fg = (this._terminal.defAttr >> 9) & 0x1ff;\\n      } else if (p === 49) {\\n        // reset bg\\n        bg = this._terminal.defAttr & 0x1ff;\\n      } else if (p === 38) {\\n        // fg color 256\\n        if (params[i + 1] === 2) {\\n          i += 2;\\n          fg = this._terminal.matchColor(\\n            params[i] & 0xff,\\n            params[i + 1] & 0xff,\\n            params[i + 2] & 0xff);\\n          if (fg === -1) fg = 0x1ff;\\n          i += 2;\\n        } else if (params[i + 1] === 5) {\\n          i += 2;\\n          p = params[i] & 0xff;\\n          fg = p;\\n        }\\n      } else if (p === 48) {\\n        // bg color 256\\n        if (params[i + 1] === 2) {\\n          i += 2;\\n          bg = this._terminal.matchColor(\\n            params[i] & 0xff,\\n            params[i + 1] & 0xff,\\n            params[i + 2] & 0xff);\\n          if (bg === -1) bg = 0x1ff;\\n          i += 2;\\n        } else if (params[i + 1] === 5) {\\n          i += 2;\\n          p = params[i] & 0xff;\\n          bg = p;\\n        }\\n      } else if (p === 100) {\\n        // reset fg/bg\\n        fg = (this._terminal.defAttr >> 9) & 0x1ff;\\n        bg = this._terminal.defAttr & 0x1ff;\\n      } else {\\n        this._terminal.error('Unknown SGR attribute: %d.', p);\\n      }\\n    }\\n\\n    this._terminal.curAttr = (flags << 18) | (fg << 9) | bg;\\n  }\\n\\n  /**\\n   * CSI Ps n  Device Status Report (DSR).\\n   *     Ps = 5  -> Status Report.  Result (``OK'') is\\n   *   CSI 0 n\\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column].\\n   *   Result is\\n   *   CSI r ; c R\\n   * CSI ? Ps n\\n   *   Device Status Report (DSR, DEC-specific).\\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI\\n   *     ? r ; c R (assumes page is zero).\\n   *     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).\\n   *     or CSI ? 1 1  n  (not ready).\\n   *     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)\\n   *     or CSI ? 2 1  n  (locked).\\n   *     Ps = 2 6  -> Report Keyboard status as\\n   *   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).\\n   *   The last two parameters apply to VT400 & up, and denote key-\\n   *   board ready and LK01 respectively.\\n   *     Ps = 5 3  -> Report Locator status as\\n   *   CSI ? 5 3  n  Locator available, if compiled-in, or\\n   *   CSI ? 5 0  n  No Locator, if not.\\n   */\\n  public deviceStatus(params: number[]): void {\\n    if (!this._terminal.prefix) {\\n      switch (params[0]) {\\n        case 5:\\n          // status report\\n          this._terminal.send(C0.ESC + '[0n');\\n          break;\\n        case 6:\\n          // cursor position\\n          this._terminal.send(C0.ESC + '['\\n                    + (this._terminal.buffer.y + 1)\\n                    + ';'\\n                    + (this._terminal.buffer.x + 1)\\n                    + 'R');\\n          break;\\n      }\\n    } else if (this._terminal.prefix === '?') {\\n      // modern xterm doesnt seem to\\n      // respond to any of these except ?6, 6, and 5\\n      switch (params[0]) {\\n        case 6:\\n          // cursor position\\n          this._terminal.send(C0.ESC + '[?'\\n                    + (this._terminal.buffer.y + 1)\\n                    + ';'\\n                    + (this._terminal.buffer.x + 1)\\n                    + 'R');\\n          break;\\n        case 15:\\n          // no printer\\n          // this.send(C0.ESC + '[?11n');\\n          break;\\n        case 25:\\n          // dont support user defined keys\\n          // this.send(C0.ESC + '[?21n');\\n          break;\\n        case 26:\\n          // north american keyboard\\n          // this.send(C0.ESC + '[?27;1;0;0n');\\n          break;\\n        case 53:\\n          // no dec locator/mouse\\n          // this.send(C0.ESC + '[?50n');\\n          break;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * CSI ! p   Soft terminal reset (DECSTR).\\n   * http://vt100.net/docs/vt220-rm/table4-10.html\\n   */\\n  public softReset(params: number[]): void {\\n    this._terminal.cursorHidden = false;\\n    this._terminal.insertMode = false;\\n    this._terminal.originMode = false;\\n    this._terminal.wraparoundMode = true;  // defaults: xterm - true, vt100 - false\\n    this._terminal.applicationKeypad = false; // ?\\n    this._terminal.viewport.syncScrollArea();\\n    this._terminal.applicationCursor = false;\\n    this._terminal.buffer.scrollTop = 0;\\n    this._terminal.buffer.scrollBottom = this._terminal.rows - 1;\\n    this._terminal.curAttr = this._terminal.defAttr;\\n    this._terminal.buffer.x = this._terminal.buffer.y = 0; // ?\\n    this._terminal.charset = null;\\n    this._terminal.glevel = 0; // ??\\n    this._terminal.charsets = [null]; // ??\\n  }\\n\\n  /**\\n   * CSI Ps SP q  Set cursor style (DECSCUSR, VT520).\\n   *   Ps = 0  -> blinking block.\\n   *   Ps = 1  -> blinking block (default).\\n   *   Ps = 2  -> steady block.\\n   *   Ps = 3  -> blinking underline.\\n   *   Ps = 4  -> steady underline.\\n   *   Ps = 5  -> blinking bar (xterm).\\n   *   Ps = 6  -> steady bar (xterm).\\n   */\\n  public setCursorStyle(params?: number[]): void {\\n    const param = params[0] < 1 ? 1 : params[0];\\n    switch (param) {\\n      case 1:\\n      case 2:\\n        this._terminal.setOption('cursorStyle', 'block');\\n        break;\\n      case 3:\\n      case 4:\\n        this._terminal.setOption('cursorStyle', 'underline');\\n        break;\\n      case 5:\\n      case 6:\\n        this._terminal.setOption('cursorStyle', 'bar');\\n        break;\\n    }\\n    const isBlinking = param % 2 === 1;\\n    this._terminal.setOption('cursorBlink', isBlinking);\\n  }\\n\\n  /**\\n   * CSI Ps ; Ps r\\n   *   Set Scrolling Region [top;bottom] (default = full size of win-\\n   *   dow) (DECSTBM).\\n   * CSI ? Pm r\\n   */\\n  public setScrollRegion(params: number[]): void {\\n    if (this._terminal.prefix) return;\\n    this._terminal.buffer.scrollTop = (params[0] || 1) - 1;\\n    this._terminal.buffer.scrollBottom = (params[1] && params[1] <= this._terminal.rows ? params[1] : this._terminal.rows) - 1;\\n    this._terminal.buffer.x = 0;\\n    this._terminal.buffer.y = 0;\\n  }\\n\\n\\n  /**\\n   * CSI s\\n   *   Save cursor (ANSI.SYS).\\n   */\\n  public saveCursor(params: number[]): void {\\n    this._terminal.buffer.savedX = this._terminal.buffer.x;\\n    this._terminal.buffer.savedY = this._terminal.buffer.y;\\n  }\\n\\n\\n  /**\\n   * CSI u\\n   *   Restore cursor (ANSI.SYS).\\n   */\\n  public restoreCursor(params: number[]): void {\\n    this._terminal.buffer.x = this._terminal.buffer.savedX || 0;\\n    this._terminal.buffer.y = this._terminal.buffer.savedY || 0;\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { XtermListener } from './Types';\\nimport { IEventEmitter, IDisposable } from 'xterm';\\n\\nexport class EventEmitter implements IEventEmitter {\\n  private _events: {[type: string]: XtermListener[]};\\n\\n  constructor() {\\n    // Restore the previous events if available, this will happen if the\\n    // constructor is called multiple times on the same object (terminal reset).\\n    this._events = this._events || {};\\n  }\\n\\n  public on(type: string, listener: XtermListener): void {\\n    this._events[type] = this._events[type] || [];\\n    this._events[type].push(listener);\\n  }\\n\\n  /**\\n   * Adds a disposabe listener to the EventEmitter, returning the disposable.\\n   * @param type The event type.\\n   * @param handler The handler for the listener.\\n   */\\n  public addDisposableListener(type: string, handler: XtermListener): IDisposable {\\n    this.on(type, handler);\\n    return {\\n      dispose: () => {\\n        if (!handler) {\\n          // Already disposed\\n          return;\\n        }\\n        this.off(type, handler);\\n        handler = null;\\n      }\\n    };\\n  }\\n\\n  public off(type: string, listener: XtermListener): void {\\n    if (!this._events[type]) {\\n      return;\\n    }\\n\\n    let obj = this._events[type];\\n    let i = obj.length;\\n\\n    while (i--) {\\n      if (obj[i] === listener) {\\n        obj.splice(i, 1);\\n        return;\\n      }\\n    }\\n  }\\n\\n  public removeAllListeners(type: string): void {\\n    if (this._events[type]) {\\n       delete this._events[type];\\n    }\\n  }\\n\\n  public emit(type: string, ...args: any[]): void {\\n    if (!this._events[type]) {\\n      return;\\n    }\\n    let obj = this._events[type];\\n    for (let i = 0; i < obj.length; i++) {\\n      obj[i].apply(this, args);\\n    }\\n  }\\n\\n  public listeners(type: string): XtermListener[] {\\n    return this._events[type] || [];\\n  }\\n\\n  protected destroy(): void {\\n    this._events = {};\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\n/**\\n * C0 control codes\\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\\n */\\nexport namespace C0 {\\n  /** Null (Caret = ^@, C = \\\\0) */\\n  export const NUL = '\\\\x00';\\n  /** Start of Heading (Caret = ^A) */\\n  export const SOH = '\\\\x01';\\n  /** Start of Text (Caret = ^B) */\\n  export const STX = '\\\\x02';\\n  /** End of Text (Caret = ^C) */\\n  export const ETX = '\\\\x03';\\n  /** End of Transmission (Caret = ^D) */\\n  export const EOT = '\\\\x04';\\n  /** Enquiry (Caret = ^E) */\\n  export const ENQ = '\\\\x05';\\n  /** Acknowledge (Caret = ^F) */\\n  export const ACK = '\\\\x06';\\n  /** Bell (Caret = ^G, C = \\\\a) */\\n  export const BEL = '\\\\x07';\\n  /** Backspace (Caret = ^H, C = \\\\b) */\\n  export const BS  = '\\\\x08';\\n  /** Character Tabulation, Horizontal Tabulation (Caret = ^I, C = \\\\t) */\\n  export const HT  = '\\\\x09';\\n  /** Line Feed (Caret = ^J, C = \\\\n) */\\n  export const LF  = '\\\\x0a';\\n  /** Line Tabulation, Vertical Tabulation (Caret = ^K, C = \\\\v) */\\n  export const VT  = '\\\\x0b';\\n  /** Form Feed (Caret = ^L, C = \\\\f) */\\n  export const FF  = '\\\\x0c';\\n  /** Carriage Return (Caret = ^M, C = \\\\r) */\\n  export const CR  = '\\\\x0d';\\n  /** Shift Out (Caret = ^N) */\\n  export const SO  = '\\\\x0e';\\n  /** Shift In (Caret = ^O) */\\n  export const SI  = '\\\\x0f';\\n  /** Data Link Escape (Caret = ^P) */\\n  export const DLE = '\\\\x10';\\n  /** Device Control One (XON) (Caret = ^Q) */\\n  export const DC1 = '\\\\x11';\\n  /** Device Control Two (Caret = ^R) */\\n  export const DC2 = '\\\\x12';\\n  /** Device Control Three (XOFF) (Caret = ^S) */\\n  export const DC3 = '\\\\x13';\\n  /** Device Control Four (Caret = ^T) */\\n  export const DC4 = '\\\\x14';\\n  /** Negative Acknowledge (Caret = ^U) */\\n  export const NAK = '\\\\x15';\\n  /** Synchronous Idle (Caret = ^V) */\\n  export const SYN = '\\\\x16';\\n  /** End of Transmission Block (Caret = ^W) */\\n  export const ETB = '\\\\x17';\\n  /** Cancel (Caret = ^X) */\\n  export const CAN = '\\\\x18';\\n  /** End of Medium (Caret = ^Y) */\\n  export const EM  = '\\\\x19';\\n  /** Substitute (Caret = ^Z) */\\n  export const SUB = '\\\\x1a';\\n  /** Escape (Caret = ^[, C = \\\\e) */\\n  export const ESC = '\\\\x1b';\\n  /** File Separator (Caret = ^\\\\) */\\n  export const FS  = '\\\\x1c';\\n  /** Group Separator (Caret = ^]) */\\n  export const GS  = '\\\\x1d';\\n  /** Record Separator (Caret = ^^) */\\n  export const RS  = '\\\\x1e';\\n  /** Unit Separator (Caret = ^_) */\\n  export const US  = '\\\\x1f';\\n  /** Space */\\n  export const SP  = '\\\\x20';\\n  /** Delete (Caret = ^?) */\\n  export const DEL = '\\\\x7f';\\n}\\n\",\"/**\\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { ITerminal } from './Types';\\n\\ninterface IPosition {\\n  start: number;\\n  end: number;\\n}\\n\\n/**\\n * Encapsulates the logic for handling compositionstart, compositionupdate and compositionend\\n * events, displaying the in-progress composition to the UI and forwarding the final composition\\n * to the handler.\\n */\\nexport class CompositionHelper {\\n  /**\\n   * Whether input composition is currently happening, eg. via a mobile keyboard, speech input or\\n   * IME. This variable determines whether the compositionText should be displayed on the UI.\\n   */\\n  private _isComposing: boolean;\\n\\n  /**\\n   * The position within the input textarea's value of the current composition.\\n   */\\n  private _compositionPosition: IPosition;\\n\\n  /**\\n   * Whether a composition is in the process of being sent, setting this to false will cancel any\\n   * in-progress composition.\\n   */\\n  private _isSendingComposition: boolean;\\n\\n  /**\\n   * Creates a new CompositionHelper.\\n   * @param _textarea The textarea that xterm uses for input.\\n   * @param _compositionView The element to display the in-progress composition in.\\n   * @param _terminal The Terminal to forward the finished composition to.\\n   */\\n  constructor(\\n    private _textarea: HTMLTextAreaElement,\\n    private _compositionView: HTMLElement,\\n    private _terminal: ITerminal\\n  ) {\\n    this._isComposing = false;\\n    this._isSendingComposition = false;\\n    this._compositionPosition = { start: null, end: null };\\n  }\\n\\n  /**\\n   * Handles the compositionstart event, activating the composition view.\\n   */\\n  public compositionstart(): void {\\n    this._isComposing = true;\\n    this._compositionPosition.start = this._textarea.value.length;\\n    this._compositionView.textContent = '';\\n    this._compositionView.classList.add('active');\\n  }\\n\\n  /**\\n   * Handles the compositionupdate event, updating the composition view.\\n   * @param {CompositionEvent} ev The event.\\n   */\\n  public compositionupdate(ev: CompositionEvent): void {\\n    this._compositionView.textContent = ev.data;\\n    this.updateCompositionElements();\\n    setTimeout(() => {\\n      this._compositionPosition.end = this._textarea.value.length;\\n    }, 0);\\n  }\\n\\n  /**\\n   * Handles the compositionend event, hiding the composition view and sending the composition to\\n   * the handler.\\n   */\\n  public compositionend(): void {\\n    this._finalizeComposition(true);\\n  }\\n\\n  /**\\n   * Handles the keydown event, routing any necessary events to the CompositionHelper functions.\\n   * @param ev The keydown event.\\n   * @return Whether the Terminal should continue processing the keydown event.\\n   */\\n  public keydown(ev: KeyboardEvent): boolean {\\n    if (this._isComposing || this._isSendingComposition) {\\n      if (ev.keyCode === 229) {\\n        // Continue composing if the keyCode is the \\\"composition character\\\"\\n        return false;\\n      } else if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\\n        // Continue composing if the keyCode is a modifier key\\n        return false;\\n      } else {\\n        // Finish composition immediately. This is mainly here for the case where enter is\\n        // pressed and the handler needs to be triggered before the command is executed.\\n        this._finalizeComposition(false);\\n      }\\n    }\\n\\n    if (ev.keyCode === 229) {\\n      // If the \\\"composition character\\\" is used but gets to this point it means a non-composition\\n      // character (eg. numbers and punctuation) was pressed when the IME was active.\\n      this._handleAnyTextareaChanges();\\n      return false;\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * Finalizes the composition, resuming regular input actions. This is called when a composition\\n   * is ending.\\n   * @param waitForPropogation Whether to wait for events to propogate before sending\\n   *   the input. This should be false if a non-composition keystroke is entered before the\\n   *   compositionend event is triggered, such as enter, so that the composition is send before\\n   *   the command is executed.\\n   */\\n  private _finalizeComposition(waitForPropogation: boolean): void {\\n    this._compositionView.classList.remove('active');\\n    this._isComposing = false;\\n    this._clearTextareaPosition();\\n\\n    if (!waitForPropogation) {\\n      // Cancel any delayed composition send requests and send the input immediately.\\n      this._isSendingComposition = false;\\n      const input = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);\\n      this._terminal.handler(input);\\n    } else {\\n      // Make a deep copy of the composition position here as a new compositionstart event may\\n      // fire before the setTimeout executes.\\n      const currentCompositionPosition = {\\n        start: this._compositionPosition.start,\\n        end: this._compositionPosition.end\\n      };\\n\\n      // Since composition* events happen before the changes take place in the textarea on most\\n      // browsers, use a setTimeout with 0ms time to allow the native compositionend event to\\n      // complete. This ensures the correct character is retrieved, this solution was used\\n      // because:\\n      // - The compositionend event's data property is unreliable, at least on Chromium\\n      // - The last compositionupdate event's data property does not always accurately describe\\n      //   the character, a counter example being Korean where an ending consonsant can move to\\n      //   the following character if the following input is a vowel.\\n      this._isSendingComposition = true;\\n      setTimeout(() => {\\n        // Ensure that the input has not already been sent\\n        if (this._isSendingComposition) {\\n          this._isSendingComposition = false;\\n          let input;\\n          if (this._isComposing) {\\n            // Use the end position to get the string if a new composition has started.\\n            input = this._textarea.value.substring(currentCompositionPosition.start, currentCompositionPosition.end);\\n          } else {\\n            // Don't use the end position here in order to pick up any characters after the\\n            // composition has finished, for example when typing a non-composition character\\n            // (eg. 2) after a composition character.\\n            input = this._textarea.value.substring(currentCompositionPosition.start);\\n          }\\n          this._terminal.handler(input);\\n        }\\n      }, 0);\\n    }\\n  }\\n\\n  /**\\n   * Apply any changes made to the textarea after the current event chain is allowed to complete.\\n   * This should be called when not currently composing but a keydown event with the \\\"composition\\n   * character\\\" (229) is triggered, in order to allow non-composition text to be entered when an\\n   * IME is active.\\n   */\\n  private _handleAnyTextareaChanges(): void {\\n    const oldValue = this._textarea.value;\\n    setTimeout(() => {\\n      // Ignore if a composition has started since the timeout\\n      if (!this._isComposing) {\\n        const newValue = this._textarea.value;\\n        const diff = newValue.replace(oldValue, '');\\n        if (diff.length > 0) {\\n          this._terminal.handler(diff);\\n        }\\n      }\\n    }, 0);\\n  }\\n\\n  /**\\n   * Positions the composition view on top of the cursor and the textarea just below it (so the\\n   * IME helper dialog is positioned correctly).\\n   * @param dontRecurse Whether to use setTimeout to recursively trigger another update, this is\\n   *   necessary as the IME events across browsers are not consistently triggered.\\n   */\\n  public updateCompositionElements(dontRecurse?: boolean): void {\\n    if (!this._isComposing) {\\n      return;\\n    }\\n\\n    if (this._terminal.buffer.isCursorInViewport) {\\n      const cellHeight = Math.ceil(this._terminal.charMeasure.height * this._terminal.options.lineHeight);\\n      const cursorTop = this._terminal.buffer.y * cellHeight;\\n      const cursorLeft = this._terminal.buffer.x * this._terminal.charMeasure.width;\\n\\n      this._compositionView.style.left = cursorLeft + 'px';\\n      this._compositionView.style.top = cursorTop + 'px';\\n      this._compositionView.style.height = cellHeight + 'px';\\n      this._compositionView.style.lineHeight = cellHeight + 'px';\\n      // Sync the textarea to the exact position of the composition view so the IME knows where the\\n      // text is.\\n      const compositionViewBounds = this._compositionView.getBoundingClientRect();\\n      this._textarea.style.left = cursorLeft + 'px';\\n      this._textarea.style.top = cursorTop + 'px';\\n      this._textarea.style.width = compositionViewBounds.width + 'px';\\n      this._textarea.style.height = compositionViewBounds.height + 'px';\\n      this._textarea.style.lineHeight = compositionViewBounds.height + 'px';\\n    }\\n\\n    if (!dontRecurse) {\\n      setTimeout(() => this.updateCompositionElements(true), 0);\\n    }\\n  }\\n\\n  /**\\n   * Clears the textarea's position so that the cursor does not blink on IE.\\n   * @private\\n   */\\n  private _clearTextareaPosition(): void {\\n    this._textarea.style.left = '';\\n    this._textarea.style.top = '';\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { ICharset } from './Types';\\n\\n/**\\n * The character sets supported by the terminal. These enable several languages\\n * to be represented within the terminal with only 8-bit encoding. See ISO 2022\\n * for a discussion on character sets. Only VT100 character sets are supported.\\n */\\nexport const CHARSETS: { [key: string]: ICharset } = {};\\n\\n/**\\n * The default character set, US.\\n */\\nexport const DEFAULT_CHARSET: ICharset = CHARSETS['B'];\\n\\n/**\\n * DEC Special Character and Line Drawing Set.\\n * Reference: http://vt100.net/docs/vt102-ug/table5-13.html\\n * A lot of curses apps use this if they see TERM=xterm.\\n * testing: echo -e '\\\\e(0a\\\\e(B'\\n * The xterm output sometimes seems to conflict with the\\n * reference above. xterm seems in line with the reference\\n * when running vttest however.\\n * The table below now uses xterm's output from vttest.\\n */\\nCHARSETS['0'] = {\\n  '`': '\\\\u25c6', // '◆'\\n  'a': '\\\\u2592', // '▒'\\n  'b': '\\\\u0009', // '\\\\t'\\n  'c': '\\\\u000c', // '\\\\f'\\n  'd': '\\\\u000d', // '\\\\r'\\n  'e': '\\\\u000a', // '\\\\n'\\n  'f': '\\\\u00b0', // '°'\\n  'g': '\\\\u00b1', // '±'\\n  'h': '\\\\u2424', // '\\\\u2424' (NL)\\n  'i': '\\\\u000b', // '\\\\v'\\n  'j': '\\\\u2518', // '┘'\\n  'k': '\\\\u2510', // '┐'\\n  'l': '\\\\u250c', // '┌'\\n  'm': '\\\\u2514', // '└'\\n  'n': '\\\\u253c', // '┼'\\n  'o': '\\\\u23ba', // '⎺'\\n  'p': '\\\\u23bb', // '⎻'\\n  'q': '\\\\u2500', // '─'\\n  'r': '\\\\u23bc', // '⎼'\\n  's': '\\\\u23bd', // '⎽'\\n  't': '\\\\u251c', // '├'\\n  'u': '\\\\u2524', // '┤'\\n  'v': '\\\\u2534', // '┴'\\n  'w': '\\\\u252c', // '┬'\\n  'x': '\\\\u2502', // '│'\\n  'y': '\\\\u2264', // '≤'\\n  'z': '\\\\u2265', // '≥'\\n  '{': '\\\\u03c0', // 'π'\\n  '|': '\\\\u2260', // '≠'\\n  '}': '\\\\u00a3', // '£'\\n  '~': '\\\\u00b7'  // '·'\\n};\\n\\n/**\\n * British character set\\n * ESC (A\\n * Reference: http://vt100.net/docs/vt220-rm/table2-5.html\\n */\\nCHARSETS['A'] = {\\n  '#': '£'\\n};\\n\\n/**\\n * United States character set\\n * ESC (B\\n */\\nCHARSETS['B'] = null;\\n\\n/**\\n * Dutch character set\\n * ESC (4\\n * Reference: http://vt100.net/docs/vt220-rm/table2-6.html\\n */\\nCHARSETS['4'] = {\\n  '#': '£',\\n  '@': '¾',\\n  '[': 'ij',\\n  '\\\\\\\\': '½',\\n  ']': '|',\\n  '{': '¨',\\n  '|': 'f',\\n  '}': '¼',\\n  '~': '´'\\n};\\n\\n/**\\n * Finnish character set\\n * ESC (C or ESC (5\\n * Reference: http://vt100.net/docs/vt220-rm/table2-7.html\\n */\\nCHARSETS['C'] =\\nCHARSETS['5'] = {\\n  '[': 'Ä',\\n  '\\\\\\\\': 'Ö',\\n  ']': 'Å',\\n  '^': 'Ü',\\n  '`': 'é',\\n  '{': 'ä',\\n  '|': 'ö',\\n  '}': 'å',\\n  '~': 'ü'\\n};\\n\\n/**\\n * French character set\\n * ESC (R\\n * Reference: http://vt100.net/docs/vt220-rm/table2-8.html\\n */\\nCHARSETS['R'] = {\\n  '#': '£',\\n  '@': 'à',\\n  '[': '°',\\n  '\\\\\\\\': 'ç',\\n  ']': '§',\\n  '{': 'é',\\n  '|': 'ù',\\n  '}': 'è',\\n  '~': '¨'\\n};\\n\\n/**\\n * French Canadian character set\\n * ESC (Q\\n * Reference: http://vt100.net/docs/vt220-rm/table2-9.html\\n */\\nCHARSETS['Q'] = {\\n  '@': 'à',\\n  '[': 'â',\\n  '\\\\\\\\': 'ç',\\n  ']': 'ê',\\n  '^': 'î',\\n  '`': 'ô',\\n  '{': 'é',\\n  '|': 'ù',\\n  '}': 'è',\\n  '~': 'û'\\n};\\n\\n/**\\n * German character set\\n * ESC (K\\n * Reference: http://vt100.net/docs/vt220-rm/table2-10.html\\n */\\nCHARSETS['K'] = {\\n  '@': '§',\\n  '[': 'Ä',\\n  '\\\\\\\\': 'Ö',\\n  ']': 'Ü',\\n  '{': 'ä',\\n  '|': 'ö',\\n  '}': 'ü',\\n  '~': 'ß'\\n};\\n\\n/**\\n * Italian character set\\n * ESC (Y\\n * Reference: http://vt100.net/docs/vt220-rm/table2-11.html\\n */\\nCHARSETS['Y'] = {\\n  '#': '£',\\n  '@': '§',\\n  '[': '°',\\n  '\\\\\\\\': 'ç',\\n  ']': 'é',\\n  '`': 'ù',\\n  '{': 'à',\\n  '|': 'ò',\\n  '}': 'è',\\n  '~': 'ì'\\n};\\n\\n/**\\n * Norwegian/Danish character set\\n * ESC (E or ESC (6\\n * Reference: http://vt100.net/docs/vt220-rm/table2-12.html\\n */\\nCHARSETS['E'] =\\nCHARSETS['6'] = {\\n  '@': 'Ä',\\n  '[': 'Æ',\\n  '\\\\\\\\': 'Ø',\\n  ']': 'Å',\\n  '^': 'Ü',\\n  '`': 'ä',\\n  '{': 'æ',\\n  '|': 'ø',\\n  '}': 'å',\\n  '~': 'ü'\\n};\\n\\n/**\\n * Spanish character set\\n * ESC (Z\\n * Reference: http://vt100.net/docs/vt220-rm/table2-13.html\\n */\\nCHARSETS['Z'] = {\\n  '#': '£',\\n  '@': '§',\\n  '[': '¡',\\n  '\\\\\\\\': 'Ñ',\\n  ']': '¿',\\n  '{': '°',\\n  '|': 'ñ',\\n  '}': 'ç'\\n};\\n\\n/**\\n * Swedish character set\\n * ESC (H or ESC (7\\n * Reference: http://vt100.net/docs/vt220-rm/table2-14.html\\n */\\nCHARSETS['H'] =\\nCHARSETS['7'] = {\\n  '@': 'É',\\n  '[': 'Ä',\\n  '\\\\\\\\': 'Ö',\\n  ']': 'Å',\\n  '^': 'Ü',\\n  '`': 'é',\\n  '{': 'ä',\\n  '|': 'ö',\\n  '}': 'å',\\n  '~': 'ü'\\n};\\n\\n/**\\n * Swiss character set\\n * ESC (=\\n * Reference: http://vt100.net/docs/vt220-rm/table2-15.html\\n */\\nCHARSETS['='] = {\\n  '#': 'ù',\\n  '@': 'à',\\n  '[': 'é',\\n  '\\\\\\\\': 'ç',\\n  ']': 'ê',\\n  '^': 'î',\\n  '_': 'è',\\n  '`': 'ô',\\n  '{': 'ä',\\n  '|': 'ö',\\n  '}': 'ü',\\n  '~': 'û'\\n};\\n\",\"/**\\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nexport const wcwidth = (function(opts: {nul: number, control: number}): (ucs: number) => number {\\n    // extracted from https://www.cl.cam.ac.uk/%7Emgk25/ucs/wcwidth.c\\n    // combining characters\\n    const COMBINING_BMP = [\\n      [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\\n      [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\\n      [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\\n      [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\\n      [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\\n      [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\\n      [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\\n      [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\\n      [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\\n      [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\\n      [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\\n      [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\\n      [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\\n      [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\\n      [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\\n      [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\\n      [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\\n      [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\\n      [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\\n      [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\\n      [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\\n      [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\\n      [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\\n      [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\\n      [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\\n      [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\\n      [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\\n      [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\\n      [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\\n      [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\\n      [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\\n      [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\\n      [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\\n      [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\\n      [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\\n      [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\\n      [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\\n      [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\\n      [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\\n      [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\\n      [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\\n      [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\\n      [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB]\\n    ];\\n    const COMBINING_HIGH = [\\n      [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\\n      [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\\n      [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\\n      [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\\n      [0xE0100, 0xE01EF]\\n    ];\\n    // binary search\\n    function bisearch(ucs: number, data: number[][]): boolean {\\n      let min = 0;\\n      let max = data.length - 1;\\n      let mid;\\n      if (ucs < data[0][0] || ucs > data[max][1]) {\\n        return false;\\n      }\\n      while (max >= min) {\\n        mid = (min + max) >> 1;\\n        if (ucs > data[mid][1]) {\\n          min = mid + 1;\\n        } else if (ucs < data[mid][0]) {\\n          max = mid - 1;\\n        } else {\\n          return true;\\n        }\\n      }\\n      return false;\\n    }\\n    function wcwidthBMP(ucs: number): number {\\n      // test for 8-bit control characters\\n      if (ucs === 0) {\\n        return opts.nul;\\n      }\\n      if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0)) {\\n        return opts.control;\\n      }\\n      // binary search in table of non-spacing characters\\n      if (bisearch(ucs, COMBINING_BMP)) {\\n        return 0;\\n      }\\n      // if we arrive here, ucs is not a combining or C0/C1 control character\\n      if (isWideBMP(ucs)) {\\n        return 2;\\n      }\\n      return 1;\\n    }\\n    function isWideBMP(ucs: number): boolean {\\n      return (\\n        ucs >= 0x1100 && (\\n        ucs <= 0x115f ||                // Hangul Jamo init. consonants\\n        ucs === 0x2329 ||\\n        ucs === 0x232a ||\\n        (ucs >= 0x2e80 && ucs <= 0xa4cf && ucs !== 0x303f) ||  // CJK..Yi\\n        (ucs >= 0xac00 && ucs <= 0xd7a3) ||    // Hangul Syllables\\n        (ucs >= 0xf900 && ucs <= 0xfaff) ||    // CJK Compat Ideographs\\n        (ucs >= 0xfe10 && ucs <= 0xfe19) ||    // Vertical forms\\n        (ucs >= 0xfe30 && ucs <= 0xfe6f) ||    // CJK Compat Forms\\n        (ucs >= 0xff00 && ucs <= 0xff60) ||    // Fullwidth Forms\\n        (ucs >= 0xffe0 && ucs <= 0xffe6)));\\n    }\\n    function wcwidthHigh(ucs: number): 0 | 1 | 2 {\\n      if (bisearch(ucs, COMBINING_HIGH)) {\\n        return 0;\\n      }\\n      if ((ucs >= 0x20000 && ucs <= 0x2fffd) || (ucs >= 0x30000 && ucs <= 0x3fffd)) {\\n        return 2;\\n      }\\n      return 1;\\n    }\\n    const control = opts.control | 0;\\n    let table: number[] | Uint32Array = null;\\n    function init_table(): number[] | Uint32Array {\\n      // lookup table for BMP\\n      const CODEPOINTS = 65536;  // BMP holds 65536 codepoints\\n      const BITWIDTH = 2;        // a codepoint can have a width of 0, 1 or 2\\n      const ITEMSIZE = 32;       // using uint32_t\\n      const CONTAINERSIZE = CODEPOINTS * BITWIDTH / ITEMSIZE;\\n      const CODEPOINTS_PER_ITEM = ITEMSIZE / BITWIDTH;\\n      table = (typeof Uint32Array === 'undefined')\\n        ? new Array(CONTAINERSIZE)\\n        : new Uint32Array(CONTAINERSIZE);\\n      for (let i = 0; i < CONTAINERSIZE; ++i) {\\n        let num = 0;\\n        let pos = CODEPOINTS_PER_ITEM;\\n        while (pos--) {\\n          num = (num << 2) | wcwidthBMP(CODEPOINTS_PER_ITEM * i + pos);\\n        }\\n        table[i] = num;\\n      }\\n      return table;\\n    }\\n    // get width from lookup table\\n    //   position in container   : num / CODEPOINTS_PER_ITEM\\n    //     ==> n = table[Math.floor(num / 16)]\\n    //     ==> n = table[num >> 4]\\n    //   16 codepoints per number:       FFEEDDCCBBAA99887766554433221100\\n    //   position in number      : (num % CODEPOINTS_PER_ITEM) * BITWIDTH\\n    //     ==> m = (n % 16) * 2\\n    //     ==> m = (num & 15) << 1\\n    //   right shift to position m\\n    //     ==> n = n >> m     e.g. m=12  000000000000FFEEDDCCBBAA99887766\\n    //   we are only interested in 2 LSBs, cut off higher bits\\n    //     ==> n = n & 3      e.g.       000000000000000000000000000000XX\\n    return function (num: number): number {\\n      num = num | 0;  // get asm.js like optimization under V8\\n      if (num < 32) {\\n        return control | 0;\\n      }\\n      if (num < 127) {\\n        return 1;\\n      }\\n      let t = table || init_table();\\n      if (num < 65536) {\\n        return t[num >> 4] >> ((num & 15) << 1) & 3;\\n      }\\n      // do a full search for high codepoints\\n      return wcwidthHigh(num);\\n    };\\n})({nul: 0, control: 0});  // configurable options\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { ITerminal, IBufferSet } from './Types';\\nimport { Buffer } from './Buffer';\\nimport { EventEmitter } from './EventEmitter';\\n\\n/**\\n * The BufferSet represents the set of two buffers used by xterm terminals (normal and alt) and\\n * provides also utilities for working with them.\\n */\\nexport class BufferSet extends EventEmitter implements IBufferSet {\\n  private _normal: Buffer;\\n  private _alt: Buffer;\\n  private _activeBuffer: Buffer;\\n\\n  /**\\n   * Create a new BufferSet for the given terminal.\\n   * @param {Terminal} terminal - The terminal the BufferSet will belong to\\n   */\\n  constructor(private _terminal: ITerminal) {\\n    super();\\n    this._normal = new Buffer(this._terminal, true);\\n    this._normal.fillViewportRows();\\n\\n    // The alt buffer should never have scrollback.\\n    // See http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-The-Alternate-Screen-Buffer\\n    this._alt = new Buffer(this._terminal, false);\\n    this._activeBuffer = this._normal;\\n\\n    this.setupTabStops();\\n  }\\n\\n  /**\\n   * Returns the alt Buffer of the BufferSet\\n   * @returns {Buffer}\\n   */\\n  public get alt(): Buffer {\\n    return this._alt;\\n  }\\n\\n  /**\\n   * Returns the normal Buffer of the BufferSet\\n   * @returns {Buffer}\\n   */\\n  public get active(): Buffer {\\n    return this._activeBuffer;\\n  }\\n\\n  /**\\n   * Returns the currently active Buffer of the BufferSet\\n   * @returns {Buffer}\\n   */\\n  public get normal(): Buffer {\\n    return this._normal;\\n  }\\n\\n  /**\\n   * Sets the normal Buffer of the BufferSet as its currently active Buffer\\n   */\\n  public activateNormalBuffer(): void {\\n    if (this._activeBuffer === this._normal) {\\n      return;\\n    }\\n    // The alt buffer should always be cleared when we switch to the normal\\n    // buffer. This frees up memory since the alt buffer should always be new\\n    // when activated.\\n    this._alt.clear();\\n    this._activeBuffer = this._normal;\\n    this.emit('activate', {\\n      activeBuffer: this._normal,\\n      inactiveBuffer: this._alt\\n    });\\n  }\\n\\n  /**\\n   * Sets the alt Buffer of the BufferSet as its currently active Buffer\\n   */\\n  public activateAltBuffer(): void {\\n    if (this._activeBuffer === this._alt) {\\n      return;\\n    }\\n    // Since the alt buffer is always cleared when the normal buffer is\\n    // activated, we want to fill it when switching to it.\\n    this._alt.fillViewportRows();\\n    this._activeBuffer = this._alt;\\n    this.emit('activate', {\\n      activeBuffer: this._alt,\\n      inactiveBuffer: this._normal\\n    });\\n  }\\n\\n  /**\\n   * Resizes both normal and alt buffers, adjusting their data accordingly.\\n   * @param newCols The new number of columns.\\n   * @param newRows The new number of rows.\\n   */\\n  public resize(newCols: number, newRows: number): void {\\n    this._normal.resize(newCols, newRows);\\n    this._alt.resize(newCols, newRows);\\n  }\\n\\n  /**\\n   * Setup the tab stops.\\n   * @param i The index to start setting up tab stops from.\\n   */\\n  public setupTabStops(i?: number): void {\\n    this._normal.setupTabStops(i);\\n    this._alt.setupTabStops(i);\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport { CircularList } from './utils/CircularList';\\nimport { LineData, CharData, ITerminal, IBuffer } from './Types';\\nimport { EventEmitter } from './EventEmitter';\\nimport { IDisposable, IMarker } from 'xterm';\\n\\nexport const CHAR_DATA_ATTR_INDEX = 0;\\nexport const CHAR_DATA_CHAR_INDEX = 1;\\nexport const CHAR_DATA_WIDTH_INDEX = 2;\\nexport const CHAR_DATA_CODE_INDEX = 3;\\nexport const MAX_BUFFER_SIZE = 4294967295; // 2^32 - 1\\n\\n/**\\n * This class represents a terminal buffer (an internal state of the terminal), where the\\n * following information is stored (in high-level):\\n *   - text content of this particular buffer\\n *   - cursor position\\n *   - scroll position\\n */\\nexport class Buffer implements IBuffer {\\n  private _lines: CircularList<LineData>;\\n\\n  public ydisp: number;\\n  public ybase: number;\\n  public y: number;\\n  public x: number;\\n  public scrollBottom: number;\\n  public scrollTop: number;\\n  public tabs: any;\\n  public savedY: number;\\n  public savedX: number;\\n  public markers: Marker[] = [];\\n\\n  /**\\n   * Create a new Buffer.\\n   * @param _terminal The terminal the Buffer will belong to.\\n   * @param _hasScrollback Whether the buffer should respect the scrollback of\\n   * the terminal.\\n   */\\n  constructor(\\n    private _terminal: ITerminal,\\n    private _hasScrollback: boolean\\n  ) {\\n    this.clear();\\n  }\\n\\n  public get lines(): CircularList<LineData> {\\n    return this._lines;\\n  }\\n\\n  public get hasScrollback(): boolean {\\n    return this._hasScrollback && this.lines.maxLength > this._terminal.rows;\\n  }\\n\\n  public get isCursorInViewport(): boolean {\\n    const absoluteY = this.ybase + this.y;\\n    const relativeY = absoluteY - this.ydisp;\\n    return (relativeY >= 0 && relativeY < this._terminal.rows);\\n  }\\n\\n  /**\\n   * Gets the correct buffer length based on the rows provided, the terminal's\\n   * scrollback and whether this buffer is flagged to have scrollback or not.\\n   * @param rows The terminal rows to use in the calculation.\\n   */\\n  private _getCorrectBufferLength(rows: number): number {\\n    if (!this._hasScrollback) {\\n      return rows;\\n    }\\n\\n    const correctBufferLength = rows + this._terminal.options.scrollback;\\n\\n    return correctBufferLength > MAX_BUFFER_SIZE ? MAX_BUFFER_SIZE : correctBufferLength;\\n  }\\n\\n  /**\\n   * Fills the buffer's viewport with blank lines.\\n   */\\n  public fillViewportRows(): void {\\n    if (this._lines.length === 0) {\\n      let i = this._terminal.rows;\\n      while (i--) {\\n        this.lines.push(this._terminal.blankLine());\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Clears the buffer to it's initial state, discarding all previous data.\\n   */\\n  public clear(): void {\\n    this.ydisp = 0;\\n    this.ybase = 0;\\n    this.y = 0;\\n    this.x = 0;\\n    this._lines = new CircularList<LineData>(this._getCorrectBufferLength(this._terminal.rows));\\n    this.scrollTop = 0;\\n    this.scrollBottom = this._terminal.rows - 1;\\n    this.setupTabStops();\\n  }\\n\\n  /**\\n   * Resizes the buffer, adjusting its data accordingly.\\n   * @param newCols The new number of columns.\\n   * @param newRows The new number of rows.\\n   */\\n  public resize(newCols: number, newRows: number): void {\\n    // Increase max length if needed before adjustments to allow space to fill\\n    // as required.\\n    const newMaxLength = this._getCorrectBufferLength(newRows);\\n    if (newMaxLength > this._lines.maxLength) {\\n      this._lines.maxLength = newMaxLength;\\n    }\\n\\n    // The following adjustments should only happen if the buffer has been\\n    // initialized/filled.\\n    if (this._lines.length > 0) {\\n      // Deal with columns increasing (we don't do anything when columns reduce)\\n      if (this._terminal.cols < newCols) {\\n        const ch: CharData = [this._terminal.defAttr, ' ', 1, 32]; // does xterm use the default attr?\\n        for (let i = 0; i < this._lines.length; i++) {\\n          while (this._lines.get(i).length < newCols) {\\n            this._lines.get(i).push(ch);\\n          }\\n        }\\n      }\\n\\n      // Resize rows in both directions as needed\\n      let addToY = 0;\\n      if (this._terminal.rows < newRows) {\\n        for (let y = this._terminal.rows; y < newRows; y++) {\\n          if (this._lines.length < newRows + this.ybase) {\\n            if (this.ybase > 0 && this._lines.length <= this.ybase + this.y + addToY + 1) {\\n              // There is room above the buffer and there are no empty elements below the line,\\n              // scroll up\\n              this.ybase--;\\n              addToY++;\\n              if (this.ydisp > 0) {\\n                // Viewport is at the top of the buffer, must increase downwards\\n                this.ydisp--;\\n              }\\n            } else {\\n              // Add a blank line if there is no buffer left at the top to scroll to, or if there\\n              // are blank lines after the cursor\\n              this._lines.push(this._terminal.blankLine(undefined, undefined, newCols));\\n            }\\n          }\\n        }\\n      } else { // (this._terminal.rows >= newRows)\\n        for (let y = this._terminal.rows; y > newRows; y--) {\\n          if (this._lines.length > newRows + this.ybase) {\\n            if (this._lines.length > this.ybase + this.y + 1) {\\n              // The line is a blank line below the cursor, remove it\\n              this._lines.pop();\\n            } else {\\n              // The line is the cursor, scroll down\\n              this.ybase++;\\n              this.ydisp++;\\n            }\\n          }\\n        }\\n      }\\n\\n      // Reduce max length if needed after adjustments, this is done after as it\\n      // would otherwise cut data from the bottom of the buffer.\\n      if (newMaxLength < this._lines.maxLength) {\\n        // Trim from the top of the buffer and adjust ybase and ydisp.\\n        const amountToTrim = this._lines.length - newMaxLength;\\n        if (amountToTrim > 0) {\\n          this._lines.trimStart(amountToTrim);\\n          this.ybase = Math.max(this.ybase - amountToTrim, 0);\\n          this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\\n        }\\n        this._lines.maxLength = newMaxLength;\\n      }\\n\\n      // Make sure that the cursor stays on screen\\n      this.x = Math.min(this.x, newCols - 1);\\n      this.y = Math.min(this.y, newRows - 1);\\n      if (addToY) {\\n        this.y += addToY;\\n      }\\n      this.savedY = Math.min(this.savedY, newRows - 1);\\n      this.savedX = Math.min(this.savedX, newCols - 1);\\n\\n      this.scrollTop = 0;\\n    }\\n\\n    this.scrollBottom = newRows - 1;\\n  }\\n\\n  /**\\n   * Translates a buffer line to a string, with optional start and end columns.\\n   * Wide characters will count as two columns in the resulting string. This\\n   * function is useful for getting the actual text underneath the raw selection\\n   * position.\\n   * @param line The line being translated.\\n   * @param trimRight Whether to trim whitespace to the right.\\n   * @param startCol The column to start at.\\n   * @param endCol The column to end at.\\n   */\\n  public translateBufferLineToString(lineIndex: number, trimRight: boolean, startCol: number = 0, endCol: number = null): string {\\n    // Get full line\\n    let lineString = '';\\n    const line = this.lines.get(lineIndex);\\n    if (!line) {\\n      return '';\\n    }\\n\\n    // Initialize column and index values. Column values represent the actual\\n    // cell column, indexes represent the index in the string. Indexes are\\n    // needed here because some chars are 0 characters long (eg. after wide\\n    // chars) and some chars are longer than 1 characters long (eg. emojis).\\n    let startIndex = startCol;\\n    // Only set endCol to the line length when it is null. 0 is a valid column.\\n    if (endCol === null) {\\n      endCol = line.length;\\n    }\\n    let endIndex = endCol;\\n\\n    for (let i = 0; i < line.length; i++) {\\n      const char = line[i];\\n      lineString += char[CHAR_DATA_CHAR_INDEX];\\n      // Adjust start and end cols for wide characters if they affect their\\n      // column indexes\\n      if (char[CHAR_DATA_WIDTH_INDEX] === 0) {\\n        if (startCol >= i) {\\n          startIndex--;\\n        }\\n        if (endCol >= i) {\\n          endIndex--;\\n        }\\n      } else {\\n        // Adjust the columns to take glyphs that are represented by multiple\\n        // code points into account.\\n        if (char[CHAR_DATA_CHAR_INDEX].length > 1) {\\n          if (startCol > i) {\\n            startIndex += char[CHAR_DATA_CHAR_INDEX].length - 1;\\n          }\\n          if (endCol > i) {\\n            endIndex += char[CHAR_DATA_CHAR_INDEX].length - 1;\\n          }\\n        }\\n      }\\n    }\\n\\n    // Calculate the final end col by trimming whitespace on the right of the\\n    // line if needed.\\n    if (trimRight) {\\n      const rightWhitespaceIndex = lineString.search(/\\\\s+$/);\\n      if (rightWhitespaceIndex !== -1) {\\n        endIndex = Math.min(endIndex, rightWhitespaceIndex);\\n      }\\n      // Return the empty string if only trimmed whitespace is selected\\n      if (endIndex <= startIndex) {\\n        return '';\\n      }\\n    }\\n\\n    return lineString.substring(startIndex, endIndex);\\n  }\\n\\n  /**\\n   * Setup the tab stops.\\n   * @param i The index to start setting up tab stops from.\\n   */\\n  public setupTabStops(i?: number): void {\\n    if (i != null) {\\n      if (!this.tabs[i]) {\\n        i = this.prevStop(i);\\n      }\\n    } else {\\n      this.tabs = {};\\n      i = 0;\\n    }\\n\\n    for (; i < this._terminal.cols; i += this._terminal.options.tabStopWidth) {\\n      this.tabs[i] = true;\\n    }\\n  }\\n\\n  /**\\n   * Move the cursor to the previous tab stop from the given position (default is current).\\n   * @param x The position to move the cursor to the previous tab stop.\\n   */\\n  public prevStop(x?: number): number {\\n    if (x == null) {\\n      x = this.x;\\n    }\\n    while (!this.tabs[--x] && x > 0);\\n    return x >= this._terminal.cols ? this._terminal.cols - 1 : x < 0 ? 0 : x;\\n  }\\n\\n  /**\\n   * Move the cursor one tab stop forward from the given position (default is current).\\n   * @param x The position to move the cursor one tab stop forward.\\n   */\\n  public nextStop(x?: number): number {\\n    if (x == null) {\\n      x = this.x;\\n    }\\n    while (!this.tabs[++x] && x < this._terminal.cols);\\n    return x >= this._terminal.cols ? this._terminal.cols - 1 : x < 0 ? 0 : x;\\n  }\\n\\n  public addMarker(y: number): Marker {\\n    const marker = new Marker(y);\\n    this.markers.push(marker);\\n    marker.disposables.push(this._lines.addDisposableListener('trim', amount => {\\n      marker.line -= amount;\\n      // The marker should be disposed when the line is trimmed from the buffer\\n      if (marker.line < 0) {\\n        marker.dispose();\\n      }\\n    }));\\n    marker.on('dispose', () => this._removeMarker(marker));\\n    return marker;\\n  }\\n\\n  private _removeMarker(marker: Marker): void {\\n    // TODO: This could probably be optimized by relying on sort order and trimming the array using .length\\n    this.markers.splice(this.markers.indexOf(marker), 1);\\n  }\\n}\\n\\nexport class Marker extends EventEmitter implements IMarker {\\n  private static NEXT_ID = 1;\\n\\n  private _id: number = Marker.NEXT_ID++;\\n  public isDisposed: boolean = false;\\n  public disposables: IDisposable[] = [];\\n\\n  public get id(): number { return this._id; }\\n\\n  constructor(\\n    public line: number\\n  ) {\\n    super();\\n  }\\n\\n  public dispose(): void {\\n    if (this.isDisposed) {\\n      return;\\n    }\\n    this.isDisposed = true;\\n    this.disposables.forEach(d => d.dispose());\\n    this.disposables.length = 0;\\n    this.emit('dispose');\\n  }\\n}\\n\",\"/**\\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\\n * @license MIT\\n */\\n\\nimport * as Strings from './Strings';\\nimport { ITerminal, IBuffer } from './Types';\\nimport { isMac } from './shared/utils/Browser';\\nimport { RenderDebouncer } from './utils/RenderDebouncer';\\nimport { addDisposableListener } from './utils/Dom';\\nimport { IDisposable } from 'xterm';\\n\\nconst MAX_ROWS_TO_READ = 20;\\n\\nenum BoundaryPosition {\\n  Top,\\n  Bottom\\n}\\n\\nexport class AccessibilityManager implements IDisposable {\\n  private _accessibilityTreeRoot: HTMLElement;\\n  private _rowContainer: HTMLElement;\\n  private _rowElements: HTMLElement[];\\n  private _liveRegion: HTMLElement;\\n  private _liveRegionLineCount: number = 0;\\n\\n  private _renderRowsDebouncer: RenderDebouncer;\\n\\n  private _topBoundaryFocusListener: (e: FocusEvent) => void;\\n  private _bottomBoundaryFocusListener: (e: FocusEvent) => void;\\n\\n  private _disposables: IDisposable[] = [];\\n\\n  /**\\n   * This queue has a character pushed to it for keys that are pressed, if the\\n   * next character added to the terminal is equal to the key char then it is\\n   * not announced (added to live region) because it has already been announced\\n   * by the textarea event (which cannot be canceled). There are some race\\n   * condition cases if there is typing while data is streaming, but this covers\\n   * the main case of typing into the prompt and inputting the answer to a\\n   * question (Y/N, etc.).\\n   */\\n  private _charsToConsume: string[] = [];\\n\\n  constructor(private _terminal: ITerminal) {\\n    this._accessibilityTreeRoot = document.createElement('div');\\n    this._accessibilityTreeRoot.classList.add('xterm-accessibility');\\n\\n    this._rowContainer = document.createElement('div');\\n    this._rowContainer.classList.add('xterm-accessibility-tree');\\n    this._rowElements = [];\\n    for (let i = 0; i < this._terminal.rows; i++) {\\n      this._rowElements[i] = this._createAccessibilityTreeNode();\\n      this._rowContainer.appendChild(this._rowElements[i]);\\n    }\\n\\n    this._topBoundaryFocusListener = e => this._onBoundaryFocus(e, BoundaryPosition.Top);\\n    this._bottomBoundaryFocusListener = e => this._onBoundaryFocus(e, BoundaryPosition.Bottom);\\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\\n\\n    this._refreshRowsDimensions();\\n    this._accessibilityTreeRoot.appendChild(this._rowContainer);\\n\\n    this._renderRowsDebouncer = new RenderDebouncer(this._terminal, this._renderRows.bind(this));\\n    this._refreshRows();\\n\\n    this._liveRegion = document.createElement('div');\\n    this._liveRegion.classList.add('live-region');\\n    this._liveRegion.setAttribute('aria-live', 'assertive');\\n    this._accessibilityTreeRoot.appendChild(this._liveRegion);\\n\\n    this._terminal.element.insertAdjacentElement('afterbegin', this._accessibilityTreeRoot);\\n\\n    this._disposables.push(this._renderRowsDebouncer);\\n    this._disposables.push(this._terminal.addDisposableListener('resize', data => this._onResize(data.cols, data.rows)));\\n    this._disposables.push(this._terminal.addDisposableListener('refresh', data => this._refreshRows(data.start, data.end)));\\n    this._disposables.push(this._terminal.addDisposableListener('scroll', data => this._refreshRows()));\\n    // Line feed is an issue as the prompt won't be read out after a command is run\\n    this._disposables.push(this._terminal.addDisposableListener('a11y.char', (char) => this._onChar(char)));\\n    this._disposables.push(this._terminal.addDisposableListener('linefeed', () => this._onChar('\\\\n')));\\n    this._disposables.push(this._terminal.addDisposableListener('a11y.tab', spaceCount => this._onTab(spaceCount)));\\n    this._disposables.push(this._terminal.addDisposableListener('key', keyChar => this._onKey(keyChar)));\\n    this._disposables.push(this._terminal.addDisposableListener('blur', () => this._clearLiveRegion()));\\n    // TODO: Maybe renderer should fire an event on terminal when the characters change and that\\n    //       should be listened to instead? That would mean that the order of events are always\\n    //       guarenteed\\n    this._disposables.push(this._terminal.addDisposableListener('dprchange', () => this._refreshRowsDimensions()));\\n    this._disposables.push(this._terminal.renderer.addDisposableListener('resize', () => this._refreshRowsDimensions()));\\n    // This shouldn't be needed on modern browsers but is present in case the\\n    // media query that drives the dprchange event isn't supported\\n    this._disposables.push(addDisposableListener(window, 'resize', () => this._refreshRowsDimensions()));\\n  }\\n\\n  public dispose(): void {\\n    this._disposables.forEach(d => d.dispose());\\n    this._disposables.length = 0;\\n    this._terminal.element.removeChild(this._accessibilityTreeRoot);\\n    this._rowElements.length = 0;\\n  }\\n\\n  private _onBoundaryFocus(e: FocusEvent, position: BoundaryPosition): void {\\n    const boundaryElement = <HTMLElement>e.target;\\n    const beforeBoundaryElement = this._rowElements[position === BoundaryPosition.Top ? 1 : this._rowElements.length - 2];\\n\\n    // Don't scroll if the buffer top has reached the end in that direction\\n    const posInSet = boundaryElement.getAttribute('aria-posinset');\\n    const lastRowPos = position === BoundaryPosition.Top ? '1' : `${this._terminal.buffer.lines.length}`;\\n    if (posInSet === lastRowPos) {\\n      return;\\n    }\\n\\n    // Don't scroll when the last focused item was not the second row (focus is going the other\\n    // direction)\\n    if (e.relatedTarget !== beforeBoundaryElement) {\\n      return;\\n    }\\n\\n    // Remove old boundary element from array\\n    let topBoundaryElement: HTMLElement;\\n    let bottomBoundaryElement: HTMLElement;\\n    if (position === BoundaryPosition.Top) {\\n      topBoundaryElement = boundaryElement;\\n      bottomBoundaryElement = this._rowElements.pop()!;\\n      this._rowContainer.removeChild(bottomBoundaryElement);\\n    } else {\\n      topBoundaryElement = this._rowElements.shift()!;\\n      bottomBoundaryElement = boundaryElement;\\n      this._rowContainer.removeChild(topBoundaryElement);\\n    }\\n\\n    // Remove listeners from old boundary elements\\n    topBoundaryElement.removeEventListener('focus', this._topBoundaryFocusListener);\\n    bottomBoundaryElement.removeEventListener('focus', this._bottomBoundaryFocusListener);\\n\\n    // Add new element to array/DOM\\n    if (position === BoundaryPosition.Top) {\\n      const newElement = this._createAccessibilityTreeNode();\\n      this._rowElements.unshift(newElement);\\n      this._rowContainer.insertAdjacentElement('afterbegin', newElement);\\n    } else {\\n      const newElement = this._createAccessibilityTreeNode();\\n      this._rowElements.push(newElement);\\n      this._rowContainer.appendChild(newElement);\\n    }\\n\\n    // Add listeners to new boundary elements\\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\\n\\n    // Scroll up\\n    this._terminal.scrollLines(position === BoundaryPosition.Top ? -1 : 1);\\n\\n    // Focus new boundary before element\\n    this._rowElements[position === BoundaryPosition.Top ? 1 : this._rowElements.length - 2].focus();\\n\\n    // Prevent the standard behavior\\n    e.preventDefault();\\n    e.stopImmediatePropagation();\\n  }\\n\\n  private _onResize(cols: number, rows: number): void {\\n    // Remove bottom boundary listener\\n    this._rowElements[this._rowElements.length - 1].removeEventListener('focus', this._bottomBoundaryFocusListener);\\n\\n    // Grow rows as required\\n    for (let i = this._rowContainer.children.length; i < this._terminal.rows; i++) {\\n      this._rowElements[i] = this._createAccessibilityTreeNode();\\n      this._rowContainer.appendChild(this._rowElements[i]);\\n    }\\n    // Shrink rows as required\\n    while (this._rowElements.length > rows) {\\n      this._rowContainer.removeChild(this._rowElements.pop()!);\\n    }\\n\\n    // Add bottom boundary listener\\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\\n\\n    this._refreshRowsDimensions();\\n  }\\n\\n  public _createAccessibilityTreeNode(): HTMLElement {\\n    const element = document.createElement('div');\\n    element.setAttribute('role', 'listitem');\\n    element.tabIndex = -1;\\n    this._refreshRowDimensions(element);\\n    return element;\\n  }\\n\\n  private _onTab(spaceCount: number): void {\\n    for (let i = 0; i < spaceCount; i++) {\\n      this._onChar(' ');\\n    }\\n  }\\n\\n  private _onChar(char: string): void {\\n    if (this._liveRegionLineCount < MAX_ROWS_TO_READ + 1) {\\n      if (this._charsToConsume.length > 0) {\\n        // Have the screen reader ignore the char if it was just input\\n        const shiftedChar = this._charsToConsume.shift();\\n        if (shiftedChar !== char) {\\n          this._announceCharacter(char);\\n        }\\n      } else {\\n        this._announceCharacter(char);\\n      }\\n\\n      if (char === '\\\\n') {\\n        this._liveRegionLineCount++;\\n        if (this._liveRegionLineCount === MAX_ROWS_TO_READ + 1) {\\n          this._liveRegion.textContent += Strings.tooMuchOutput;\\n        }\\n      }\\n\\n      // Only detach/attach on mac as otherwise messages can go unaccounced\\n      if (isMac) {\\n        if (this._liveRegion.textContent && this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode) {\\n          setTimeout(() => {\\n            this._accessibilityTreeRoot.appendChild(this._liveRegion);\\n          }, 0);\\n        }\\n      }\\n    }\\n  }\\n\\n  private _clearLiveRegion(): void {\\n    this._liveRegion.textContent = '';\\n    this._liveRegionLineCount = 0;\\n\\n    // Only detach/attach on mac as otherwise messages can go unaccounced\\n    if (isMac) {\\n      if (this._liveRegion.parentNode) {\\n        this._accessibilityTreeRoot.removeChild(this._liveRegion);\\n      }\\n    }\\n  }\\n\\n  private _onKey(keyChar: string): void {\\n    this._clearLiveRegion();\\n    this._charsToConsume.push(keyChar);\\n  }\\n\\n  private _refreshRows(start?: number, end?: number): void {\\n    this._renderRowsDebouncer.refresh(start, end);\\n  }\\n\\n  private _renderRows(start: number, end: number): void {\\n    const buffer: IBuffer = this._terminal.buffer;\\n    const setSize = buffer.lines.length.toString();\\n    for (let i = start; i <= end; i++) {\\n      const lineData = buffer.translateBufferLineToString(buffer.ydisp + i, true);\\n      const posInSet = (buffer.ydisp + i + 1).toString();\\n      const element = this._rowElements[i];\\n      element.textContent = lineData.length === 0 ? Strings.blankLine : lineData;\\n      element.setAttribute('aria-posinset', posInSet);\\n      element.setAttribute('aria-setsize', setSize);\\n    }\\n  }\\n\\n  private _refreshRowsDimensions(): void {\\n    if (!this._terminal.renderer.dimensions.actualCellHeight) {\\n      return;\\n    }\\n    for (let i = 0; i < this._terminal.rows; i++) {\\n      this._refreshRowDimensions(this._rowElements[i]);\\n    }\\n  }\\n\\n  private _refreshRowDimensions(element: HTMLElement): void {\\n    element.style.height = `${this._terminal.renderer.dimensions.actualCellHeight}px`;\\n  }\\n\\n  private _announceCharacter(char: string): void {\\n    if (char === ' ') {\\n      // Always use nbsp for spaces in order to preserve the space between characters in\\n      // voiceover's caption window\\n      this._liveRegion.innerHTML += '&nbsp;';\\n    } else {\\n      this._liveRegion.textContent += char;\\n    }\\n  }\\n}\\n\",null],\"names\":[],\"mappings\":\"A4CAA;;;ADKA;AAEA;AACA;AACA;AAGA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAyBA;AAAA;AAAA;AApBA;AAOA;AAWA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAGA;AAGA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAtQa;;;;;;;;;;;;;;;;;ADdb;AAEA;AAGa;AACA;AACA;AACA;AACA;AASb;AAoBA;AACA;AACA;AAVA;AAYA;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;;;AAAA;AAOA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAGA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAYA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAhTa;AAkTb;AAAA;AASA;AAAA;AACA;AAPA;AACA;AACA;;AAQA;AANA;AAAA;;;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAuBA;AAxBA;AAAa;;;;;;;;;;;;;;;;;ADnUb;AACA;AAMA;AAAA;AASA;AAAA;AAAA;AAEA;AACA;AAIA;AACA;AAEA;;AACA;AAMA;AAAA;AACA;AACA;;;AAAA;AAMA;AAAA;AACA;AACA;;;AAAA;AAMA;AAAA;AACA;AACA;;;AAAA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAnGa;;;;;;;ADRA;AAGbaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;AD9Ja;AAKA;AAYbwpNa;;;;;;;ADRb;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;;;;;;;ADtEA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAxEa;;;;;;;ADDb;AACA;AACA;AACA;AACA;AASA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAOA;AACA;AACA;AAMA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAauCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAwFA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAoFA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmyBA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAh6Ca;;;;;;;;;;;;;;;;;ADdb;AACA;AACA;AAKA;AAAA;AAeA;AAAA;AACA;AARA;AAIA;AAOA;AACA;AACA;AACA;;AACA;AAMA;AACA;AACA;AAOA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAWA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AASA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AA9QA;AA+QA;AArRA;AAAa;;;;;;;ADPbxfa;;;;;;;;;;;;;;;;;ADlKb;AACA;AAEA;AACA;AACA;AACA;AAMA;AAKA;AAKA;AAMA;AAMA;AAEA;AACA;AAaA;AAAA;AACA;AACA;AACA;AACA;AAUA;AAAA;AAoCA;AAAA;AACA;AACA;AAVA;AAaA;AACA;AAEA;AACA;;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAKA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAAA;;;AAAA;AACA;AAAA;;;AAAA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;;;AAAA;AAKA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AAMA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAIA;AAIA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAOA;AAGA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAluBa;;;;;;;AD3Db;AAuBA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;AAAA;AAMA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAxHa;;;;;;;ADAA;AAEb;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AAAA;AA9Ca;;;;;;;ADRF;AACA;AACA;;;;;;;;;;;;;;;;;ADmBX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAOA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAsHA;AACA;AADA;AApGA;AAwGA;AACA;;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAKA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAGA;AAGA;AAGA;AAIA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAYA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AAGA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAOA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AAIA;AACA;AAKA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAGA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAMA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AAQA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAEA;AACA;AACA;AAEA;AAKA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AAWA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAMA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AASA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAAA;AACA;AAAA;AAOA;AAKA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AASA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AAAA;AApiEa;AA0iEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;ADhuEA;AAAA;AACA;AACA;AACA;AACA;;;;;;;ADdA;AAMA;AAoBA;AAAA;AACA;AACA;AACA;AACA;AAvBA;AACA;AACA;AACA;AACA;AAMA;AAkBA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA/Ka;;;;;;;ADTb;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAUA;;AACA;AAKA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAGA;AACA;AAOA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAWA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAMA;AACA;AACA;AACA;AACA;AAAA;AA5Oa;AAoPb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ADtPA;AACA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AALA;AAWA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AATA;AAgBA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AAgCA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AA8BA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAVA;;;;;;;AD7GA;AAUA;AAWA;AAAA;AACA;AAXA;AAEA;AAIA;AACA;AACA;AAKA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAnLa;AAqLb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAba;;;;;;;ADhMb;AACA;AACA;AACA;AAEA;AAYA;AACA;AAGA;AACA;AAdgBA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AASA;AAAA;AACA;AACA;AAIA;AAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAIA;AACA;AAOA;AACA;AACA;AAKA;AACA;AAOA;AACA;AAEA;AACA;AACA;AAAA;AA5VsB;;;;;;;ADHtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIa;AACb;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAiBA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAtGa;;;;;;;;;;;;;;;;;AD/Eb;AAEA;AAcA;AAEA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AApMa;AAsMb;AAcA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAMA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;ADzVA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA3Ba;;;;;;;;;;;;;;;;;ADAb;AAEA;AAEA;AAAA;AAGA;AAAA;AAFA;AAIA;AACA;;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAlDa;;;;;;;;;;;;;;;;;ADJb;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAAA;AAYA;AAAA;AAAA;AANA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AAGA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAMA;AAKA;AAMA;AAIA;AAGA;AAIA;AAIA;AACA;AAOA;AACA;AAQA;AACA;AACA;AACA;AAAA;AAxOa;;;;;;;;;;;;;;;;;ADVb;AAEA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AA5Ea;;;;;;;;;;;;;;;;;ADJb;AACA;AAEA;AACA;AACA;AASA;AAAA;AAMA;AAAA;AAFA;AAIA;;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AAQA;AACA;AAMA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAKA;AAGA;AAGA;AACA;AACA;AAgBA;AAAA;AAvOa;;;;;;;ADPb;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ADXA;AACA;AAQA;AAQA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9CA;;;;;;;ADhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;;;;;;;AD1Ba;AACA;;;;;;;ADAb;AACA;AAiBA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AApFA;AAyFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;ADrHa;;;;;;;ADHb;AACA;AACA;AAEa;AACA;AAKA;AACA;AACA;AACA;AACA;AAOb;AACA;AACA;;;;;;;;;;;;;;;;;ADtBA;AAOA;AAAA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAzCa;;;;;;;;;;;;;;;;;ADRb;AAOA;AAAA;AAKA;AAAA;AACA;AAGA;AACA;AACA;;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAjBA;AAmBA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AATA;AAmBA;AACA;AACA;AAUA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AAWA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAAA;AA9La;;;;;;;ADJA;AAAb;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;;;;;;;ADfA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;;;;;;;ADJA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAYA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAtFa;;;;;;;ADFb;AAKA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAAA;AA5Ca;;;;;;;ADWb;AAAA;AAqCA;AA/BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AArCa;;;;;;;ADVb;AAEA;;;\"}"),
	}
	filez := &embedded.EmbeddedFile{
		Filename:    "zmodem.js",
		FileModTime: time.Unix(1532486303, 0),
		Content:     string("(function(e){function _(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,_),r.l=!0,r.exports}var n={};return _.m=e,_.c=n,_.d=function(e,n,t){_.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:t})},_.n=function(e){var n=e&&e.__esModule?function(){return e['default']}:function(){return e};return _.d(n,'a',n),n},_.o=function(e,_){return Object.prototype.hasOwnProperty.call(e,_)},_.p='',_(_.s=5)})([function(e){'use strict';var _=e.exports;const n=17,t=19,r=24;_.ZMLIB={ZDLE:24,XON:n,XOFF:t,ABORT_SEQUENCE:[r,r,r,r,r],strip_ignored_bytes:function(e){for(var _=e.length-1;0<=_;_--)switch(e[_]){case n:case 128|n:case t:case 128|t:e.splice(_,1);continue;}return e},find_subarray:function(e,_){var t,n=0,r=Date.now();HAYSTACK:for(;-1!=n;){if(n=e.indexOf(_[0],n),-1===n)break HAYSTACK;for(t=1;t<_.length;t++)if(e[n+t]!==_[t]){n++;continue HAYSTACK}return n}return-1}}},function(e){'use strict';function _(e){const _=t[e];switch(typeof _){case'string':return _;case'function':var n=[].slice.call(arguments).slice(1);return _.apply(this,n);}return null}var n=e.exports;const t={aborted:'Session aborted',peer_aborted:'Peer aborted session',already_aborted:'Session already aborted',crc:function(e,_){return this.got=e.slice(0),this.expected=_.slice(0),'CRC check failed! (got: '+e.join()+'; expected: '+_.join()+')'},validation:function(e){return e}};n.Error=class extends Error{constructor(e){super();var n=_.apply(this,arguments);n?(this.type=e,this.message=n):this.message=e}}},function(e){'use strict';var _=e.exports;const n=[48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102],t={};for(var r=0;r<n.length;r++)t[n[r]]=r;_.ENCODELIB={pack_u16_be:function(e){if(65535<e)throw'Number cannot exceed 16 bits: '+e;return[e>>8,255&e]},pack_u32_le:function(e){var _=e/65536;return[255&e,(65535&e)>>8,255&_,_>>8]},unpack_u16_be:function(e){return(e[0]<<8)+e[1]},unpack_u32_le:function(e){return e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]},octets_to_hex:function(e){for(var _=[],t=0;t<e.length;t++)_.push(n[e[t]>>4],n[15&e[t]]);return _},parse_hex_octets:function(e){for(var _=Array(e.length/2),n=0;n<_.length;n++)_[n]=(t[e[2*n]]<<4)+t[e[1+2*n]];return _}}},function(e,_,n){'use strict';var t=e.exports;Object.assign(t,n(0));var r,a;const s=t.ZMLIB.ZDLE;t.ZDLE=class e{constructor(e){this._config={},e&&this.set_escape_ctrl_chars(!!e.escape_ctrl_chars)}set_escape_ctrl_chars(e){if('boolean'!=typeof e)throw'need boolean!';e!==this._config.escape_ctrl_chars&&(this._config.escape_ctrl_chars=e,this._setup_zdle_table())}escapes_ctrl_chars(){return!!this._config.escape_ctrl_chars}encode(e){if(!this._zdle_table)throw'No ZDLE encode table configured!';var _=this._zdle_table,n=this._lastcode;for(r=0;r<e.length;r++){if(a=_[e[r]],!a)throw console.trace(),console.error('bad encode() call:',JSON.stringify(e)),this._lastcode=n,'Invalid octet: '+e[r];n=e[r],1===a||2!==a&&64!=(127&n)||(n^=64,e.splice(r,1,s,n))}return this._lastcode=n,e}static decode(e){for(var _=e.length-1;0<=_;_--)e[_]===s&&e.splice(_,2,e[_+1]-64);return e}static splice(_,n,t){var r=0;n||(n=0);for(var a=n;a<_.length&&r<t;a++)r++,_[a]===s&&a++;return r===t?_.length===a-1?void 0:(_.splice(0,n),e.decode(_.splice(0,a-n))):void 0}_setup_zdle_table(){for(var e=Array(256),_=0;_<e.length;_++)e[_]=96&_?1:_===s||_===t.ZMLIB.XOFF||_===t.ZMLIB.XON||_===(128|t.ZMLIB.XOFF)||_===(128|t.ZMLIB.XON)?2:16===_||144===_?this._config.turbo_escape?1:2:13===_||141===_?this._config.escape_ctrl_chars?2:this._config.turbo_escape?1:3:this._config.escape_ctrl_chars?2:1;this._zdle_table=e}}},function(e,_,n){'use strict';function t(){o=Array(256);for(var e,_=0;256>_;_++){e=_<<i-8&c;for(var n=0;8>n;n++)0==(e&p)?e<<=1:(e<<=1,e^=l);o[_]=e&c}}function r(e,_){return o||t(),o[255&_>>8]^(255&_)<<8^e}function a(e,_){if(e.join()!==_.join())throw new d.Error('crc',_,e)}const s=n(12);var d=e.exports;Object.assign(d,n(1),n(2));var o;const i=16,l=4129,c=65535,p=1<<i-1;d.CRC={crc16:function(e){for(var _=e[0],n=1;n<e.length;n++)_=r(e[n],_);return _=r(0,r(0,_)),d.ENCODELIB.pack_u16_be(_)},crc32:function(e){return d.ENCODELIB.pack_u32_le(s.buf(e)>>>0)},verify16:function(e,_){return a(this.crc16(e),_)},verify32:function(e,_){try{a(this.crc32(e),_)}catch(_){throw _.input=e.slice(0),_}}}},function(e,_,n){e.exports=n(6)},function(e,_,n){'use strict';function t(e){if(e.aborted())throw new r.Error('aborted')}var r=e.exports;window.Zmodem=r,Object.assign(r,n(7)),r.Browser={send_files:function(_,e,n){function r(){var a=s[i];return a?(i++,_.send_offer(a).then(function(s){return n.on_offer_response&&n.on_offer_response(a.obj,s),void 0===s?r():new Promise(function(e){var d=new FileReader;d.onerror=function(_){throw console.error('file read error',_),'File read error: '+_};var o;d.onprogress=function(r){r.target.result&&(o=new Uint8Array(r.target.result,s.get_offset()),t(_),s.send(o),n.on_progress&&n.on_progress(a.obj,s,o))},d.onload=function(d){o=new Uint8Array(d.target.result,s,o),t(_),s.end(o).then(function(){n.on_progress&&o.length&&n.on_progress(a.obj,s,o),n.on_file_complete&&n.on_file_complete(a.obj,s),e(r())})},d.readAsArrayBuffer(a.obj)})})):Promise.resolve()}n||(n={});for(var a,s=[],d=0,o=e.length-1;0<=o;o--)a=e[o],d+=a.size,s[o]={obj:a,name:a.name,size:a.size,mtime:new Date(a.lastModified),files_remaining:e.length-o,bytes_remaining:d};var i=0;return r()},save_to_disk:function(e,_){var n=new Blob(e),t=URL.createObjectURL(n),r=document.createElement('a');r.style.display='none',r.href=t,r.download=_,document.body.appendChild(r),r.click(),document.body.removeChild(r)}}},function(e,_,n){Object.assign(e.exports,n(8))},function(e,_,n){'use strict';var t=e.exports;Object.assign(t,n(0),n(9));const r=[42,42,24,66,48],a=['to_terminal','on_detect','on_retract','sender'];class s{constructor(e,_,n,t){this._confirmer=_,this._denier=n,this._is_valid=t,this._session_type=e}confirm(){return this._confirmer.apply(this,arguments)}deny(){return this._denier.apply(this,arguments)}is_valid(){return this._is_valid.apply(this,arguments)}get_session_role(){return this._session_type}}t.Sentry=class{constructor(e){if(!e)throw'Need options!';var _=this;a.forEach(function(n){if(!e[n])throw'Need \\u201C'+n+'\\u201D!';_['_'+n]=e[n]}),this._cache=[]}_after_session_end(){this._zsession=null}consume(e){if(e instanceof Array||(e=Array.prototype.slice.call(new Uint8Array(e))),this._zsession){var _=this._zsession;if(_.consume(e),_.has_ended())e='receive'===_.type?_.get_trailing_bytes():[];else return}var n=this._parse(e),t=e;if(n){let e=!!this._parsed_session;e&&(this._parsed_session.type===n.type&&(t=[]),this._on_retract()),this._parsed_session=n;var r=this;this._on_detect(new s(n.type,function(){if(!this.is_valid())throw'Stale ZMODEM session!';return n.on('garbage',r._to_terminal),n.on('session_end',r._after_session_end.bind(r)),n.set_sender(r._sender),delete r._parsed_session,r._zsession=n},this._send_abort.bind(this),function(){return r._parsed_session===n}))}else{var a=this._parsed_session;this._parsed_session=null,a&&(1===t.length&&67===t[0]&&this._send_abort(),this._on_retract())}this._to_terminal(t)}get_confirmed_session(){return this._zsession||null}_send_abort(){this._sender(t.ZMLIB.ABORT_SEQUENCE)}_parse(e){var _=this._cache;for(_.push.apply(_,e);;){let e=t.ZMLIB.find_subarray(_,r);if(-1===e)break;let n,a=_.splice(0,e);try{n=t.Session.parse(_)}catch(e){}if(!n)break;return 1===_.length&&_[0]===t.ZMLIB.XON&&_.shift(),_.length?null:n}return _.splice(21),null}}},function(e,_,n){'use strict';function t(e){return 0===r.ZMLIB.find_subarray(e,o)?e.splice(0,o.length):e[0]===o[o.length-1]&&e.splice(0,1),e}var r=e.exports;Object.assign(r,n(2),n(10),n(3),n(0),n(11),n(13),n(14),n(1));const a=['CANFDX','CANOVIO','CANFC32'],s='spool_uint8array',d=8,o=[79,79],i=r.ZMLIB.ABORT_SEQUENCE;class l{constructor(){this._on_evt={},this._evt_once_index={}}_Add_event(e){this._on_evt[e]=[],this._evt_once_index[e]=[]}_get_evt_queue(e){if(!this._on_evt[e])throw'Bad event: '+e;return this._on_evt[e]}on(e,_){var n=this._get_evt_queue(e);return n.push(_),this}off(e,_){var n=this._get_evt_queue(e);if(_){var t=n.indexOf(_);if(-1===t)throw'\\u201C'+_+'\\u201D is not in the \\u201C'+e+'\\u201D queue.';n.splice(t,1)}else n.pop();return this}_Happen(e){var _=this._get_evt_queue(e),n=Array.apply(null,arguments);n.shift();var t=this;return _.forEach(function(e){e.apply(t,n)}),_.length}}r.Session=class extends l{static parse(e){var _;try{_=r.Header.parse_hex(e)}catch(_){return}if(_)switch(_.NAME){case'ZRQINIT':return new r.Session.Receive;case'ZRINIT':return new r.Session.Send(_);}}set_sender(e){return this._sender=e,this}has_ended(){return this._has_ended()}consume(e){if(this._before_consume(e),this._aborted)throw new r.Error('already_aborted');return e.length?(this._strip_and_enqueue_input(e),void(this._check_for_abort_sequence(e)||this._consume_first())):void 0}aborted(){return!!this._aborted}constructor(){super(),this._config={},this._input_buffer=[],this._Add_event('receive'),this._Add_event('garbage'),this._Add_event('session_end')}get_role(){return this.type}_trim_leading_garbage_until_header(){var e=r.Header.trim_leading_garbage(this._input_buffer);e.length&&0===this._Happen('garbage',e)&&console.debug('Garbage: ',String.fromCharCode.apply(String,e),e)}_parse_and_consume_header(){this._trim_leading_garbage_until_header();var e=r.Header.parse(this._input_buffer);if(e)return this._consume_header(e[0]),this._last_header_name=e[0].NAME,this._last_header_crc=e[1],e[0]}_consume_header(e){this._on_receive(e);var _=this._next_header_handler[e.NAME];if(!_)throw console.error('Unhandled header!',e,this._next_header_handler),new r.Error('Unhandled header: '+e.NAME);this._next_header_handler=null,_.call(this,e)}_check_for_abort_sequence(){var e=r.ZMLIB.find_subarray(this._input_buffer,i);if(-1!==e)throw this._input_buffer.splice(0,e+i.length),this._aborted=!0,this._on_session_end(),new r.Error('peer_aborted')}_send_header(){if(!this._sender)throw'Need sender!';var e=Array.apply(null,arguments),_=this._create_header_bytes(e);this._sender(_[0]),this._last_sent_header=_[1]}_create_header_bytes(e){var _=r.Header.build.apply(r.Header,e),n=this._get_header_formatter(e[0]);return[_[n](this._zencoder),_]}_strip_and_enqueue_input(e){r.ZMLIB.strip_ignored_bytes(e),this._input_buffer.push.apply(this._input_buffer,e)}abort(){return this._sender(i.concat([d,d,d,d,d])),this._aborted=!0,this._sender=function(){throw new r.Error('already_aborted')},void this._on_session_end()}_on_session_end(){this._Happen('session_end')}_on_receive(e){this._Happen('receive',e)}_before_consume(){}},r.Session.Receive=class extends r.Session{constructor(){super(),this._Add_event('offer'),this._Add_event('data_in'),this._Add_event('file_end')}_before_consume(e){if(this._bytes_after_OO)throw'PROTOCOL: Session is completed!';this._bytes_being_consumed=e}get_trailing_bytes(){if(this._aborted)return[];if(!this._bytes_after_OO)throw'PROTOCOL: Session is not completed!';return this._bytes_after_OO.slice(0)}_has_ended(){return this.aborted()||!!this._bytes_after_OO}_get_header_formatter(){return'to_hex'}_parse_and_consume_subpacket(){var e=16===this._last_header_crc?'parse16':'parse32';var _=r.Subpacket[e](this._input_buffer);return _&&(this._consume_data(_),_.frame_end()&&(this._next_subpacket_handler=null)),_}_consume_first(){if(this._got_ZFIN){if(2>this._input_buffer.length)return;if(0===r.ZMLIB.find_subarray(this._input_buffer,o))return this._bytes_after_OO=t(this._bytes_being_consumed.slice(0)),void this._on_session_end();throw'PROTOCOL: Only thing after ZFIN should be \\u201COO\\u201D (79,79), not: '+array_buf.join()}var e;do e=this._next_subpacket_handler?this._parse_and_consume_subpacket():this._parse_and_consume_header();while(e&&this._input_buffer.length)}_consume_data(e){if(this._on_receive(e),!this._next_subpacket_handler)throw'PROTOCOL: Received unexpected data packet after '+this._last_header_name+' header: '+e.get_payload().join();this._next_subpacket_handler.call(this,e)}_octets_to_string(e){return this._textdecoder||(this._textdecoder=new r.Text.Decoder),this._textdecoder.decode(new Uint8Array(e))}_consume_ZFILE_data(e,_){if(this._file_info)throw'PROTOCOL: second ZFILE data subpacket received';var n=_.get_payload(),t=n.indexOf(0),r=this._octets_to_string(n.slice(0,t)),a=this._octets_to_string(n.slice(1+t)).split(' '),s=a[1]&&parseInt(a[1],8)||void 0;s&&(s=new Date(1e3*s)),this._file_info={name:r,size:a[0]?parseInt(a[0],10):null,mtime:s||null,mode:a[2]&&parseInt(a[2],8)||null,serial:a[3]&&parseInt(a[3],10)||null,files_remaining:a[4]?parseInt(a[4],10):null,bytes_remaining:a[5]?parseInt(a[5],10):null};var d=new f(e.get_options(),this._file_info,this._accept.bind(this),this._skip.bind(this));this._current_transfer=d}_consume_ZDATA_data(e){if(!this._accepted_offer)throw'PROTOCOL: Received data without accepting!';return this._offset_ok?void(this._file_offset+=e.get_payload().length,this._on_data_in(e),e.ack_expected()&&!e.frame_end()&&this._send_header('ZACK',r.ENCODELIB.pack_u32_le(this._file_offset))):(console.warn('offset not ok!'),void _send_ZRPOS())}_make_promise_for_between_files(){var e=this;return new Promise(function(_){var n={ZFILE:function(e){this._next_subpacket_handler=function(n){this._next_subpacket_handler=null,this._consume_ZFILE_data(e,n),this._Happen('offer',this._current_transfer),_(this._current_transfer)}},ZSINIT:function(){e._next_subpacket_handler=function(_){e._next_subpacket_handler=null,e._consume_ZSINIT_data(_),e._send_header('ZACK'),e._next_header_handler=n}},ZFIN:function(){this._consume_ZFIN(),_()}};e._next_header_handler=n})}_consume_ZSINIT_data(e){this._attn=e.get_payload()}start(){if(this._started)throw'Already started!';this._started=!0;var e=this._make_promise_for_between_files();return this._send_ZRINIT(),e}_accept(e){this._accepted_offer=!0,this._file_offset=e||0;var _=this,n=new Promise(function(e){_._next_header_handler={ZDATA:function(_){this._consume_ZDATA(_),this._next_subpacket_handler=this._consume_ZDATA_data,this._next_header_handler={ZEOF:function(_){this._next_subpacket_handler=null,this._consume_ZEOF(_);var n=this._make_promise_for_between_files();e(n)}}}}});return this._send_ZRPOS(),n}_skip(){var e=this._make_promise_for_between_files();if(this._accepted_offer){var _=function(){this._accepted_offer=!1,this._next_subpacket_handler=null,this._make_promise_for_between_files()}.bind(this);Object.assign(this._next_header_handler,{ZEOF:_,ZDATA:function(){_(),this._next_header_handler.ZEOF=_}.bind(this)})}return this._file_info=null,this._send_header('ZSKIP'),e}_send_ZRINIT(){this._send_header('ZRINIT',a)}_consume_ZFIN(){this._got_ZFIN=!0,this._send_header('ZFIN')}_consume_ZEOF(e){if(this._file_offset!==e.get_offset())throw'ZEOF offset mismatch; unimplemented (local: '+this._file_offset+'; ZEOF: '+e.get_offset()+')';this._send_ZRINIT(),this._on_file_end(),this._file_info=null,this._current_transfer=null}_consume_ZDATA(e){if(this._file_offset===e.get_offset())this._offset_ok=!0;else throw'Error correction is unimplemented.'}_send_ZRPOS(){this._send_header('ZRPOS',this._file_offset)}_on_file_end(){this._Happen('file_end'),this._current_transfer&&(this._current_transfer._Happen('complete'),this._current_transfer=null)}_on_data_in(e){this._Happen('data_in',e),this._current_transfer&&this._current_transfer._Happen('input',e.get_payload())}},Object.assign(r.Session.Receive.prototype,{type:'receive'});var c={get_details:function(){return Object.assign({},this._file_info)},get_options:function(){return Object.assign({},this._zfile_opts)},get_offset:function(){return this._file_offset}};class p{constructor(e,_,n,t){this._file_info=e,this._file_offset=_||0,this._send=n,this._end=t}send(e){this._send(e),this._file_offset+=e.length}end(e){var _=this._end(e||[]);return e&&(this._file_offset+=e.length),_}}Object.assign(p.prototype,c);class f extends l{constructor(e,_,n,t){super(),this._zfile_opts=e,this._file_info=_,this._accept_func=n,this._skip_func=t,this._Add_event('input'),this._Add_event('complete'),this.on('input',this._input_handler)}_verify_not_skipped(){if(this._skipped)throw new r.Error('Already skipped!')}skip(){return this._verify_not_skipped(),this._skipped=!0,this._skip_func.apply(this,arguments)}accept(e){if(this._verify_not_skipped(),this._accepted)throw new r.Error('Already accepted!');switch(this._accepted=!0,e||(e={}),this._file_offset=e.offset||0,e.on_input){case null:case void 0:case'spool_array':case s:this._spool=[];break;default:if('function'!=typeof e.on_input)throw'Invalid \\u201Con_input\\u201D: '+e.on_input;}return this._input_handler_mode=e.on_input||s,this._accept_func(this._file_offset).then(this._get_spool.bind(this))}_input_handler(e){if(this._file_offset+=e.length,'function'==typeof this._input_handler_mode)this._input_handler_mode(e);else{if(this._input_handler_mode===s)e=new Uint8Array(e);else if('spool_array'!==this._input_handler_mode)throw new r.Error('WTF?? _input_handler_mode = '+this._input_handler_mode);this._spool.push(e)}}_get_spool(){return this._spool}}Object.assign(f.prototype,c);const u={ZFILE:!0,ZDATA:!0};r.Session.Send=class extends r.Session{constructor(e){if(super(),!e)throw'Need first header!';else if('ZRINIT'!==e.NAME)throw'First header should be ZRINIT, not '+e.NAME;this._last_header_name='ZRINIT',this._subpacket_encode_func='encode16',this._zencoder=new r.ZDLE,this._consume_ZRINIT(e),this._file_offset=0;this._start_keepalive_on_set_sender=!0}set_sender(e){return super.set_sender(e),this._start_keepalive_on_set_sender&&(this._start_keepalive_on_set_sender=!1,this._start_keepalive()),this}_get_header_formatter(e){return u[e]?'to_binary16':'to_hex'}_start_keepalive(){if(!this._keepalive_promise){var e=this;this._keepalive_promise=new Promise(function(_){e._keepalive_timeout=setTimeout(_,5e3)}).then(function(){e._next_header_handler={ZACK:function(){e._got_ZSINIT_ZACK=!0}},e._send_ZSINIT(),e._keepalive_promise=null,e._start_keepalive()})}}_stop_keepalive(){this._keepalive_promise&&(clearTimeout(this._keepalive_timeout),this._keep_alive_promise=null)}_send_ZSINIT(){var e=[];this._zencoder.escapes_ctrl_chars()&&e.push('ESCCTL'),this._send_header_and_data(['ZSINIT',e],[0],'end_ack')}_consume_ZRINIT(e){if(this._last_ZRINIT=e,e.get_buffer_size())throw'Buffer size ('+e.get_buffer_size()+') is unsupported!';if(!e.can_full_duplex())throw'Half-duplex I/O is unsupported!';if(!e.can_overlap_io())throw'Non-overlap I/O is unsupported!';if(e.escape_8th_bit())throw'8-bit escaping is unsupported!';this._zencoder.set_escape_ctrl_chars(!0),!e.escape_ctrl_chars()&&console.debug('Peer didn\\u2019t request escape of all control characters. Will send ZSINIT to force recognition of escaped control characters.')}_ensure_receiver_escapes_ctrl_chars(){var e,_=!this._last_ZRINIT.escape_ctrl_chars()&&!this._got_ZSINIT_ZACK;if(_){var n=this;e=new Promise(function(e){n._next_header_handler={ZACK:()=>{e()}},n._send_ZSINIT()})}else e=Promise.resolve();return e}_convert_params_to_offer_payload_array(e){e=r.Validation.offer_parameters(e);var _=e.name+'\\0',n=[(e.size||0).toString(10),e.mtime?e.mtime.toString(8):'0',e.mode?(32768|e.mode).toString(8):'0','0'];return e.files_remaining&&(n.push(e.files_remaining),e.bytes_remaining&&n.push(e.bytes_remaining)),_+=n.join(' '),this._string_to_octets(_)}send_offer(e){if(!e)throw'need file params!';if(this._sending_file)throw'Already sending file!';var _=this._convert_params_to_offer_payload_array(e);this._stop_keepalive();var n=this,t=function(){var t=new Promise(function(_){n._next_header_handler={ZSKIP:function(){n._start_keepalive(),_()},ZRPOS:function(t){n._sending_file=!0,_(new p(e,t.get_offset(),n._send_interim_file_piece.bind(n),n._end_file.bind(n)))}}});return n._send_header_and_data(['ZFILE'],_,'end_ack'),delete n._sent_ZDATA,t};return this._ensure_receiver_escapes_ctrl_chars().then(t)}_send_header_and_data(e,_,n){var t=this._create_header_bytes(e),r=this._build_subpacket_bytes(_,n);t[0].push.apply(t[0],r),this._sender(t[0]),this._last_sent_header=t[1]}_build_subpacket_bytes(e,_){var n=r.Subpacket.build(e,_);return n[this._subpacket_encode_func](this._zencoder)}_build_and_send_subpacket(e,_){this._sender(this._build_subpacket_bytes(e,_))}_string_to_octets(e){this._textencoder||(this._textencoder=new r.Text.Encoder);var _=this._textencoder.encode(e);return Array.prototype.slice.call(_)}_send_interim_file_piece(e){return this._send_file_part(e,'no_end_no_ack'),Promise.resolve()}_ensure_we_are_sending(){if(!this._sending_file)throw'Not sending a file currently!'}_end_file(e){this._ensure_we_are_sending(),this._send_file_part(e,'end_no_ack');var _=this,n=new Promise(function(e){_._sending_file=!1,_._prepare_to_receive_ZRINIT(e)});return this._send_header('ZEOF',this._file_offset),this._file_offset=0,n}_prepare_to_receive_ZRINIT(e){this._next_header_handler={ZRINIT:function(_){this._consume_ZRINIT(_),e&&e()}}}close(){var e='ZRINIT'===this._last_header_name;if(e||(e='ZSKIP'===this._last_header_name),e||(e='ZSINIT'===this._last_sent_header.name&&'ZACK'===this._last_header_name),!e)throw'Can\\u2019t close; last received header was \\u201C'+this._last_header_name+'\\u201D';var _=this,n=new Promise(function(e){_._next_header_handler={ZFIN:function(){_._sender(o),_._sent_OO=!0,_._on_session_end(),e()}}});return this._send_header('ZFIN'),n}_has_ended(){return this.aborted()||!!this._sent_OO}_send_file_part(e,_){this._sent_ZDATA||(this._send_header('ZDATA',this._file_offset),this._sent_ZDATA=!0);for(var n=0,t=e.length;;){var r=Math.min(n+8192,t)-n,a=r+n>=t,s=e.slice(n,n+r);if(s instanceof Array||(s=Array.prototype.slice.call(s)),this._build_and_send_subpacket(s,a?_:'no_end_no_ack'),this._file_offset+=r,n+=r,n>=t)break}}_consume_first(){if(!this._parse_and_consume_header()&&'67'===this._input_buffer.join())throw'Receiver has fallen back to YMODEM.'}_on_session_end(){this._stop_keepalive(),super._on_session_end()}},Object.assign(r.Session.Send.prototype,{type:'send'})},function(e){var _=e.exports;_.Text={Encoder:'undefined'==typeof TextEncoder?class{encode(e){e=unescape(encodeURIComponent(e));for(var _=Array(e.length),n=0;n<e.length;n++)_[n]=e.charCodeAt(n);return new Uint8Array(_)}}:TextEncoder,Decoder:'undefined'==typeof TextDecoder?class{decode(e){return decodeURIComponent(escape(String.fromCharCode.apply(String,e)))}}:TextDecoder}},function(e,_,n){'use strict';function t(e){if(!I[e])throw new c.Error('Invalid ZRINIT flag: '+e);return I[e]}function r(e){if(!k[e])throw'Invalid ZSINIT flag: '+e;return k[e]}function a(e){var _=j[e];if('string'==typeof _)throw'Received unsupported header: '+_;return s(_)}function s(e){return e.prototype instanceof S?new e(0):new e([])}function d(e){var _=c.ZDLE.splice(e,g.length,7);return _&&o(_)}function o(e){c.CRC.verify16(e.slice(0,5),e.slice(5));var _=e[0],n=a(_);return n._bytes4=e.slice(1,5),n}function i(e){var _=c.ZDLE.splice(e,y.length,9);if(_){c.CRC.verify32(_.slice(0,5),_.slice(5));var n=_[0],t=a(n);return t._bytes4=_.slice(1,5),t}}function l(e){var _=e.indexOf(138);-1===_&&(_=e.indexOf(10));var n,t;if(-1===_)return void(11<e.length&&(n='Invalid hex header - no LF detected within 12 bytes!'));if(t=e.splice(0,_),e.shift(),19===t.length){var r=t.pop();13!==r&&141!==r&&(n='Invalid hex header: (CR/)LF doesn\\u2019t have CR!')}else 18!==t.length&&(n='Invalid hex header: invalid number of bytes before LF!');if(n)throw n+=' ('+t.length+' bytes: '+t.join()+')',n;t.splice(0,4);var a=c.ENCODELIB.parse_hex_octets(t);return o(a)}var c=e.exports;Object.assign(c,n(2),n(3),n(0),n(4),n(1));const p=42,f=65,u=67,h=[13,10],m=h.slice(0).concat([c.ZMLIB.XON]),b=[p,p,c.ZMLIB.ZDLE,66],g=[p,c.ZMLIB.ZDLE,f],y=[p,c.ZMLIB.ZDLE,u];c.Header=class{static trim_leading_garbage(e){var _,n,t=[];TRIM_LOOP:for(;e.length&&!n;){var r=e.indexOf(p);if(-1===r){_=!0;break TRIM_LOOP}else{if(t.push.apply(t,e.splice(0,r)),2>e.length)break TRIM_LOOP;else if(e[1]===p){if(!(e.length<b.length))e[2]===b[2]&&e[3]===b[3]&&(n=l);else if(e.join()===b.slice(0,e.length).join())break TRIM_LOOP;}else if(e[1]===c.ZMLIB.ZDLE){if(e.length<g.length)break TRIM_LOOP;e[2]===g[2]?n=d:e[2]===y[2]&&(n=i)}n||t.push(e.shift())}}return _&&t.push.apply(t,e.splice(0)),t}static parse(e){var _;if(e[1]===p)return _=l(e),_&&[_,16];if(e[2]===f)return _=d(e,3),_&&[_,16];if(e[2]===u)return _=i(e),_&&[_,32];if(!(3>e.length))throw'Unrecognized/unsupported octets: '+e.join()}static build(e){var _=1===arguments.length?[arguments[0]]:Array.apply(null,arguments),n=H[e];if(!n)throw'No frame class \\u201C'+e+'\\u201D is defined!';_.shift();var t=new(n.bind.apply(n,[null].concat(_)));return t}to_hex(){var e=this._crc_bytes();return b.concat(c.ENCODELIB.octets_to_hex(e.concat(c.CRC.crc16(e))),this._hex_header_ending)}to_binary16(e){return this._to_binary(e,g,c.CRC.crc16)}to_binary32(e){return this._to_binary(e,y,c.CRC.crc32)}constructor(){this._bytes4||(this._bytes4=[0,0,0,0])}_to_binary(e,_,n){var t=this._crc_bytes(),r=_.concat(e.encode(t.concat(n(t))));return r}_crc_bytes(){return[this.TYPENUM].concat(this._bytes4)}},c.Header.prototype._hex_header_ending=m;class Z extends c.Header{}const I={CANFDX:1,CANOVIO:2,CANBRK:4,CANCRY:8,CANLZW:16,CANFC32:32,ESCCTL:64,ESC8:128};class E extends c.Header{constructor(e,_){super();var n=0;_||(_=0),e.forEach(function(e){n|=t(e)}),this._bytes4=[255&_,_>>8,0,n]}get_buffer_size(){return c.ENCODELIB.unpack_u16_be(this._bytes4.slice(0,2))||void 0}can_full_duplex(){return!!(this._bytes4[3]&I.CANFDX)}can_overlap_io(){return!!(this._bytes4[3]&I.CANOVIO)}can_break(){return!!(this._bytes4[3]&I.CANBRK)}can_fcs_32(){return!!(this._bytes4[3]&I.CANFC32)}escape_ctrl_chars(){return!!(this._bytes4[3]&I.ESCCTL)}escape_8th_bit(){return!!(this._bytes4[3]&I.ESC8)}}const k={ESCCTL:64,ESC8:128};class v extends c.Header{constructor(e,_){super();var n=0;if(e.forEach(function(e){n|=r(e)}),this._bytes4=[0,0,0,n],_){if(31<_.length)throw'Attn sequence must be <= 31 bytes';if(_.some(function(e){return 255<e}))throw'Attn sequence ('+_+') must be <256';this._data=_.concat([0])}}escape_ctrl_chars(){return!!(this._bytes4[3]&k.ESCCTL)}escape_8th_bit(){return!!(this._bytes4[3]&k.ESC8)}}class C extends c.Header{constructor(e){super(),e&&(this._bytes4=e.slice())}}C.prototype._hex_header_ending=h;const N={extended:{sparse:64},transport:[void 0,'compress','encrypt','rle'],management:[void 0,'newer_or_longer','crc','append','clobber','newer','mtime_or_length','protect','rename'],conversion:[void 0,'binary','text','resume']},x=['extended','transport','management','conversion'];class O extends c.Header{get_options(){var e={sparse:!!(this._bytes4[0]&64)},_=this._bytes4.slice(0);return x.forEach(function(n,t){if(N[n]instanceof Array)'management'===n&&(e.skip_if_absent=!!(_[t]&128),_[t]&=31),e[n]=N[n][_[t]];else for(var r in N[n])e[r]=!!(_[t]&N[n][r]),e[r]&&(_[t]^=N[n][r]);!e[n]&&_[t]&&(e[n]='unknown:'+_[t])}),e}}class A extends c.Header{}class L extends c.Header{}class T extends c.Header{}class R extends c.Header{}T.prototype._hex_header_ending=h;class S extends c.Header{constructor(e){super(),this._bytes4=c.ENCODELIB.pack_u32_le(e)}get_offset(){return c.ENCODELIB.unpack_u32_le(this._bytes4)}}class D extends S{}class M extends S{}class F extends S{}const B=[[Z,'ZRQINIT'],[E,'ZRINIT'],[v,'ZSINIT'],[C,'ZACK'],[O,'ZFILE'],[A,'ZSKIP'],void 0,[L,'ZABORT'],[T,'ZFIN'],[D,'ZRPOS'],[M,'ZDATA'],[F,'ZEOF'],[R,'ZFERR'],void 0,void 0,void 0,void 0,void 0,void 0,void 0];for(var H={},z=0;z<B.length;z++)B[z]&&(H[B[z][1]]=B[z][0],Object.assign(B[z][0].prototype,{TYPENUM:z,NAME:B[z][1]}));const j=[Z,E,v,C,O,A,'ZNAK',L,T,D,M,F,R,'ZCRC','ZCHALLENGE','ZCOMPL','ZCAN','ZFREECNT','ZCOMMAND','ZSTDERR'];c.Header.parse_hex=l},function(e,_){var n;(function(e){'undefined'==typeof DO_NOT_EXPORT_CRC?e(_):e(n={})})(function(e){function _(e,_){for(var t=-1^_,r=e.length-7,a=0;a<r;)t=t>>>8^n[255&(t^e[a++])],t=t>>>8^n[255&(t^e[a++])],t=t>>>8^n[255&(t^e[a++])],t=t>>>8^n[255&(t^e[a++])],t=t>>>8^n[255&(t^e[a++])],t=t>>>8^n[255&(t^e[a++])],t=t>>>8^n[255&(t^e[a++])],t=t>>>8^n[255&(t^e[a++])];for(;a<r+7;)t=t>>>8^n[255&(t^e[a++])];return-1^t}e.version='1.1.1';var n=function(){for(var e=0,_=Array(256),t=0;256!=t;++t)e=t,e=1&e?-306674912^e>>>1:e>>>1,e=1&e?-306674912^e>>>1:e>>>1,e=1&e?-306674912^e>>>1:e>>>1,e=1&e?-306674912^e>>>1:e>>>1,e=1&e?-306674912^e>>>1:e>>>1,e=1&e?-306674912^e>>>1:e>>>1,e=1&e?-306674912^e>>>1:e>>>1,e=1&e?-306674912^e>>>1:e>>>1,_[t]=e;return'undefined'==typeof Int32Array?_:new Int32Array(_)}();e.table=n,e.bstr=function(e,_){for(var t=-1^_,r=e.length-1,a=0;a<r;)t=t>>>8^n[255&(t^e.charCodeAt(a++))],t=t>>>8^n[255&(t^e.charCodeAt(a++))];return a==r&&(t=t>>>8^n[255&(t^e.charCodeAt(a))]),-1^t},e.buf=function(e,t){if(1e4<e.length)return _(e,t);for(var r=-1^t,a=e.length-3,s=0;s<a;)r=r>>>8^n[255&(r^e[s++])],r=r>>>8^n[255&(r^e[s++])],r=r>>>8^n[255&(r^e[s++])],r=r>>>8^n[255&(r^e[s++])];for(;s<a+3;)r=r>>>8^n[255&(r^e[s++])];return-1^r},e.str=function(e,_){for(var t,r,a=-1^_,s=0,d=e.length;s<d;)t=e.charCodeAt(s++),128>t?a=a>>>8^n[255&(a^t)]:2048>t?(a=a>>>8^n[255&(a^(192|31&t>>6))],a=a>>>8^n[255&(a^(128|63&t))]):55296<=t&&57344>t?(t=(1023&t)+64,r=1023&e.charCodeAt(s++),a=a>>>8^n[255&(a^(240|7&t>>8))],a=a>>>8^n[255&(a^(128|63&t>>2))],a=a>>>8^n[255&(a^(128|15&r>>6|(3&t)<<4))],a=a>>>8^n[255&(a^(128|63&r))]):(a=a>>>8^n[255&(a^(224|15&t>>12))],a=a>>>8^n[255&(a^(128|63&t>>6))],a=a>>>8^n[255&(a^(128|63&t))]);return-1^a}})},function(e,_,n){'use strict';var t=e.exports;Object.assign(t,n(4),n(3),n(0),n(1));var r;t.Subpacket=class e{static build(e,_){var n=r[_];if(!n)throw'No subpacket type \\u201C'+_+'\\u201D is defined! Try one of: '+Object.keys(r).join(', ');return new n(e)}encode16(e){return this._encode(e,t.CRC.crc16)}encode32(e){return this._encode(e,t.CRC.crc32)}get_payload(){return this._payload}static parse16(_){return e._parse(_,2)}static parse32(_){return e._parse(_,4)}constructor(e){this._payload=e}_encode(e,_){return e.encode(this._payload.slice(0)).concat([t.ZMLIB.ZDLE,this._frameend_num],e.encode(_(this._payload.concat(this._frameend_num))))}static _parse(e,_){for(var n,r,a={104:d,105:i,106:l,107:o},s=0;s<e.length;){if(s=e.indexOf(t.ZMLIB.ZDLE,s),-1===s)return;var c=e[s+1];if(r=a[c],r){n=s+1;break}s++}if(r){var p=e[n];if(e[n-1]!==t.ZMLIB.ZDLE)throw'Byte before frame end should be ZDLE, not '+e[n-1];var f=e.splice(0,n-1),u=t.ZDLE.splice(e,2,_);if(!u)return void e.unshift.apply(e,f);var h=t.ZDLE.decode(f);return t.CRC[2===_?'verify16':'verify32'](h.concat([p]),u),new r(h,u)}}};class a extends t.Subpacket{frame_end(){return!0}}class s extends t.Subpacket{frame_end(){return!1}}class d extends a{ack_expected(){return!1}}d.prototype._frameend_num=104;class o extends a{ack_expected(){return!0}}o.prototype._frameend_num=107;class i extends s{ack_expected(){return!1}}i.prototype._frameend_num=105;class l extends s{ack_expected(){return!0}}l.prototype._frameend_num=106,r={end_no_ack:d,end_ack:o,no_end_no_ack:i,no_end_ack:l}},function(e,_,n){'use strict';function t(e,_){if(0>_)throw new a.Error('validation','\\u201C'+e+'\\u201D ('+_+') must be nonnegative.');if(_!==r(_))throw new a.Error('validation','\\u201C'+e+'\\u201D ('+_+') must be an integer.')}var r=Math.floor,a=e.exports;Object.assign(a,n(1));const s=/\\*\\x18[AC]|\\*\\*\\x18B/;a.Validation={offer_parameters:function(e){if(!e.name)throw new a.Error('validation','Need \\u201Cname\\u201D!');if('string'!=typeof e.name)throw new a.Error('validation','\\u201Cname\\u201D ('+e.name+') must be a string!');if(e=Object.assign({},e),s.test(e.name)&&console.warn('The filename '+JSON.stringify(name)+' contains characters that look like a ZMODEM header. This could corrupt the ZMODEM session; consider renaming it so that the filename doesn\\u2019t contain control characters.'),null!==e.serial&&void 0!==e.serial)throw new a.Error('validation','\\u201Cserial\\u201D is meaningless.');if(e.serial=null,['size','mode','files_remaining','bytes_remaining'].forEach(function(_){var n;switch(typeof e[_]){case'object':n=null===e[_];break;case'undefined':e[_]=null,n=!0;break;case'number':t(_,e[_]),n=!0;}if(!n)throw new a.Error('validation','\\u201C'+_+'\\u201D ('+e[_]+') must be null, undefined, or a number.')}),'number'==typeof e.mode&&(e.mode|=32768),0===e.files_remaining)throw new a.Error('validation','\\u201Cfiles_remaining\\u201D, if given, must be positive.');var _;switch(typeof e.mtime){case'object':if(_=!0,e.mtime instanceof Date){var n=e.mtime;if(e.mtime=r(n.getTime()/1e3),0>e.mtime)throw new a.Error('validation','\\u201Cmtime\\u201D ('+n+') must not be earlier than 1970.')}else null!==e.mtime&&(_=!1);break;case'undefined':e.mtime=null,_=!0;break;case'number':t('mtime',e.mtime),_=!0;}if(!_)throw new a.Error('validation','\\u201Cmtime\\u201D ('+e.mtime+') must be null, undefined, a Date, or a number.');return e}}}]);"),
	}

	// define dirs
	dir1 := &embedded.EmbeddedDir{
		Filename:   "",
		DirModTime: time.Unix(1532486863, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			files, // "base64.js"
			filet, // "favicon.ico"
			fileu, // "main.js"
			filev, // "terminal.html"
			filew, // "xterm.css"
			filex, // "xterm.js"
			filey, // "xterm.js.map"
			filez, // "zmodem.js"

		},
	}
	dir2 := &embedded.EmbeddedDir{
		Filename:   "addons",
		DirModTime: time.Unix(1532482412, 0),
		ChildFiles: []*embedded.EmbeddedFile{},
	}
	dir3 := &embedded.EmbeddedDir{
		Filename:   "addons/attach",
		DirModTime: time.Unix(1532482412, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file4, // "addons/attach/attach.js"
			file5, // "addons/attach/attach.js.map"

		},
	}
	dir6 := &embedded.EmbeddedDir{
		Filename:   "addons/fit",
		DirModTime: time.Unix(1532482412, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file7, // "addons/fit/fit.js"
			file8, // "addons/fit/fit.js.map"

		},
	}
	dir9 := &embedded.EmbeddedDir{
		Filename:   "addons/fullscreen",
		DirModTime: time.Unix(1532482412, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			filea, // "addons/fullscreen/fullscreen.css"
			fileb, // "addons/fullscreen/fullscreen.js"
			filec, // "addons/fullscreen/fullscreen.js.map"

		},
	}
	dird := &embedded.EmbeddedDir{
		Filename:   "addons/search",
		DirModTime: time.Unix(1532482412, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			filee, // "addons/search/search.js"
			filef, // "addons/search/search.js.map"

		},
	}
	dirg := &embedded.EmbeddedDir{
		Filename:   "addons/terminado",
		DirModTime: time.Unix(1532482412, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			fileh, // "addons/terminado/terminado.js"
			filei, // "addons/terminado/terminado.js.map"

		},
	}
	dirj := &embedded.EmbeddedDir{
		Filename:   "addons/webLinks",
		DirModTime: time.Unix(1532482412, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			filek, // "addons/webLinks/webLinks.js"
			filel, // "addons/webLinks/webLinks.js.map"

		},
	}
	dirm := &embedded.EmbeddedDir{
		Filename:   "addons/winptyCompat",
		DirModTime: time.Unix(1532482412, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			filen, // "addons/winptyCompat/winptyCompat.js"
			fileo, // "addons/winptyCompat/winptyCompat.js.map"

		},
	}
	dirp := &embedded.EmbeddedDir{
		Filename:   "addons/zmodem",
		DirModTime: time.Unix(1532482412, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			fileq, // "addons/zmodem/zmodem.js"
			filer, // "addons/zmodem/zmodem.js.map"

		},
	}

	// link ChildDirs
	dir1.ChildDirs = []*embedded.EmbeddedDir{
		dir2, // "addons"

	}
	dir2.ChildDirs = []*embedded.EmbeddedDir{
		dir3, // "addons/attach"
		dir6, // "addons/fit"
		dir9, // "addons/fullscreen"
		dird, // "addons/search"
		dirg, // "addons/terminado"
		dirj, // "addons/webLinks"
		dirm, // "addons/winptyCompat"
		dirp, // "addons/zmodem"

	}
	dir3.ChildDirs = []*embedded.EmbeddedDir{}
	dir6.ChildDirs = []*embedded.EmbeddedDir{}
	dir9.ChildDirs = []*embedded.EmbeddedDir{}
	dird.ChildDirs = []*embedded.EmbeddedDir{}
	dirg.ChildDirs = []*embedded.EmbeddedDir{}
	dirj.ChildDirs = []*embedded.EmbeddedDir{}
	dirm.ChildDirs = []*embedded.EmbeddedDir{}
	dirp.ChildDirs = []*embedded.EmbeddedDir{}

	// register embeddedBox
	embedded.RegisterEmbeddedBox(`static`, &embedded.EmbeddedBox{
		Name: `static`,
		Time: time.Unix(1532486863, 0),
		Dirs: map[string]*embedded.EmbeddedDir{
			"":                    dir1,
			"addons":              dir2,
			"addons/attach":       dir3,
			"addons/fit":          dir6,
			"addons/fullscreen":   dir9,
			"addons/search":       dird,
			"addons/terminado":    dirg,
			"addons/webLinks":     dirj,
			"addons/winptyCompat": dirm,
			"addons/zmodem":       dirp,
		},
		Files: map[string]*embedded.EmbeddedFile{
			"addons/attach/attach.js":                 file4,
			"addons/attach/attach.js.map":             file5,
			"addons/fit/fit.js":                       file7,
			"addons/fit/fit.js.map":                   file8,
			"addons/fullscreen/fullscreen.css":        filea,
			"addons/fullscreen/fullscreen.js":         fileb,
			"addons/fullscreen/fullscreen.js.map":     filec,
			"addons/search/search.js":                 filee,
			"addons/search/search.js.map":             filef,
			"addons/terminado/terminado.js":           fileh,
			"addons/terminado/terminado.js.map":       filei,
			"addons/webLinks/webLinks.js":             filek,
			"addons/webLinks/webLinks.js.map":         filel,
			"addons/winptyCompat/winptyCompat.js":     filen,
			"addons/winptyCompat/winptyCompat.js.map": fileo,
			"addons/zmodem/zmodem.js":                 fileq,
			"addons/zmodem/zmodem.js.map":             filer,
			"base64.js":                               files,
			"favicon.ico":                             filet,
			"main.js":                                 fileu,
			"terminal.html":                           filev,
			"xterm.css":                               filew,
			"xterm.js":                                filex,
			"xterm.js.map":                            filey,
			"zmodem.js":                               filez,
		},
	})
}
